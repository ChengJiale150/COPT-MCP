[
    {
        "rowid": 10101,
        "name": "COPT.VERSION_MAJOR",
        "description": "软件大版本号",
        "code": ""
    },
    {
        "rowid": 10102,
        "name": "COPT.VERSION_MINOR",
        "description": "软件小版本号",
        "code": ""
    },
    {
        "rowid": 10103,
        "name": "COPT.VERSION_TECHNICAL",
        "description": "软件修复版本编号",
        "code": ""
    },
    {
        "rowid": 10104,
        "name": "COPT.MAXIMIZE",
        "description": "最大化目标函数",
        "code": ""
    },
    {
        "rowid": 10105,
        "name": "COPT.MINIMIZE",
        "description": "最小化目标函数",
        "code": ""
    },
    {
        "rowid": 10106,
        "name": "COPT.INFINITY",
        "description": "代表无边界的量的默认值 (1e30)",
        "code": ""
    },
    {
        "rowid": 10107,
        "name": "COPT.UNDEFINED",
        "description": "代表数据未定义的默认值 (1e40)",
        "code": ""
    },
    {
        "rowid": 10108,
        "name": "COPT.LESS_EQUAL",
        "description": "形如 g(x) <= b 的约束",
        "code": ""
    },
    {
        "rowid": 10109,
        "name": "COPT.GREATER_EQUAL",
        "description": "形如 g(x) >= b 的约束",
        "code": ""
    },
    {
        "rowid": 10110,
        "name": "COPT.EQUAL",
        "description": "形如 g(x) = b 的约束",
        "code": ""
    },
    {
        "rowid": 10111,
        "name": "COPT.FREE",
        "description": "无边界约束的表达式",
        "code": ""
    },
    {
        "rowid": 10112,
        "name": "COPT.RANGE",
        "description": "同时有上下边界的，形如 l <= g(x) <= u 的约束",
        "code": ""
    },
    {
        "rowid": 10113,
        "name": "COPT.CONTINUOUS",
        "description": "连续变量",
        "code": ""
    },
    {
        "rowid": 10114,
        "name": "COPT.BINARY",
        "description": "二进制变量（0-1 变量）",
        "code": ""
    },
    {
        "rowid": 10115,
        "name": "COPT.INTEGER",
        "description": "整数变量",
        "code": ""
    },
    {
        "rowid": 10116,
        "name": "COPT.SOS_TYPE1",
        "description": "SOS1 约束。该类型约束中指定的一组变量至多有一个变量可取非零值",
        "code": ""
    },
    {
        "rowid": 10117,
        "name": "COPT.SOS_TYPE2",
        "description": "SOS2 约束。该类型约束中指定的一组变量至多有两个变量可取非零值，且取非零值的变量顺序要求相邻",
        "code": ""
    },
    {
        "rowid": 10118,
        "name": "COPT.INDICATOR_IF",
        "description": "If-Then: 如果 y = f ，则线性约束满足；如果 y != f ，则线性约束无效（可以被违反）。数学表达式：y = f -> a^T x <= b",
        "code": ""
    },
    {
        "rowid": 10119,
        "name": "COPT.INDICATOR_ONLYIF",
        "description": "Only-If: 如果线性约束 a^T x <= b 满足，则 y = f ；如果线性约束 a^T x <= b 不满足，则 y 可以取值为 0 或 1。数学表达式：a^T x <= b -> y = f",
        "code": ""
    },
    {
        "rowid": 10120,
        "name": "COPT.INDICATOR_IFANDONLYIF",
        "description": "If-and-Only-If: 线性约束 a^T x <= b 和 y = f 必须同时满足，或者同时不满足。数学表达式：a^T x <= b <-> y = f",
        "code": ""
    },
    {
        "rowid": 10121,
        "name": "COPT.CONE_QUAD",
        "description": "标准二阶锥。数学表达式：Q_n = {x in R^n | x_0 >= sqrt(sum_{i=1}^{n-1} x_i^2), x_0 >= 0}",
        "code": ""
    },
    {
        "rowid": 10122,
        "name": "COPT.CONE_RQUAD",
        "description": "旋转二阶锥。数学表达式：Q_n^r = {x in R^n | 2x_0 x_1 >= sum_{i=2}^{n-1} x_i^2, x_0 >= 0, x_1 >= 0}",
        "code": ""
    },
    {
        "rowid": 10123,
        "name": "COPT.EXPCONE_PRIMAL",
        "description": "原始指数锥。数学表达式：cl(S_1) = S_1 U S_2, S_1 = { (t, s, r) in R^3 | s > 0, t >= s * exp(r/s) }, S_2 = { (t, s, r) in R^3 | s = 0, t >= 0, r <= 0 }",
        "code": ""
    },
    {
        "rowid": 10124,
        "name": "COPT.EXPCONE_DUAL",
        "description": "对偶指数锥。数学表达式：cl(S_1) = S_1 U S_2, S_1 = { (t, s, r) in R^3 | r < 0, t >= -r * exp(s/r - 1) }, S_2 = { (t, s, r) in R^3 | r = 0, t >= 0, s >= 0 }",
        "code": ""
    },
    {
        "rowid": 10125,
        "name": "COPT.BASIS_LOWER",
        "description": "非基变量，取值下边界。取值: 0",
        "code": ""
    },
    {
        "rowid": 10126,
        "name": "COPT.BASIS_BASIC",
        "description": "基变量。取值: 1",
        "code": ""
    },
    {
        "rowid": 10127,
        "name": "COPT.BASIS_UPPER",
        "description": "非基变量，取值上边界。取值: 2",
        "code": ""
    },
    {
        "rowid": 10128,
        "name": "COPT.BASIS_SUPERBASIC",
        "description": "非基变量，但取值非上下边界。取值: 3",
        "code": ""
    },
    {
        "rowid": 10129,
        "name": "COPT.BASIS_FIXED",
        "description": "非基变量，固定在它唯一的边界（上下边界相等）。取值: 4",
        "code": ""
    },
    {
        "rowid": 10130,
        "name": "COPT.UNSTARTED",
        "description": "尚未开始求解。取值: 0",
        "code": ""
    },
    {
        "rowid": 10131,
        "name": "COPT.OPTIMAL",
        "description": "找到了最优解。取值: 1",
        "code": ""
    },
    {
        "rowid": 10132,
        "name": "COPT.INFEASIBLE",
        "description": "模型是无解的。取值: 2",
        "code": ""
    },
    {
        "rowid": 10133,
        "name": "COPT.UNBOUNDED",
        "description": "目标函数在优化方向没有边界。取值: 3",
        "code": ""
    },
    {
        "rowid": 10134,
        "name": "COPT.INF_OR_UNB",
        "description": "模型无解或目标函数在优化方向没有边界。取值: 4",
        "code": ""
    },
    {
        "rowid": 10135,
        "name": "COPT.NUMERICAL",
        "description": "求解遇到数值问题。取值: 5",
        "code": ""
    },
    {
        "rowid": 10136,
        "name": "COPT.NODELIMIT",
        "description": "在时间限制到达前未能完成求解。取值: 6",
        "code": ""
    },
    {
        "rowid": 10137,
        "name": "COPT.IMPRECISE",
        "description": "求解结果不准确。取值: 7",
        "code": ""
    },
    {
        "rowid": 10138,
        "name": "COPT.TIMEOUT",
        "description": "在时间限制到达前未能完成求解。取值: 8",
        "code": ""
    },
    {
        "rowid": 10139,
        "name": "COPT.UNFINISHED",
        "description": "求解终止。但是由于数值问题，求解器无法给出结果。取值: 9",
        "code": ""
    },
    {
        "rowid": 10140,
        "name": "COPT.INTERRUPTED",
        "description": "用户中止。取值: 10",
        "code": ""
    },
    {
        "rowid": 10141,
        "name": "COPT.CBCONTEXT_INCUMBENT",
        "description": "当找到当前最优可行解时，触发回调函数。",
        "code": ""
    },
    {
        "rowid": 10142,
        "name": "COPT.CBCONTEXT_MIPRELAX",
        "description": "当找到 MIP 线性松弛解时，触发回调函数。",
        "code": ""
    },
    {
        "rowid": 10143,
        "name": "COPT.CBCONTEXT_MIPSOL",
        "description": "当找到 MIP 可行解时，触发回调函数。",
        "code": ""
    },
    {
        "rowid": 10144,
        "name": "COPT.CBCONTEXT_MIPNODE",
        "description": "当处理完成 MIP 节点并求解线性松弛问题完成时，触发回调函数。",
        "code": ""
    },
    {
        "rowid": 10145,
        "name": "COPT.CLIENT_CLUSTER",
        "description": "远程服务器的 IP 地址。",
        "code": ""
    },
    {
        "rowid": 10146,
        "name": "COPT.CLIENT_FLOATING",
        "description": "令牌服务器的 IP 地址。",
        "code": ""
    },
    {
        "rowid": 10147,
        "name": "COPT.CLIENT_PASSWORD",
        "description": "远程服务器的密码。",
        "code": ""
    },
    {
        "rowid": 10148,
        "name": "COPT.CLIENT_PORT",
        "description": "令牌服务器的通信端口。",
        "code": ""
    },
    {
        "rowid": 10149,
        "name": "COPT.CLIENT_WAITTIME",
        "description": "客户端连接等待时间。",
        "code": ""
    },
    {
        "rowid": 10201,
        "name": "COPT.Attr.Cols",
        "description": "变量（系数矩阵列）的个数。",
        "code": ""
    },
    {
        "rowid": 10202,
        "name": "COPT.Attr.PSDCols",
        "description": "半定变量的个数。",
        "code": ""
    },
    {
        "rowid": 10203,
        "name": "COPT.Attr.Rows",
        "description": "约束（系数矩阵行）的个数。",
        "code": ""
    },
    {
        "rowid": 10204,
        "name": "COPT.Attr.Elems",
        "description": "系数矩阵的非零元素个数。",
        "code": ""
    },
    {
        "rowid": 10205,
        "name": "COPT.Attr.QElems",
        "description": "二次目标函数中非零二次项个数。",
        "code": ""
    },
    {
        "rowid": 10206,
        "name": "COPT.Attr.PSDElems",
        "description": "目标函数中半定项个数。",
        "code": ""
    },
    {
        "rowid": 10207,
        "name": "COPT.Attr.SymMats",
        "description": "模型中对称矩阵的个数。",
        "code": ""
    },
    {
        "rowid": 10208,
        "name": "COPT.Attr.Bins",
        "description": "二进制变量（列）的个数。",
        "code": ""
    },
    {
        "rowid": 10209,
        "name": "COPT.Attr.Ints",
        "description": "整数变量（列）的个数。",
        "code": ""
    },
    {
        "rowid": 10210,
        "name": "COPT.Attr.Soss",
        "description": "SOS 约束的个数。",
        "code": ""
    },
    {
        "rowid": 10211,
        "name": "COPT.Attr.Cones",
        "description": "二阶锥约束的个数。",
        "code": ""
    },
    {
        "rowid": 10212,
        "name": "COPT.Attr.ExpCones",
        "description": "指数锥约束的个数。",
        "code": ""
    },
    {
        "rowid": 10213,
        "name": "COPT.Attr.AffineCones",
        "description": "仿射锥约束的个数。",
        "code": ""
    },
    {
        "rowid": 10214,
        "name": "COPT.Attr.QConstrs",
        "description": "二次约束的个数。",
        "code": ""
    },
    {
        "rowid": 10215,
        "name": "COPT.Attr.PSDConstrs",
        "description": "半定约束的个数。",
        "code": ""
    },
    {
        "rowid": 10216,
        "name": "COPT.Attr.LMIConstrs",
        "description": "LMI （Linear Matrix Inequalities，线性矩阵不等式）约束的个数。",
        "code": ""
    },
    {
        "rowid": 10217,
        "name": "COPT.Attr.Indicators",
        "description": "Indicator 约束的个数。",
        "code": ""
    },
    {
        "rowid": 10218,
        "name": "COPT.Attr.ObjSense",
        "description": "优化方向。",
        "code": ""
    },
    {
        "rowid": 10219,
        "name": "COPT.Attr.ObjConst",
        "description": "目标函数的常数部分。",
        "code": ""
    },
    {
        "rowid": 10220,
        "name": "COPT.Attr.HasQObj",
        "description": "模型是否包含二次项目标函数。",
        "code": ""
    },
    {
        "rowid": 10221,
        "name": "COPT.Attr.HasPSDObj",
        "description": "模型的目标函数是否包含半定项。",
        "code": ""
    },
    {
        "rowid": 10222,
        "name": "COPT.Attr.IsMIP",
        "description": "模型是否为整数规划模型。",
        "code": ""
    },
    {
        "rowid": 10223,
        "name": "COPT.Attr.LpStatus",
        "description": "线性规划求解状态。可取值： 请参考一般常数章节：解状态",
        "code": ""
    },
    {
        "rowid": 10224,
        "name": "COPT.Attr.MipStatus",
        "description": "整数规划求解状态。可取值： 请参考一般常数章节：解状态",
        "code": ""
    },
    {
        "rowid": 10225,
        "name": "COPT.Attr.SimplexIter",
        "description": "单纯形法迭代循环数。",
        "code": ""
    },
    {
        "rowid": 10226,
        "name": "COPT.Attr.BarrierIter",
        "description": "内点法迭代循环数。",
        "code": ""
    },
    {
        "rowid": 10227,
        "name": "COPT.Attr.NodeCnt",
        "description": "分支定界搜索的节点数。",
        "code": ""
    },
    {
        "rowid": 10228,
        "name": "COPT.Attr.PoolSols",
        "description": "解池中的解的数目。",
        "code": ""
    },
    {
        "rowid": 10229,
        "name": "COPT.Attr.TuneResults",
        "description": "参数调优结果的数目。",
        "code": ""
    },
    {
        "rowid": 10230,
        "name": "COPT.Attr.HasLpSol",
        "description": "是否可以提供线性规划的解值。",
        "code": ""
    },
    {
        "rowid": 10231,
        "name": "COPT.Attr.HasBasis",
        "description": "是否可以提供线性规划的基。",
        "code": ""
    },
    {
        "rowid": 10232,
        "name": "COPT.Attr.HasDualFarkas",
        "description": "当线性规划问题无可行解时，是否返回对偶 Farkas（也叫做对偶极射线）。",
        "code": ""
    },
    {
        "rowid": 10233,
        "name": "COPT.Attr.HasPrimalRay",
        "description": "当线性规划问题无界时，是否返回主元射线（也叫做极射线）。",
        "code": ""
    },
    {
        "rowid": 10234,
        "name": "COPT.Attr.HasMipSol",
        "description": "是否存在整数解。",
        "code": ""
    },
    {
        "rowid": 10235,
        "name": "COPT.Attr.IISCols",
        "description": "组成 IIS 的变量边界的数目。",
        "code": ""
    },
    {
        "rowid": 10236,
        "name": "COPT.Attr.IISRows",
        "description": "组成 IIS 的约束的数目。",
        "code": ""
    },
    {
        "rowid": 10237,
        "name": "COPT.Attr.IISSOSs",
        "description": "组成 IIS 的 SOS 约束的数目。",
        "code": ""
    },
    {
        "rowid": 10238,
        "name": "COPT.Attr.IISIndicators",
        "description": "组成 IIS 的 Indicator 约束的数目。",
        "code": ""
    },
    {
        "rowid": 10239,
        "name": "COPT.Attr.HasIIS",
        "description": "是否存在 IIS。",
        "code": ""
    },
    {
        "rowid": 10240,
        "name": "COPT.Attr.HasFeasRelaxSol",
        "description": "是否存在可行化松弛结果。",
        "code": ""
    },
    {
        "rowid": 10241,
        "name": "COPT.Attr.IsMinIIS",
        "description": "计算出的 IIS 是否为极小。",
        "code": ""
    },
    {
        "rowid": 10242,
        "name": "COPT.Attr.LpObjval",
        "description": "线性规划目标函数值。",
        "code": ""
    },
    {
        "rowid": 10243,
        "name": "COPT.Attr.BestObj",
        "description": "整数规划求解结束时最好的目标函数值。",
        "code": ""
    },
    {
        "rowid": 10244,
        "name": "COPT.Attr.BestBnd",
        "description": "整数规划求解结束时最好的下界。",
        "code": ""
    },
    {
        "rowid": 10245,
        "name": "COPT.Attr.BestGap",
        "description": "整数规划求解结束时最好的相对容差。",
        "code": ""
    },
    {
        "rowid": 10246,
        "name": "COPT.Attr.FeasRelaxObj",
        "description": "可行化松弛值。",
        "code": ""
    },
    {
        "rowid": 10247,
        "name": "COPT.Attr.SolvingTime",
        "description": "求解所使用的时间（秒）。",
        "code": ""
    },
    {
        "rowid": 10301,
        "name": "COPT.Info.Obj",
        "description": "浮点数信息。变量（列）的目标函数系数。",
        "code": ""
    },
    {
        "rowid": 10302,
        "name": "COPT.Info.LB",
        "description": "浮点数信息。变量（列）或者约束（行）的下界。",
        "code": ""
    },
    {
        "rowid": 10303,
        "name": "COPT.Info.UB",
        "description": "浮点数信息。变量（列）或者约束（行）的上界。",
        "code": ""
    },
    {
        "rowid": 10304,
        "name": "COPT.Info.Value",
        "description": "浮点数信息。变量（列）的取值。",
        "code": ""
    },
    {
        "rowid": 10305,
        "name": "COPT.Info.Slack",
        "description": "浮点数信息。松弛变量的取值，也叫做约束的活跃程度（activities）。仅适用于线性规划模型。",
        "code": ""
    },
    {
        "rowid": 10306,
        "name": "COPT.Info.Dual",
        "description": "浮点数信息。对偶变量的取值。仅适用于线性规划模型。",
        "code": ""
    },
    {
        "rowid": 10307,
        "name": "COPT.Info.RedCost",
        "description": "浮点数信息。变量的 Reduced cost。仅适用于线性规划模型。",
        "code": ""
    },
    {
        "rowid": 10308,
        "name": "COPT.Info.DualFarkas",
        "description": "浮点数信息。线性规划问题无可行解时，线性约束的对偶 Farkas（也叫做对偶极射线）。请设置 \"ReqFarkasRay\" 这一参数，以确保求解器可以返回对偶 Farkas。对偶 Farkas 的作用可以用形如 Ax = 0 and l ≤ x ≤ u 的线性规划约束解释。当该线性规划无可行解时，使用对偶 Farkas 向量 y 可以证明线性约束系统存在冲突：max y^T Ax < y^T b = 0。如何计算 max y^T Ax：使用向量 â = y^T A，当 â_i < 0 时选择 x_i = l_i 或者 â_i > 0 时选择 x_i = u_i，可以计算出表达式 y^T Ax 的最大可能取值。有些应用依赖于另一种等价的线性系统冲突证明：min ȳ^T Ax > ȳ^T b = 0。对于此种情况，可以对求解器返回的对偶 Farkas 取负值实现，即 ȳ = −y。在极端情况下，求解器可能无法返回有效的对偶 Farkas。例如当线性规划问题的不可行性微乎其微时。此时，我们建议用 FeasRelax 功能研究或者修复线性规划的不可行性。",
        "code": ""
    },
    {
        "rowid": 10309,
        "name": "COPT.Info.PrimalRay",
        "description": "浮点数信息。线性规划问题无界时，变量的主元射线（也叫做极射线）。请设置 \"ReqFarkasRay\" 这一参数，以确保求解器可以返回主元射线。对于一个求解最小值的线性规划问题 min c^T x, Ax = b and x ≥ 0，主元射线向量 r 满足以下条件：r ≥ 0, Ar = 0 以及 c^T r < 0。",
        "code": ""
    },
    {
        "rowid": 10401,
        "name": "COPT.CbInfo.BestObj",
        "description": "浮点数信息。当前最优目标函数值。",
        "code": ""
    },
    {
        "rowid": 10402,
        "name": "COPT.CbInfo.BestBnd",
        "description": "浮点数信息。当前最优目标下界。",
        "code": ""
    },
    {
        "rowid": 10403,
        "name": "COPT.CbInfo.HasIncumbent",
        "description": "整数信息。当前是否有最优可行解。",
        "code": ""
    },
    {
        "rowid": 10404,
        "name": "COPT.CbInfo.Incumbent",
        "description": "浮点数信息。当前最优可行解。",
        "code": ""
    },
    {
        "rowid": 10405,
        "name": "COPT.CbInfo.MipCandObj",
        "description": "浮点数信息。当前可行解对应的目标函数值。",
        "code": ""
    },
    {
        "rowid": 10406,
        "name": "COPT.CbInfo.MipCandidate",
        "description": "浮点数信息。当前可行解。",
        "code": ""
    },
    {
        "rowid": 10407,
        "name": "COPT.CbInfo.RelaxSolObj",
        "description": "浮点数信息。当前 LP 松弛问题的目标函数值。",
        "code": ""
    },
    {
        "rowid": 10408,
        "name": "COPT.CbInfo.RelaxSolution",
        "description": "浮点数信息。当前 LP 松弛问题的解。",
        "code": ""
    },
    {
        "rowid": 10409,
        "name": "COPT.CbInfo.NodeStatus",
        "description": "整数信息。当前节点 LP 松弛问题的求解状态。可取值请参考：一般常数章节：解状态（部分），除去 NODELIMIT, UNSTARTED, INF_OR_UNB ，其他均为其可能取值。",
        "code": ""
    },
    {
        "rowid": 10501,
        "name": "COPT.Param.TimeLimit",
        "description": "浮点数参数。优化求解的时间限制（秒）。默认值 1e20，最小值 0，最大值 1e20。",
        "code": ""
    },
    {
        "rowid": 10502,
        "name": "COPT.Param.SolTimeLimit",
        "description": "浮点数参数。找到原始可行解的时间限制（秒）。默认值 1e20，最小值 0，最大值 1e20。",
        "code": ""
    },
    {
        "rowid": 10503,
        "name": "COPT.Param.NodeLimit",
        "description": "整数参数。整数规划求解的节点数限制。默认值 -1（自动选择），最小值 -1（自动选择），最大值 INT_MAX。",
        "code": ""
    },
    {
        "rowid": 10504,
        "name": "COPT.Param.BarIterLimit",
        "description": "整数参数。内点法求解时的迭代数限制。默认值 500，最小值 0，最大值 INT_MAX。",
        "code": ""
    },
    {
        "rowid": 10505,
        "name": "COPT.Param.MatrixTol",
        "description": "浮点数参数。输入矩阵的系数容差。默认值 1e-10，最小值 0，最大值 1e-7。",
        "code": ""
    },
    {
        "rowid": 10506,
        "name": "COPT.Param.FeasTol",
        "description": "浮点数参数。变量、约束取值的可行性容差。默认值 1e-6，最小值 1e-9，最大值 1e-4。",
        "code": ""
    },
    {
        "rowid": 10507,
        "name": "COPT.Param.DualTol",
        "description": "浮点数参数。对偶解的可行性容差。默认值 1e-6，最小值 1e-9，最大值 1e-4。",
        "code": ""
    },
    {
        "rowid": 10508,
        "name": "COPT.Param.IntTol",
        "description": "浮点参数。变量的整数解容差。默认值 1e-6，最小值 1e-9，最大值 1e-1。",
        "code": ""
    },
    {
        "rowid": 10509,
        "name": "COPT.Param.RelGap",
        "description": "浮点参数。整数规划的最优相对容差。默认值 1e-4，最小值 0，最大值 DBL_MAX。",
        "code": ""
    },
    {
        "rowid": 10510,
        "name": "COPT.Param.AbsGap",
        "description": "浮点参数。整数规划的最优绝对容差。默认值 1e-6，最小值 0，最大值 DBL_MAX。",
        "code": ""
    },
    {
        "rowid": 10511,
        "name": "COPT.Param.Presolve",
        "description": "整数参数。预求解的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)，4 (无限制，直至无法改变模型（可能非常耗时）)。",
        "code": ""
    },
    {
        "rowid": 10512,
        "name": "COPT.Param.Scaling",
        "description": "整数参数。是否在求解一个模型前，调整系数矩阵的数值（Scaling）。默认值 -1。可选值：-1 (自动选择)，0 (不调整)，1 (调整系数矩阵的数值)。",
        "code": ""
    },
    {
        "rowid": 10513,
        "name": "COPT.Param.Dualize",
        "description": "整数参数。是否构建并求解对偶模型。默认值 -1。可选值：-1 (自动选择)，0 (不构建对偶模型)，1 (构建对偶模型)。",
        "code": ""
    },
    {
        "rowid": 10514,
        "name": "COPT.Param.LpMethod",
        "description": "整数参数。求解线性规划问题的算法。默认值 -1。可选值：-1 (自动选择。对于线性规划问题，选择对偶单纯形法；对于混合整数线性规划问题，选择对偶单纯形法或内点法之一。)，1 (对偶单纯形法。)，2 (内点法。)，3 (直接 Crossover。)，4 (并发求解（同时启动单纯形法与内点法求解）。)，5 (基于稀疏和数值范围等特征自动选择单纯形法或者内点法。)，6 (使用一阶算法（PDLP) 求解。)。注意：目前，COPT 的 GPU 模式仅支持求解线性规划问题，并且需要选择使用一阶算法（PDLP) 进行求解。如需开启，请设置 LpMethod=6。",
        "code": ""
    },
    {
        "rowid": 10515,
        "name": "COPT.Param.DualPrice",
        "description": "整数参数。选定对偶单纯形法的 Pricing 算法。默认值 -1。可选值：-1 (自动选择)，0 (使用 Devex 算法)，1 (使用对偶最陡边算法)。",
        "code": ""
    },
    {
        "rowid": 10516,
        "name": "COPT.Param.DualPerturb",
        "description": "整数参数。是否允许对偶单纯性算法使用目标函数摄动。默认值 -1。可选值：-1 (自动选择)，0 (无摄动)，1 (允许目标函数摄动)。",
        "code": ""
    },
    {
        "rowid": 10517,
        "name": "COPT.Param.BarHomogeneous",
        "description": "整数参数。是否使用齐次自对偶方法。默认值 -1。可选值：-1 (自动选择)，0 (不使用)，1 (使用)。",
        "code": ""
    },
    {
        "rowid": 10518,
        "name": "COPT.Param.BarOrder",
        "description": "整数参数。内点法的矩阵排列算法。默认值 -1。可选值：-1 (自动选择)，0 (Approximate Minimum Degree（AMD）算法)，1 (Nested Dissection（ND）算法)。",
        "code": ""
    },
    {
        "rowid": 10519,
        "name": "COPT.Param.BarStart",
        "description": "整数参数。内点法寻找初始点的算法。默认值 -1。可选值：-1 (自动选择)，0 (Simple 算法)，1 (Mehrotra 算法)，2 (Modified Mehrotra 算法)。",
        "code": ""
    },
    {
        "rowid": 10520,
        "name": "COPT.Param.Crossover",
        "description": "整数参数。是否使用 Crossover。默认值 1。可选值：-1 (自动选择。仅在当线性规划的解不满足容差时使用。)，0 (不使用。)，1 (使用。)。",
        "code": ""
    },
    {
        "rowid": 10521,
        "name": "COPT.Param.ReqFarkasRay",
        "description": "整数参数。进阶话题。当线性规划问题无可行解或者无界时，是否计算对偶 Farkas（也叫做对偶极射线）或者主元射线（也叫做极射线）。默认值 0。可选值：0 (不计算)，1 (计算)。",
        "code": ""
    },
    {
        "rowid": 10522,
        "name": "COPT.Param.CutLevel",
        "description": "整数参数。生成割平面的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10523,
        "name": "COPT.Param.RootCutLevel",
        "description": "整数参数。根节点生成割平面的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10524,
        "name": "COPT.Param.TreeCutLevel",
        "description": "整数参数。搜索树生成割平面的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10525,
        "name": "COPT.Param.RootCutRounds",
        "description": "整数参数。根节点生成割平面的次数。默认值 -1（自动选择），最小值 -1（自动选择），最大值 INT_MAX。",
        "code": ""
    },
    {
        "rowid": 10526,
        "name": "COPT.Param.NodeCutRounds",
        "description": "整数参数。搜索树节点生成割平面的次数。默认值 -1（自动选择），最小值 -1（自动选择），最大值 INT_MAX。",
        "code": ""
    },
    {
        "rowid": 10527,
        "name": "COPT.Param.HeurLevel",
        "description": "整数参数。启发式算法的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10528,
        "name": "COPT.Param.RoundingHeurLevel",
        "description": "整数参数。Rounding 启发式算法的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10529,
        "name": "COPT.Param.DivingHeurLevel",
        "description": "整数参数。Diving 启发式算法的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10530,
        "name": "COPT.Param.SubMipHeurLevel",
        "description": "整数参数。基于子 MIP 的启发式算法的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10531,
        "name": "COPT.Param.FAPHeurLevel",
        "description": "整数参数。Fix-and-propagate 启发式算法的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10532,
        "name": "COPT.Param.StrongBranching",
        "description": "整数参数。Strong Branching 的强度。默认值 -1。可选值：-1 (自动选择)，0 (关闭)，1 (少量快速)，2 (正常)，3 (多多益善)。",
        "code": ""
    },
    {
        "rowid": 10533,
        "name": "COPT.Param.ConflictAnalysis",
        "description": "整数参数。是否使用冲突分析。默认值 -1。可选值：-1 (自动选择)，0 (不使用)，1 (使用)。",
        "code": ""
    },
    {
        "rowid": 10534,
        "name": "COPT.Param.MipStartMode",
        "description": "整数参数。处理初始解的方式。默认值 -1。可选值：-1 (自动选择)，0 (不使用任何初始解)，1 (仅使用完整且可行的初始解)，2 (仅使用可行的初始解（若初始解不完整，通过求解子 MIP 来补全）)。",
        "code": ""
    },
    {
        "rowid": 10535,
        "name": "COPT.Param.MipStartNodeLimit",
        "description": "整数参数。补全不完整的初始解时，求解的子 MIP 的节点数限制。默认值 -1（自动选择），最小值 -1（自动选择），最大值 INT_MAX。",
        "code": ""
    },
    {
        "rowid": 10536,
        "name": "COPT.Param.SDPMethod",
        "description": "整数参数。求解半定规划问题的算法。默认值 -1。可选值：-1 (自动选择)，0 (原始-对偶内点法)，1 (交替方向乘子法)，2 (对偶内点法)。",
        "code": ""
    },
    {
        "rowid": 10537,
        "name": "COPT.Param.IISMethod",
        "description": "整数参数。计算 IIS 的方法。默认值 -1。可选值：-1 (自动选择)，0 (计算结果质量优先)，1 (计算效率优先)。",
        "code": ""
    },
    {
        "rowid": 10538,
        "name": "COPT.Param.FeasRelaxMode",
        "description": "整数参数。计算可行化松弛的方法。默认值 0。可选值：0 (最小化加权冲突值)，1 (计算最小化加权冲突下的原始模型最优可行化松弛)，2 (最小化冲突数目)，3 (计算最小化冲突数目下的原始模型最优可行化松弛)，4 (最小化加权平方冲突值)，5 (计算最小化加权平方冲突下的原始模型最优可行化松弛)。注意：FeasRelaxMode=4 和 FeasRelaxMode=5 这两种方法不支持混合整数线性规划，仅支持连续线性规划；其余的方法以上两种问题都支持。",
        "code": ""
    },
    {
        "rowid": 10539,
        "name": "COPT.Param.TuneTimeLimit",
        "description": "浮点数参数。参数调优的时间限制。若取值为 0，则表示由求解器自动设置。默认值 0，最小值 0，最大值 1e20。",
        "code": ""
    },
    {
        "rowid": 10540,
        "name": "COPT.Param.TuneTargetTime",
        "description": "浮点数参数。参数调优的时间目标。默认值 1e-2，最小值 0，最大值 DBL_MAX。",
        "code": ""
    },
    {
        "rowid": 10541,
        "name": "COPT.Param.TuneTargetRelGap",
        "description": "浮点数参数。参数调优的最优相对容差目标。默认值 1e-4，最小值 0，最大值 DBL_MAX。",
        "code": ""
    },
    {
        "rowid": 10542,
        "name": "COPT.Param.TuneMethod",
        "description": "整数参数。参数调优的方法。默认值 -1。可选值：-1 (自动选择)，0 (贪婪搜索策略)，1 (更广泛的搜索策略)。",
        "code": ""
    },
    {
        "rowid": 10543,
        "name": "COPT.Param.TuneMode",
        "description": "整数参数。参数调优的模式。默认值 -1。可选值：-1 (自动选择)，0 (求解时间)，1 (最优相对容差)，2 (目标函数值)，3 (目标函数值下界)。",
        "code": ""
    },
    {
        "rowid": 10544,
        "name": "COPT.Param.TuneMeasure",
        "description": "整数参数。参数调优结果计算方式。默认值 -1。可选值：-1 (自动选择)，0 (计算平均值)，1 (计算最大值)。",
        "code": ""
    },
    {
        "rowid": 10545,
        "name": "COPT.Param.TunePermutes",
        "description": "整数参数。参数调优每组参数模型计算次数。若取值为 0，则表示由求解器自动设置。默认值 0，最小值 0，最大值 INT_MAX。",
        "code": ""
    },
    {
        "rowid": 10546,
        "name": "COPT.Param.TuneOutputLevel",
        "description": "整数参数。参数调优日志输出强度。默认值 2。可选值：0 (不输出调优日志)，1 (仅输出改进参数的摘要)，2 (输出每次调优尝试的摘要)，3 (输出每次调优尝试的详细日志)。",
        "code": ""
    },
    {
        "rowid": 10547,
        "name": "COPT.Param.LazyConstraints",
        "description": "整数参数。是否将惰性约束加入模型中。默认值 -1。可选值：-1 (自动选择)，0 (否)，1 (是)。注意：该参数仅对 MIP 模型有效。",
        "code": ""
    },
    {
        "rowid": 10548,
        "name": "COPT.Param.Threads",
        "description": "整数参数。问题求解使用的线程数。默认值 -1（自动选择），最小值 -1（自动选择），最大值 128。",
        "code": ""
    },
    {
        "rowid": 10549,
        "name": "COPT.Param.BarThreads",
        "description": "整数参数。内点法使用的线程数。若值为-1，则线程数由参数 Threads 决定。默认值 -1，最小值 -1，最大值 128。",
        "code": ""
    },
    {
        "rowid": 10550,
        "name": "COPT.Param.SimplexThreads",
        "description": "整数参数。对偶单纯形法使用的线程数。若值为-1，则线程数由参数 Threads 决定。默认值 -1，最小值 -1，最大值 128。",
        "code": ""
    },
    {
        "rowid": 10551,
        "name": "COPT.Param.CrossoverThreads",
        "description": "整数参数。Crossover 使用的线程数。若值为-1，则线程数由参数 Threads 决定。默认值 -1，最小值 -1，最大值 128。",
        "code": ""
    },
    {
        "rowid": 10552,
        "name": "COPT.Param.MipTasks",
        "description": "整数参数。MIP 求解使用的任务数。默认值 -1（自动选择），最小值 -1（自动选择），最大值 256。",
        "code": ""
    },
    {
        "rowid": 10553,
        "name": "COPT.Param.GPUMode",
        "description": "整数参数。GPU 求解模式的使用方式。默认值 -1。可选值：-1 (自动选择)，0 (强制使用 CPU 模式)，1 (使用 NVIDIA GPU)。注意：1. 当前 COPT 的 GPU 模式仅支持求解线性规划问题，且需要使用一阶算法 PDLP，即设置 LpMethod=6 时才起作用。2. 对于 Windows，Linux-x86 系统，当 GPUMode 取默认值或 1 时，COPT 会尝试检测是否能正常加载 GPU 求解所需要的 CUDA 函数库，以及是否存在支持 GPU 的显卡。若以上检测均成功，则使用 GPU 模式进行求解运算；若失败，则继续使用 CPU 模式的 COPT。两者打印 COPT 启动的信息略有不同。3. 对于 MacOS，Linux-aarch64 等系统，只提供 CPU 版本的 COPT，即使设置 GPUMode=1 ，也会启动 CPU 版本的 COPT 进行求解。两者打印 COPT 启动的信息略有不同。4. 部署 CUDA 函数库不是运行 COPT 的必要依赖，如果未设置 LpMethod=6 （未使用一阶算法 PDLP），无论是否安装 CUDA 库都不影响 COPT 的运行和求解。更多关于 CUDA 函数库安装的常见问题，请参考常见问题章节：GPU 使用相关。",
        "code": ""
    },
    {
        "rowid": 10554,
        "name": "COPT.Param.GPUDevice",
        "description": "整数参数。使用指定编号的 GPU（当运行机器有多个 GPU 存在的情形下）。默认值 -1（自动选择），最小值 -1（自动选择），最大值 INT_MAX。",
        "code": ""
    },
    {
        "rowid": 10555,
        "name": "COPT.Param.PDLPTol",
        "description": "浮点参数。一阶算法（PDLP）的收敛容差。默认值 1e-6，最小值 1e-12，最大值 1e-4。",
        "code": ""
    },
    {
        "rowid": 10556,
        "name": "COPT.Param.Logging",
        "description": "整数参数。是否显示求解日志。默认值 1。可选值：0 (不显示求解日志)，1 (显示求解日志)。",
        "code": ""
    },
    {
        "rowid": 10557,
        "name": "COPT.Param.LogToConsole",
        "description": "整数参数。是否显示求解日志到控制台。默认值 1。可选值：0 (不显示求解日志到控制台)，1 (显示求解日志到控制台)。",
        "code": ""
    },
    {
        "rowid": 20101,
        "name": "EnvrConfig()",
        "description": "摘要：EnvrConfig()。描述：EnvrConfig 类的构造函数，该方法将创建并返回一个EnvrConfig 类对象。参量：无。",
        "code": "# 创建杉数求解器客户端配置\nenvconfig = EnvrConfig()"
    },
    {
        "rowid": 20102,
        "name": "EnvrConfig.set()",
        "description": "摘要：set(name, value)。描述：设置客户端配置参数。参量：name为客户端配置参数名，可取值参考客户端配置参数；value为客户端配置参数值。",
        "code": "# 设置客户端配置参数\nenvconfig.set(COPT.CLIENT_WAITTIME, 600)\nenvconfig.set(COPT.CLIENT_CLUSTER, \"127.0.0.1\")\n# 设置关闭创建COPT求解环境时输出的banner信息(如版本号等)\nenvconfig.set(\"nobanner\", \"1\")"
    },
    {
        "rowid": 20201,
        "name": "Envr()",
        "description": "摘要：Envr(arg=None)。描述：Envr 类的构造函数，该方法将创建并返回一个Envr 类对象。参量：arg为授权文件的路径或客户端配置，可选参数，默认为None。",
        "code": "# 创建杉数求解器求解环境\nenv = Envr()"
    },
    {
        "rowid": 20202,
        "name": "Envr.createModel()",
        "description": "摘要：createModel(name=\"\")。描述：创建优化模型，返回一个Model 类对象。参量：name为待创建优化模型的名称，可选参数，默认为\"\"。",
        "code": "# 创建杉数求解器求解模型\nmodel = env.createModel(\"coptprob\")"
    },
    {
        "rowid": 20203,
        "name": "Envr.close()",
        "description": "摘要：close()。描述：关闭与远程服务器的连接。参量：无。",
        "code": "关闭与远程服务器的连接\nenv.close()"
    },
    {
        "rowid": 20301,
        "name": "Model.addVar()",
        "description": "摘要：addVar(lb=0.0, ub=COPT.INFINITY, obj=0.0, vtype=COPT.CONTINUOUS, name=\"\", column=None)。描述：添加一个变量到模型中，并返回创建的一个Var 类对象。参量：lb为变量的下界，可选参量，默认为0.0；ub为变量的上界，可选参量，默认为COPT.INFINITY；obj为变量的目标函数系数，可选参量，默认为0.0；vtype为变量的类型，可选参量，默认为COPT.CONTINUOUS，可取值详见变量类型；name为变量的名字，可选参量，默认为\"\"，由求解器内部自动生成；column为变量对应的列，可选参量，默认为None。",
        "code": "# 添加一个连续变量\nx = m.addVar()\n# 添加一个二进制变量\ny = m.addVar(vtype=COPT.BINARY)\n# 添加一个整数变量,下界为-1.0, 上界为1.0,目标函数系数为1.0,变量名为\"z\"\nz = m.addVar(-1.0, 1.0, 1.0, COPT.INTEGER, \"z\")"
    },
    {
        "rowid": 20302,
        "name": "Model.addVars()",
        "description": "摘要：addVars(*indices, lb=0.0, ub=COPT.INFINITY, obj=0.0, vtype=COPT.CONTINUOUS, nameprefix=\"C\")。描述：添加一组变量到模型中，并返回一个tupledict 类对象，其键为变量的下标，值为相应的Var 类对象。参量：*indices为变量的下标；lb为变量的下界，可选参量，默认为0.0；ub为变量的上界，可选参量，默认为COPT.INFINITY；obj为变量的目标函数系数，可选参量，默认为0.0；vtype为变量的类型，可选参量，默认为COPT.CONTINUOUS，可取值详见变量类型；nameprefix为变量的名称前缀，可选参量，默认为\"C\"，其实际名称结合变量的下标自动生成。",
        "code": "# 添加三维整数变量x,共计6个变量\nx = m.addVars(1, 2, 3, vtype=COPT.INTEGER)\n# 添加2个连续变量y,其下标由tl中的元素指定,变量名前缀为\"tl\"\ntl = tuplelist([(0, 1), (1, 2)])\ny = m.addVars(tl, nameprefix=\"tl\")"
    },
    {
        "rowid": 20303,
        "name": "Model.addMVar()",
        "description": "摘要：addMVar(shape, lb=0.0, ub=COPT.INFINITY, obj=0.0, vtype=COPT.CONTINUOUS, nameprefix=\"\")。描述：添加MVar 类对象到模型中。它在矩阵建模中使用，可以像NumPy 里多维数组一样运算，其形状和维度都有类似定义。参量：shape取值为整数，或者整数元组，表示MVar 类对象的形状；lb为变量的下界，可选参量，默认为0.0；ub为变量的上界，可选参量，默认为COPT.INFINITY；obj为变量的目标函数系数，可选参量，默认为0.0；vtype为变量的类型，可选参量，默认为COPT.CONTINUOUS，可取值详见变量类型；nameprefix为变量的名称前缀，可选参量，默认为\"\"，其实际名称结合变量的下标自动生成。返回值：返回一个MVar 类对象。",
        "code": "model.addMVar((2, 3), lb=0.0, nameprefix=\"mx\")"
    },
    {
        "rowid": 20304,
        "name": "Model.addConstr()",
        "description": "摘要：addConstr(lhs, sense=None, rhs=None, name=\"\")。描述：添加一个线性约束到模型中，返回Constraint 类对象或MConstr 类对象；添加一个半定约束到模型中，返回PsdConstraint 类对象或MPsdConstr 类对象；添加一个Indicator 约束到模型中，返回GenConstr 类对象；添加LMI 约束到模型中，返回LmiConstraint 类对象。若添加线性约束，则参数lhs 可取值为Var 类对象、LinExpr 类、ConstrBuilder 类对象或MConstrBuilder 类对象。若添加半定约束，则参数lhs 可取值为PsdExpr 类对象、PsdConstrBuilder 类对象或MPsdConstrBuilder 类对象。若添加Indicator 约束，则参数lhs 为GenConstrBuilder 类对象，并忽略其它参数；若添加LMI 约束，则参数lhs 为LmiExpr 类对象。参量：lhs为线性约束的左端项或约束构建器；sense为线性约束的类型，可选参量，默认为None，可取值详见约束类型；rhs为线性约束的右端项，可选参量，默认为None，可取值为常数、Var 类对象或LinExpr 类对象；name为线性约束的名称，可选参量，默认为\"\"，由求解器内部自动生成。",
        "code": "# 添加一个线性等式约束:x + y == 2\naddConstr(x + y, COPT.EQUAL, 2)\n添加一个线性大于等于约束:x + 2*y >= 3\naddConstr(x + 2*y >= 3.0)\n# 添加一个Indicator约束\nm.addConstr((x == 1) >> (2*y + 3*z <= 4))"
    },
    {
        "rowid": 20305,
        "name": "Model.addBoundConstr()",
        "description": "摘要：addBoundConstr(expr, lb=-COPT.INFINITY, ub=COPT.INFINITY, name=\"\")。描述：添加一个带上下界的线性约束到模型中，并返回添加的Constraint 类对象。参量：expr为线性约束的表达式，可取值为Var 类对象或LinExpr 类对象；lb为线性约束的下界，可选参量，默认为-COPT.INFINITY；ub为线性约束的上界，可选参量，默认为COPT.INFINITY；name为线性约束的名称，可选参量，默认为\"\"，由求解器内部自动生成。",
        "code": "# 添加线性双边约束:-1 <= x + y <= 1\n.addBoundConstr(x + y, -1.0, 1.0)"
    },
    {
        "rowid": 20306,
        "name": "Model.addConstrs()",
        "description": "摘要：addConstrs(generator, nameprefix=\"R\")。描述：添加一组线性约束、半定约束，或一组Indicator 约束到模型中。若参数generator 为整数，则返回一个ConstrArray 类对象，其元素为generator 个空Constraint 类对象，用户需要进一步指定这些约束的具体信息；若参数generator 为表达式生成器，则返回一个tupledict 类对象，其键为线性约束的下标，值为相应的Constraint 类对象，每个迭代生成一个Constraint 类对象；若参数 generator 为矩阵表达式生成器，则返回一个MConstr 类 对象 或MPsdConstr 类对象。若参数generator 为Indicator 约束表达式生成器，则返回一个GenConstrArray 类对象。参量：generator为整数或(矩阵)表达式生成器，或Indicator 约束表达式生成器；nameprefix为线性约束或Indicator 约束的名称前缀，可选参量，默认为\"R\"，其实际名称结合约束的下标自动生成。",
        "code": "# 添加10个线性约束,每个约束形如:x[0] + y[0] >= 2.0\nm.addConstrs(x[i] + y[i] >= 2.0 for i in range(10))"
    },
    {
        "rowid": 20307,
        "name": "Model.addMConstr()",
        "description": "摘要：addMConstr(A, x, sense, b, nameprefix=\"\")。描述：通过矩阵建模的方式，添加一组线性约束到模型中。如果这里sense 取值为COPT.LESS_EQUAL，添加的约束为A x<=b。更方便的是通过矩阵乘法生成MLinExpr 类对象，再使用重载的比较运算符生成MConstrBuilder 类对象，可以作为Model.addConstrs() 的输入生成一组线性约束。参量：A是一个二维的NumPy 矩阵，或者SciPy 列压缩矩阵( csc_matrix ) 或行压缩矩阵( csr_matrix )；x为线性项对应的变量，可以是MVar 类对象，VarArray 类对象、列表、字典或tupledict 类对象；如果为空，但参数c 不空，则取模型中所有的变量；sense为约束的类型，可取值参考约束类型；b为约束右边值，通常是浮点数，也可以是一组数，或者NumPy 的一维数组；nameprefix为约束名前缀。返回值：返回一个MConstr 类对象。",
        "code": "A = np.full((2, 3), 1)\nmx = model.addMVar(3, nameprefix=\"mx\")\nmc = model.addMConstr(A, mx, 'L', 1.0, nameprefix=\"mc\")"
    },
    {
        "rowid": 20308,
        "name": "Model.addSOS()",
        "description": "摘要：addSOS(sostype, vars, weights=None)。描述：添加一个SOS约束到模型中，并返回添加的SOS类对象。若参数sostype为SOSBuilder类对象，则参数vars和参数weights的取值将被忽略；若参数sostype为SOS约束类型，则参数vars表示SOS约束的变量，可取值为VarArray类对象、列表、字典或tupledict类对象；若参数weights为None，则SOS约束的变量权重由求解器自动生成，否则采用用户传入的数据作为权重，可取值为列表、字典或tupledict类对象。参量：sostype（SOS约束类型或SOS约束构建器）、vars（SOS约束的变量）、weights（SOS约束的变量的权重，可选，默认为None）。",
        "code": ".addSOS(COPT.SOS_TYPE1, [x, y], [1, 2])"
    },
    {
        "rowid": 20309,
        "name": "Model.addGenConstrIndicator()",
        "description": "摘要：addGenConstrIndicator(binvar, binval, lhs, sense=None, rhs=None, type=COPT.INDICATOR_IF, name=\"\")。描述：添加一个指定类型的Indicator约束到模型中，并返回添加的GenConstr类对象。若参数lhs为ConstrBuilder类对象，则参数sense和参数rhs的取值将被忽略；若参数lhs表示线性约束左端项，可取值为Var类对象或LinExpr类对象。参量：binvar（Indicator变量）、binval（Indicator变量的取值，可取值为True或False）、lhs（Indicator约束中线性约束的左端项或线性约束构建器）、sense（Indicator约束中线性约束的类型，可选，默认为None）、rhs（Indicator约束中线性约束的右端项，可选，默认为None，可取值为常数）、type（Indicator约束的类型，可选，默认为COPT.INDICATOR_IF）、name（Indicator约束的名称，可选，默认为\"\"）。",
        "code": "# 添加一个Indicator约束,当x为真时,线性约束y + 2*z >= 3成立\nm.addGenConstrIndicator(x, True, y + 2*z >= 3)\n# 添加一个Indicator约束,当线性约束y + 2*z >= 3成立时,x为真\naddGenConstrIndicator(x, True, y + 2*z >= 3, type=COPT.INDICATOR_ONLYIF)"
    },
    {
        "rowid": 20310,
        "name": "Model.addGenConstrIndicators()",
        "description": "摘要：addGenConstrIndicators(builders, nameprefix=\"\")。描述：添加一组Indicator约束到模型中，并返回GenConstrArray类对象。参量：builders（一组Indicator约束构建器，可取值为GenConstrBuilderArray类对象，或者是由GenConstrBuilder类对象构成的字典或列表）、nameprefix（Indicator约束的名称前缀，可选，默认为\"\"）。",
        "code": ""
    },
    {
        "rowid": 20311,
        "name": "Model.addConeByDim()",
        "description": "摘要：addConeByDim(dim, ctype, vtype, nameprefix=\"ConeV\")。描述：添加一个指定维度的二阶锥约束到模型中，并返回添加的Cone类对象。参量：dim（二阶锥约束的维度）、ctype（二阶锥约束的类型）、vtype（二阶锥约束中变量的类型）、nameprefix（二阶锥约束中变量名称的前缀，可选取值，默认为\"ConeV\"）。",
        "code": "# 添加一个5维的旋转二阶锥\nm.addConeByDim(5, COPT.CONE_RQUAD, None)"
    },
    {
        "rowid": 20312,
        "name": "Model.addExpConeByDim()",
        "description": "摘要：addExpConeByDim(ctype, vtype, nameprefix=\"ExpConeV\")。描述：添加一个指数锥约束到模型中，并返回添加的ExpCone类对象。参量：ctype（指数锥约束的类型）、vtype（指数锥约束中变量的类型）、nameprefix（指数锥约束中变量名称的前缀，可选取值，默认为\"ExpConeV\"）。",
        "code": "# 添加一个原始指数锥\n.addExpConeByDim(COPT.EXPCONE_PRIMAL, None)"
    },
    {
        "rowid": 20313,
        "name": "Model.addCone()",
        "description": "摘要：addCone(vars, ctype)。描述：添加一个指定变量构成的二阶锥约束。若参数vars为ConeBuilder类对象，则参数ctype的值将被忽略；若参数vars为变量，可取值为VarArray类对象、列表、字典或tupledict类对象，参数ctype表示二阶锥的类型，必须被显式指定且不可为空。参量：vars（构成二阶锥约束的变量）、ctype（二阶锥约束的类型，可取值详见二阶锥约束类型）。",
        "code": "# 添加由[z, x, y]构成的标准二阶锥约束\nm.addCone([z, x, y], COPT.CONE_QUAD)"
    },
    {
        "rowid": 20314,
        "name": "Model.addCones()",
        "description": "摘要：addCones(vars, ctype=None)。描述：添加一组二阶锥约束。若参数vars为ConeBuilder类对象或ConeBuilderArray类对象，则参数ctype的值将被忽略；若参数vars为MVar类，则参数ctype表示二阶锥的类型，必须被显式指定且不可为空。参量：vars（构成二阶锥约束的变量）、ctype（二阶锥约束的类型，可取值详见二阶锥约束类型）。",
        "code": ""
    },
    {
        "rowid": 20315,
        "name": "Model.addExpCones()",
        "description": "摘要：addExpCones(vars, ctype)。描述：添加一组由指定变量构成指数锥约束。若参数vars为ExpConeBuilder类对象，则参数ctype的值将被忽略；若参数vars为MVar类，参数ctype表示指数锥约束的类型，需要被显式指定。参量：vars（构成指数锥约束的一组变量）、ctype（指数锥约束的类型，可取值请参考指数锥约束类型）。",
        "code": ""
    },
    {
        "rowid": 20316,
        "name": "Model.addAffineCone()",
        "description": "摘要：addAffineCone(exprs, ctype=None, name=\"\")。描述：添加一个仿射锥到模型中。若参数exprs为AffineConeBuilder类对象，则参数ctype的值将被忽略；若参数exprs为MLinExpr类对象或MPsdExpr类对象，参数ctype表示仿射锥的类型，必须被显式指定且不可为空。参量：exprs（仿射锥生成器或构成仿射锥的多维数组表达式）、ctype（仿射锥的类型，可取值详见二阶锥约束类型或指数锥约束类型）、name（仿射锥的名称，可选，默认为\"\"）。",
        "code": "# 添加由Ax+b和c^Tx+d构成的标准二阶仿射锥\nA = np.array([[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]])\nb = 10\nc = np.array([1, -1, 2])\nd = 5\nmodel.addMVar(3)\nmodel.addAffineCone(cp.vstack(c @ x + d, A @ x + b), ctype=COPT.CONE_QUAD)"
    },
    {
        "rowid": 20317,
        "name": "Model.addAffineCones()",
        "description": "摘要：addAffineCones(exprs, ctype=None, nameprefix=\"AffineConV\")。描述：添加一组仿射锥到模型中。若参数exprs为AffineConeBuilder类对象或AffineConeBuilderArray类对象，则参数ctype的值将被忽略；若参数exprs为MLinExpr类对象或MPsdExpr类对象，参数ctype表示仿射锥的类型，必须被显式指定且不可为空。参量：exprs（仿射锥生成器或构成仿射锥的多维数组表达式）、ctype（仿射锥的类型，可取值详见二阶锥约束类型或指数锥约束类型）、nameprefix（仿射锥的名称前缀，可选，默认为\"AffineConV\"）。",
        "code": ""
    },
    {
        "rowid": 20318,
        "name": "Model.addQConstr()",
        "description": "摘要：addQConstr(lhs, sense=None, rhs=None, name=\"\")。描述：添加一个线性约束或二次约束到模型中，并返回添加的Constraint类对象或QConstraint类对象。若添加线性约束，则参数lhs可取值为Var类对象、LinExpr类对象或ConstrBuilder类对象；若添加二次约束，则参数lhs为QConstrBuilder类对象，或者MQConstrBuilder类对象，并忽略其它参数。参量：lhs（约束的左端项或约束构建器）、sense（约束的类型，可选参量，默认为None，可取值详见约束类型）、rhs（约束的右端项，可选参量，默认为None，可取值为常数、Var类对象、LinExpr类对象或QuadExpr类对象）、name（约束的名称，可选参量，默认为\"\"，由求解器内部自动生成）。",
        "code": "# 添加一个线性等式约束:x + y == 2\nm.addQConstr(x + y, COPT.EQUAL, 2)\n# 添加一个二次约束:x*x + y*y <= 3\nm.addQConstr(x*x + y*y <= 3.0)"
    },
    {
        "rowid": 20319,
        "name": "Model.addMQConstr()",
        "description": "摘要：addMQConstr(Q, c, sense, rhs, xQ_L=None, xQ_R=None, xc=None, name=\"\")。描述：通过矩阵建模的方式，添加一个二次约束到模型中。如果这里sense取值为COPT.LESS_EQUAL，添加的约束为 x_{Q_L} Q x_{Q_R} + c x_{c} <= rhs。更方便的是通过矩阵乘法生成MQuadExpr类对象，再使用重载的比较运算符生成MQConstrBuilder类对象，可以作为Model.addQConstr()的输入生成二次约束。参量：Q（如果二次项非空，需要提供参数Q，即一个二维的NumPy矩阵，或者SciPy列压缩矩阵(csc_matrix)或行压缩矩阵(csr_matrix)）、c（如果一次项非空，需要提供参数c，即一个一维的NumPy数组，或者Python列表）、sense（约束的类型，可取值参考约束类型）、rhs（约束右边值，通常是浮点数）、xQ_L（二次项左侧的变量，可以是MVar类对象，VarArray类对象、列表、字典或tupledict类对象）、xQ_R（二次项右侧的变量，可以是MVar类对象，VarArray类对象、列表、字典或tupledict类对象；如果为空，则取模型中所有的变量）、xc（线性项对应的变量，可以是MVar类对象，VarArray类对象、列表、字典或tupledict类对象；如果为空，但参数c不空，则取模型中所有的变量）、name（约束名）。返回值：返回一个QConstraint类对象。",
        "code": "# 创建一个3x3的全1矩阵Q\nQ = np.full((3, 3), 1)\n# 添加3维变量mx\nmx = model.addMVar(3, nameprefix=\"mx\")\n# 添加二次约束：mx' Q mx <= 1.0\nmqc = model.addMQConstr(Q, None, COPT.LESS_EQUAL, 1.0, mx, mx, None, name=\"mqc\")"
    },
    {
        "rowid": 20320,
        "name": "Model.addPsdVar()",
        "description": "摘要：添加一个半定变量。描述：添加一个半定变量。参量：半定变量的维度、name（半定变量的名字）。",
        "code": "添加维度为3,名称为\"X\" 的半定变量\nm.addPsdVar(3, \"X\")"
    },
    {
        "rowid": 20321,
        "name": "Model.addPsdVars()",
        "description": "摘要：addPsdVars(dims, nameprefix=\"PSDV\")。描述：添加一组半定变量。参量：dim为半定变量的维度；nameprefix为半定变量名字的前缀，可选，默认值为\"PSDV\"",
        "code": ".addPsdVars([3, 3])  # 添加2个维度均为3的半定变量"
    },
    {
        "rowid": 20322,
        "name": "Model.addUserCut()",
        "description": "摘要：addUserCut(lhs, sense = None, rhs = None, name=\"\")。描述：向模型中添加一个割平面。参量：lhs为割平面约束的左端项，可取值为Var类对象、LinExpr类对象或约束构建器(ConstrBuilder类对象)；sense为割平面的约束类型，可选参量，默认为None，可取值详见约束类型；rhs为割平面约束的右端项，可选参量，默认为None，可取值为常数、Var类对象或LinExpr类对象；name为割平面的名称，可选参量，默认为\"\"，由求解器内部自动生成",
        "code": "model.addUserCut(x+y <= 1)\nmodel.addUserCut(x+y == [0,1])"
    },
    {
        "rowid": 20323,
        "name": "Model.addUserCuts()",
        "description": "摘要：addUserCuts(generator, nameprefix=\"U\")。描述：向模型中批量添加多个割平面。参量：generator为一组割平面生成器，可取值为一组线性约束构建器ConstrBuilderArray类对象或多维线性约束生成器MConstrBuilder类对象；nameprefix为割平面的名称前缀，可选参量，默认为\"U\"，其实际名称结合割平面的下标自动生成",
        "code": "model.addUserCuts(x[i]+y[i] <= 1 for i in range(10))"
    },
    {
        "rowid": 20324,
        "name": "Model.addLazyConstr()",
        "description": "摘要：addLazyConstr(lhs, sense = None, rhs = None, name=\"\")。描述：向模型中添加一个惰性约束。参量：lhs为惰性约束的左端项，可取值为Var类对象、LinExpr类对象或约束构建器(ConstrBuilder类对象)；sense为惰性约束的约束类型，可选参量，默认为None，可取值详见约束类型；rhs为惰性约束的右端项，可选参量，默认为None，可取值为常数、Var类对象或LinExpr类对象；name为惰性约束的名称，可选参量，默认为\"\"，由求解器内部自动生成",
        "code": "model.addLazyConstr(x+y <= 1)\nmodel.addLazyConstr(x+y == [0,1])"
    },
    {
        "rowid": 20325,
        "name": "Model.addLazyConstrs()",
        "description": "摘要：addLazyConstrs(generator, nameprefix=\"L\")。描述：向模型中批量添加多个惰性约束。参量：generator为一组惰性约束生成器，可取值为一组线性约束构建器ConstrBuilderArray类对象或多维线性约束生成器MConstrBuilder类对象；nameprefix为惰性约束的名称前缀，可选参量，默认为\"L\"，其实际名称结合惰性约束的下标自动生成",
        "code": "model.addLazyConstrs(x[i]+y[i] <= 1 for i in range(10))"
    },
    {
        "rowid": 20326,
        "name": "Model.addGenConstrMin()",
        "description": "摘要：addGenConstrMin(resvar, vars, constant=None, name=\"\")。描述：添加一条形如y=min{x_{1}, x_{2}, ..., x_{n}, c}的约束到模型中。参量：resvar为等式左端项y，可取值为Var或MVar类对象；vars为等式右端min{}函数的变量，可取值为list类对象；constant为等式右端min{}函数中的常数项，可选参数，可取值为浮点数，默认值为None；name为约束名称，可选参数，默认值为\"\"。返回值：返回一个GenConstrX类对象。",
        "code": ""
    },
    {
        "rowid": 20327,
        "name": "Model.addGenConstrMax()",
        "description": "摘要：addGenConstrMax(resvar, vars, constant=None, name=\"\")。描述：添加一条形如(y=max {x_{1}, x_{2}, cdots, x_{n}, c})的约束到模型中。参量：resvar为等式左端项y，可取值为Var或MVar类对象；vars为等式右端max{}函数的变量，可取值为list类对象；constant为等式右端max{}函数中的常数项，可选参量，可取值为浮点数，默认值为None；name为约束名称，可选参量，默认值为\"\"。返回值：返回一个GenConstrX类对象",
        "code": ""
    },
    {
        "rowid": 20328,
        "name": "Model.addGenConstrAbs()",
        "description": "摘要：addGenConstrAbs(resvar, argvar, name=\"\")。描述：添加一条形如(c y+d=|a x+b|)的约束到模型中。参量：resvar为cy + d，可取值为Var类、MVar类、LinExpr类或MLinExpr对象；argvar为ax + b，可取值为Var类、MVar类、LinExpr类或MLinExpr对象；name为约束名称，可选参数，默认值为\"\"。返回值：返回一个GenConstrX类对象",
        "code": ""
    },
    {
        "rowid": 20329,
        "name": "Model.addGenConstrAnd()",
        "description": "摘要：addGenConstrAnd(resvar, vars, name=\"\")。描述：添加一条逻辑and约束，(y=x_{1}) and (x_{2} cdots) and (x_{n})至模型中。参量：resvar为等式左端项y，可取值为二进制型Var类对象或MVar类对象；vars为逻辑运算符and连接的元素xi, for (i in{1,2, cdots, n})，可取值为List类(其中元素为二进制型Var类对象或MVar类对象)；name为约束名称，可选参数，默认值为\"\"。返回值：返回一个GenConstrX类对象",
        "code": ""
    },
    {
        "rowid": 20330,
        "name": "Model.addGenConstrOr()",
        "description": "摘要：addGenConstrOr(resvar, vars, name=\"\")。描述：添加一条逻辑or约束至模型中。参量：resvar为等式左端项y，可取值为二进制型Var类对象或MVar类对象；vars为逻辑运算符or连接的元素，可取值为List类(其中元素为二进制型Var类对象或MVar类对象)；name为约束名称，可选参数，默认值为\"\"。返回值：返回一个GenConstrX类对象",
        "code": ""
    },
    {
        "rowid": 20331,
        "name": "Model.addGenConstrPWL()",
        "description": "摘要：addGenConstrPWL(xvar, yvar, xpts, ypts, name=\"\")。描述：添加一条分段线性函数相关约束到模型中。参量：xvar为x，可取值为Var类对象或MVar类对象；yvar为等式左端项y，可取值为Var/MVar类或LinExpr/MLinExpr类对象；xpts为分段点的横坐标，需按照取值从小到大的顺序排列，可取值为List类；ypts为分段点的纵坐标，可取值为List类；name为约束名称，可选参数，默认值为\"\"。返回值：返回一个GenConstrX类对象",
        "code": ""
    },
    {
        "rowid": 20332,
        "name": "Model.addSparseMat()",
        "description": "摘要：addSparseMat(dim, rows, cols=None, vals=None)。描述：添加稀疏矩阵表示的对称矩阵。参量：dim为对称矩阵的维度；rows为对称矩阵非零元素的行索引；cols为对称矩阵非零元素的列索引；vals为对称矩阵非零元素值",
        "code": "# 添加维度为3的对称矩阵\nm.addSparseMat(3, [0, 1, 2], [0, 1, 2], [2.0, 5.0, 8.0])\n# 添加维度为2的对称矩阵\nm.addSparseMat(2, [(0, 0, 3.0), (1, 0, 1.0)])"
    },
    {
        "rowid": 20333,
        "name": "Model.addDenseMat()",
        "description": "摘要：addDenseMat(dim, vals)。描述：添加致密矩阵表示的对称矩阵。参量：dim为对称矩阵的维度；vals为对称矩阵非零元素值，可取值为常数、列表",
        "code": "# 添加维度为3的全1对称矩阵\nm.addDenseMat(3, 1.0)"
    },
    {
        "rowid": 20334,
        "name": "Model.addDiagMat()",
        "description": "摘要：addDiagMat(dim, vals, offset=None)。描述：添加对角对称矩阵。参量：dim为对称矩阵的维度；vals为对称矩阵非零元素值，可取值为常数、列表；offset为对角元素位置偏移量，若为正值，则对角线向上偏移；若为负值，则对角线向下偏移",
        "code": "添加维度为3的单位矩阵\nm.addDiagMat(3, 1.0)"
    },
    {
        "rowid": 20335,
        "name": "Model.addOnesMat()",
        "description": "摘要：addOnesMat(dim)。描述：添加全1矩阵。参量：dim为全1矩阵的维度",
        "code": "添加维度为3的全1矩阵\nm.addOnesMat(3)"
    },
    {
        "rowid": 20336,
        "name": "Model.addEyeMat()",
        "description": "摘要：addEyeMat(dim)。描述：添加单位矩阵。参量：dim为单位矩阵的维度",
        "code": "# 添加维度为3的单位矩阵\naddEyeMat(3)"
    },
    {
        "rowid": 20337,
        "name": "Model.setObjective()",
        "description": "摘要：setObjective(expr, sense=None)。描述：设置模型的目标函数。参量：expr为目标函数的表达式，可取值为常数、Var类对象、LinExpr类对象、QuadExpr类对象、MLinExpr类对象、MQuadExpr类对象，注意如果expr是LinExpr类对象，则更新目标函数中的线性项；如果是QuadExpr类对象，则更新目标函数中的二次项和线性项；sense为目标函数的优化方向，可选参量，默认为None，表示不改动模型的优化方向，模型的当前优化方向通过属性ObjSense查看，可取值详见优化方向",
        "code": "# 设置目标函数为x + y,优化方向为最大化\nsetObjective(x + y, COPT.MAXIMIZE)"
    },
    {
        "rowid": 20338,
        "name": "Model.setMObjective()",
        "description": "摘要：setMObjective(Q, c, constant, xQ_L=None, xQ_R=None, xc=None, sense=None)。描述：通过矩阵建模的方式，设置模型的二次目标。可添加形如 [TMP_60][TMP_60]...+constant 的目标函数。更方便的是通过矩阵乘法生成MQuadExpr类对象，可以作为setObjective()的输入设置目标函数。参量：Q：若二次项非空，需提供二维的NumPy矩阵，或SciPy列压缩矩阵(csc_matrix)、行压缩矩阵(csr_matrix)；c：若一次项非空，需提供一维的NumPy数组或Python列表；constant：常数项，通常是浮点数；xQ_L：二次项左侧的变量，可为MVar、VarArray、列表、字典或tupledict类对象，为空则取模型中所有变量；xQ_R：二次项右侧的变量，类型同xQ_L，为空则取模型中所有变量；xc：线性项对应的变量，类型同xQ_L，为空但c非空则取模型中所有变量；sense：目标函数的优化方向，可选，默认不改动，可通过ObjSense查看当前方向，取值详见优化方向。",
        "code": "Q = np.full((3, 3), 1)\nmx = model.addMVar(3, nameprefix=\"mx\")\nmy = model.addVars(3, nameprefix=\"my\")\nmqc = model.setMObjective(Q, None, 0.0, mx, my, None, sense=COPT.MINIMIZE)"
    },
    {
        "rowid": 20339,
        "name": "Model.setObjSense()",
        "description": "摘要：setObjSense(sense)。描述：设置目标函数的优化方向。参量：sense：目标函数的优化方向，可取值详见优化方向。",
        "code": "# 设置优化方向为最大化\nm.setObjSense(COPT.MAXIMIZE)"
    },
    {
        "rowid": 20340,
        "name": "Model.setObjConst()",
        "description": "摘要：setObjConst(const)。描述：设置目标函数的常数偏移量。参量：const：目标函数常数偏移量。",
        "code": "设置目标函数常数偏移为1.0\nsetObjConst(1.0)"
    },
    {
        "rowid": 20341,
        "name": "Model.getObjective()",
        "description": "摘要：getObjective()。描述：获取模型的目标函数，返回一个LinExpr类对象。",
        "code": "# 获取模型的目标函数表达式\nobj = m.getObjective()"
    },
    {
        "rowid": 20342,
        "name": "Model.delQuadObj()",
        "description": "摘要：delQuadObj()。描述：删除二次目标函数中的二次项。",
        "code": "删除目标函数中的二次项\n.delQuadObj()"
    },
    {
        "rowid": 20343,
        "name": "Model.delPsdObj()",
        "description": "摘要：delPsdObj()。描述：删除目标函数中的半定项。",
        "code": "删除目标函数中的半定项\n.delPsdObj()"
    },
    {
        "rowid": 20344,
        "name": "Model.getCol()",
        "description": "摘要：getCol(var)。描述：获取指定变量对应的列，返回一个Column类对象。",
        "code": "获取变量x相应的列\ncol = m.getCol(x)"
    },
    {
        "rowid": 20345,
        "name": "Model.getRow()",
        "description": "摘要：getRow(constr)。描述：获取指定线性约束对应的行，返回一个LinExpr类对象。",
        "code": "# 获取线性约束conx相应的行\nlinexpr = m.getRow(conx)"
    },
    {
        "rowid": 20346,
        "name": "Model.getQuadRow()",
        "description": "摘要：getQuadRow(qconstr)。描述：获取指定二次约束对应的行，返回一个QuadExpr类对象。",
        "code": "# 获取二次约束qconx相应的行\nquadexpr = m.getQuadRow(qconx)"
    },
    {
        "rowid": 20347,
        "name": "Model.getPsdRow()",
        "description": "摘要：getPsdRow(constr)。描述：获取指定半定约束对应的行，返回一个PsdExpr类对象。",
        "code": "获取半定约束psdcon相应的行\npsdexpr = m.getPsdRow(psdcon)"
    },
    {
        "rowid": 20348,
        "name": "Model.getVar()",
        "description": "摘要：getVar(idx)。描述：根据变量在模型中的下标获取相应的变量，返回一个Var类对象。参量：变量在系数矩阵中的下标，起始为0。",
        "code": "获取下标为1的变量\nx = m.getVar(1)"
    },
    {
        "rowid": 20349,
        "name": "Model.getVarByName()",
        "description": "摘要：getVarByName(name)。描述：根据变量的名称获取相应的变量，返回一个Var类对象。参量：变量的名称。",
        "code": "获取名称为\"x\"的变量\nm.getVarByName(\"x\")"
    },
    {
        "rowid": 20350,
        "name": "Model.getVars()",
        "description": "摘要：getVars()。描述：获取模型中的全部变量，返回一个VarArray类对象。",
        "code": "获取模型中的全部变量\nvars = m.getVars()"
    },
    {
        "rowid": 20351,
        "name": "Model.getConstr()",
        "description": "摘要：getConstr()。描述：根据线性约束在模型中的下标获取相应的线性约束，返回一个Constraint类对象。参量：线性约束在系数矩阵中的下标，起始为0。",
        "code": "获取下标为1的线性约束\nm.getConstr(1)"
    },
    {
        "rowid": 20352,
        "name": "Model.getConstrByName()",
        "description": "摘要：getConstrByName(name)。描述：根据线性约束的名称获取相应的线性约束，返回一个Constraint类对象。参量：name：线性约束的名称。",
        "code": "获取名称为\"r\"的线性约束\nm.getConstrByName(\"r\")"
    },
    {
        "rowid": 20353,
        "name": "Model.getConstrs()",
        "description": "摘要：getConstrs()。描述：获取模型中的全部线性约束，返回一个ConstrArray类对象。",
        "code": "获取模型中的全部线性约束\ncons = m.getConstrs()"
    },
    {
        "rowid": 20354,
        "name": "Model.getConstrBuilders()",
        "description": "摘要：getConstrBuilders(constrs=None)。描述：获取当前模型中的线性约束相应的构建器。若参数constrs为None，则返回全部线性约束相应构建器组成的一个ConstrBuilderArray类对象；若参数constrs为Constraint类对象，则返回指定约束相应的ConstrBuilder类对象；若参数constrs为列表或ConstrArray类对象，则返回指定约束相应构建器组成的一个ConstrBuilderArray类对象；若参数constrs为字典或tupledict类对象，则返回键为指定约束的下标，值为指定约束相应的构建器组成的一个tupledict类对象。参量：constrs：指定的线性约束，可选参量，默认为None。",
        "code": "# 获取所有的线性约束构建器\nconbuilders = m.getConstrBuilders()\n# 获取线性约束x相应的构建器\nconbuilders = m.getConstrBuilders(x)\n# 获取线性约束x和y相应的构建器\nconbuilders = m.getConstrBuilders([x, y])\n获取tupledict对象xx中的线性约束相应的构建器\nconbuilders = m.getConstrBuilders(xx)"
    },
    {
        "rowid": 20355,
        "name": "Model.getSOS()",
        "description": "摘要：getSOS(sos)。描述：根据指定的SOS约束获取相应的SOS约束构建器，返回一个SOSBuilder类对象。参量：sos：指定的SOS约束。",
        "code": "# 获取SOS约束sosx相应的构建器\nsosbuilder = m.getSOS(sosx)"
    },
    {
        "rowid": 20356,
        "name": "Model.getSOSs()",
        "description": "摘要：getSOSs()。描述：获取模型中的全部SOS约束，返回一个SOSArray类对象。",
        "code": "# 获取模型中的全部SOS约束\nsoss = m.getSOSs()"
    },
    {
        "rowid": 20357,
        "name": "Model.getSOSBuilders()",
        "description": "摘要：getSOSBuilders(soss=None)。描述：获取指定SOS约束相应的SOS约束构建器。若参数soss为None，则返回全部SOS约束相应构建器组成的一个SOSBuilderArray类对象；若参数soss为SOS类对象，则返回指定SOS约束相应的SOSBuilder类对象；若参数soss为列表或SOSArray类对象，则返回指定SOS约束相应构建器组成的一个SOSBuilderArray类对象。参量：soss：指定的SOS约束，可选参量，默认为None。",
        "code": "# 获取模型中所有SOS约束相应的构建器\nsoss = m.getSOSBuilders()"
    },
    {
        "rowid": 20358,
        "name": "Model.getGenConstrIndicator()",
        "description": "摘要：getGenConstrIndicator(genconstr)。描述：获取指定Indicator约束相应的Indicator约束构建器，返回一个GenConstrBuilder类对象。参量：genconstr：指定的Indicator约束。",
        "code": "# 获取Indicator约束genx相应的构建器\nindic = m.getGenConstrIndicator(genx)"
    },
    {
        "rowid": 20359,
        "name": "Model.getGenConstr()",
        "description": "摘要：getGenConstr(idx)。描述：获取模型中指定下标的Indicator约束，返回一个GenConstr类对象。参量：idx：Indicator约束在模型中的下标，起始为0。",
        "code": "# 获取模型中下标为0的Indicator约束\ngenx = m.getGenConstr(0)"
    },
    {
        "rowid": 20360,
        "name": "Model.getGenConstrByName()",
        "description": "摘要：getGenConstrByName(name)。描述：获取指定名称的Indicator约束，返回一个GenConstr类对象。参量：name：Indicator约束的名称。",
        "code": "# 获取名称为\"r\"的Indicator约束\nm.getGenConstrByName(\"r\")"
    },
    {
        "rowid": 20361,
        "name": "Model.getGenConstrs()",
        "description": "摘要：getGenConstrs()。描述：获取模型中的全部Indicator约束，返回一个GenConstrArray类对象。",
        "code": "cons = m.getGenConstrs()"
    },
    {
        "rowid": 20362,
        "name": "Model.getGenConstrIndicators()",
        "description": "摘要：getGenConstrIndicators(genconstrs=None)。描述：获取模型中指定Indicator约束的约束构建器，默认获取全部的Indicator约束。返回GenConstrBuilder类对象或GenConstrBuilderArray类对象。参量：genconstrs，指定的Indicator约束，可选参量，默认为None。",
        "code": "cons = m.getGenConstrIndicators()"
    },
    {
        "rowid": 20363,
        "name": "Model.getCone()",
        "description": "摘要：getCone(idx)。描述：获取模型中指定序号的二阶锥约束，返回一个Cone类对象。参量：idx，指定的序号，起始下标从0开始。",
        "code": "cones = m.getCone(1)"
    },
    {
        "rowid": 20364,
        "name": "Model.getExpCone()",
        "description": "摘要：getExpCone(idx)。描述：获取模型中指定序号的指数锥约束，返回一个ExpCone类对象。参量：idx，指定的序号，起始下标从0开始。",
        "code": "cones = m.getExpCone(1)"
    },
    {
        "rowid": 20365,
        "name": "Model.getAffineCone()",
        "description": "摘要：getAffineCone(idx)。描述：获取模型中指定序号的仿射锥约束，返回一个AffineCone类对象。参量：idx，指定的序号，起始下标从0开始。",
        "code": "cones = m.getAffineCone(1)"
    },
    {
        "rowid": 20366,
        "name": "Model.getAffineConeByName()",
        "description": "摘要：getAffineConeByName(name)。描述：获取模型中指定名称的仿射锥约束，返回一个AffineCone类对象。参量：name，指定的名称。",
        "code": "cones = m.getAffineConeByName(\"afcone\")"
    },
    {
        "rowid": 20367,
        "name": "Model.getCones()",
        "description": "摘要：getCones()。描述：获取模型中的全部二阶锥约束，返回一个ConeArray类对象。",
        "code": "cones = m.getCones()"
    },
    {
        "rowid": 20368,
        "name": "Model.getExpCones()",
        "description": "摘要：getExpCones()。描述：获取模型中的全部指数锥约束，返回一个ExpConeArray类对象。",
        "code": "cones = m.getExpCones()"
    },
    {
        "rowid": 20369,
        "name": "Model.getAffineCones()",
        "description": "摘要：getAffineCones()。描述：获取模型中的全部仿射锥约束，返回一个AffineConeArray类对象。",
        "code": "cones = m.getAffineCones()"
    },
    {
        "rowid": 20370,
        "name": "Model.getConeBuilders()",
        "description": "摘要：getConeBuilders(cones=None)。描述：获取指定二阶锥约束相应的二阶锥约束构建器。若参数cones为None，则返回全部二阶锥约束相应构建器组成的一个ConeBuilderArray类对象；若参数cones为Cone类对象，则返回指定二阶锥约束相应的ConeBuilder类对象；若参数cones为列表或ConeArray类对象，则返回指定二阶锥约束相应构建器组成的一个ConeBuilderArray类对象。参量：cones，指定的二阶锥约束，可选参量，默认为None。",
        "code": "cones = m.getConeBuilders()"
    },
    {
        "rowid": 20371,
        "name": "Model.getExpConeBuilders()",
        "description": "摘要：getExpConeBuilders(cones=None)。描述：获取指定指数锥约束相应的指数锥约束构建器。若参数cones为None，则返回全部指数锥约束相应构建器组成的一个ExpConeBuilderArray类对象；若参数cones为ExpCone类对象，则返回指定指数锥约束相应的ExpConeBuilder类对象；若参数cones为列表或ExpConeArray类对象，则返回指定指数锥约束相应构建器组成的一个ExpConeBuilderArray类对象。参量：cones，指定的指数锥约束，可选参量，默认为None。",
        "code": "cones = m.getExpConeBuilders()"
    },
    {
        "rowid": 20372,
        "name": "Model.getAffineConeBuilders()",
        "description": "摘要：getAffineConeBuilder(cones=None)。描述：获取指定仿射锥约束相应的仿射锥约束构建器。若参数cones为None，则返回全部仿射锥约束相应构建器组成的一个AffineConeBuilderArray类对象；若参数cones为AffineCone类对象，则返回指定仿射锥约束相应的AffineConeBuilder类对象；若参数cones为列表或AffineConeArray类对象，则返回指定仿射锥约束相应构建器组成的一个AffineConeBuilderArray类对象。参量：cones，指定的仿射锥约束，可选参量，默认为None。",
        "code": "cones = m.getAffineConeBuilders()"
    },
    {
        "rowid": 20373,
        "name": "Model.getQConstr()",
        "description": "摘要：getQConstr(idx)。描述：根据二次约束在模型中的下标获取相应的二次约束，返回一个QConstraint类对象。参量：idx，二次约束在模型中的下标，起始为0。",
        "code": "qr = m.getQConstr(1)"
    },
    {
        "rowid": 20374,
        "name": "Model.getQConstrByName()",
        "description": "摘要：getQConstrByName(name)。描述：根据二次约束的名称获取相应的二次约束，返回一个QConstraint类对象。参量：name，二次约束的名称。",
        "code": "qr = m.getQConstrByName(\"qr\")"
    },
    {
        "rowid": 20375,
        "name": "Model.getQConstrs()",
        "description": "摘要：getQConstrs()。描述：获取模型中的全部二次约束，返回一个QConstrArray类对象。",
        "code": "qcons = m.getQConstrs()"
    },
    {
        "rowid": 20376,
        "name": "Model.getQConstrBuilders()",
        "description": "摘要：getQConstrBuilders(qconstrs=None)。描述：获取当前模型中的二次约束相应的构建器。若参数qconstrs为None，则返回全部二次约束相应构建器组成的一个QConstrBuilderArray类对象；若参数qconstrs为QConstraint类对象，则返回指定约束相应的QConstrBuilder类对象；若参数qconstrs为列表或QConstrArray类对象，则返回指定约束相应构建器组成的一个QConstrBuilderArray类对象；若参数qconstrs为字典或tupledict类对象，则返回键为指定约束的下标，值为指定约束相应的构建器组成的一个tupledict类对象。参量：qconstrs，指定的二次约束，可选参量，默认为None。",
        "code": "qconbuilders = m.getQConstrBuilders()\nqconbuilders = m.getQConstrBuilders(qx)\nqconbuilders = m.getQConstrBuilders([qx, qy])\nqconbuilders = m.getQConstrBuilders(qxx)"
    },
    {
        "rowid": 20377,
        "name": "Model.getPsdVar()",
        "description": "摘要：getPsdVar(idx)。描述：根据半定变量在模型中的下标获取相应的半定变量，返回一个PsdVar类对象。参量：idx，半定变量在模型中的下标，起始为0。",
        "code": "x = m.getPsdVar(1)"
    },
    {
        "rowid": 20378,
        "name": "Model.getPsdVarByName()",
        "description": "摘要：getPsdVarByName(name)。描述：根据半定变量的名称获取相应的半定变量，返回一个PsdVar类对象。参量：name，半定变量的名称。",
        "code": "x = m.getPsdVarByName(\"x\")"
    },
    {
        "rowid": 20379,
        "name": "Model.getPsdVars()",
        "description": "摘要：getPsdVars()。描述：获取模型中的全部半定变量，返回一个PsdVarArray类对象。",
        "code": "vars = m.getPsdVars()"
    },
    {
        "rowid": 20380,
        "name": "Model.getPsdConstr()",
        "description": "摘要：getPsdConstr(idx)。描述：根据半定约束在模型中的下标获取相应的半定约束，返回一个PsdConstraint类对象。参量：idx，半定约束在模型中的下标，起始为0。",
        "code": "m.getPsdConstr(1)"
    },
    {
        "rowid": 20381,
        "name": "Model.getPsdConstrByName()",
        "description": "摘要：getPsdConstrByName(name)。描述：根据半定约束的名称获取相应的半定约束，返回一个PsdConstraint类对象。参量：name，半定约束的名称。",
        "code": "r = m.getPsdConstrByName(\"r\")"
    },
    {
        "rowid": 20382,
        "name": "Model.getPsdConstrs()",
        "description": "摘要：getPsdConstrs()。描述：获取模型中的全部半定约束，返回一个PsdConstrArray类对象。",
        "code": "cons = m.getPsdConstrs()"
    },
    {
        "rowid": 20383,
        "name": "Model.getPsdConstrBuilders()",
        "description": "摘要：getPsdConstrBuilders(constrs=None)。描述：获取当前模型中的半定约束相应的构建器。若参数constrs为None，则返回全部半定约束相应构建器组成的一个PsdConstrBuilderArray类对象；若参数constrs为PsdConstraint类对象，则返回指定半定约束相应的PsdConstrBuilder类对象；若参数constrs为列表或PsdConstrArray类对象，则返回指定半定约束相应构建器组成的一个PsdConstrBuilderArray类对象；若参数constrs为字典或tupledict类对象，则返回键为指定半定约束的下标，值为指定半定约束相应的构建器组成的一个tupledict类对象。参量：constrs，指定的半定约束，可选参量，默认为None。",
        "code": "conbuilders = m.getPsdConstrBuilders()\nconbuilders = m.getPsdConstrBuilders(x)\nconbuilders = m.getPsdConstrBuilders([x, y])\nconbuilders = m.getPsdConstrBuilders(xx)"
    },
    {
        "rowid": 20384,
        "name": "Model.getLmiRow()",
        "description": "摘要：getLmiRow(constr)。描述：获取参与指定LMI约束的LMI表达式，包括变量和对应的系数矩阵。参量：constr，指定的约束。",
        "code": "expr = m.getLmiRow(c)"
    },
    {
        "rowid": 20385,
        "name": "Model.getLmiConstr()",
        "description": "摘要：getLmiConstr(idx)。描述：获取模型中指定索引对应的LMI约束。参量：idx，LMI约束在模型中的下标，起始为0。",
        "code": "coeff = m.getLmiConstr(1)"
    },
    {
        "rowid": 20386,
        "name": "Model.getLmiConstrByName()",
        "description": "摘要：getLmiConstrByName(name)。描述：获取模型中指定名称的LMI约束。参量：指定的LMI约束名称。",
        "code": "# 获取模型中名称为r1的LMI约束\nname = m.getLmiConstrByName(\"r1\")"
    },
    {
        "rowid": 20387,
        "name": "Model.getLmiConstrs()",
        "description": "摘要：getLmiConstrs()。描述：获取模型中所有的LMI约束。返回LMI约束构成的LmiConstrArray类对象。",
        "code": ""
    },
    {
        "rowid": 20388,
        "name": "Model.getLmiRhs()",
        "description": "摘要：getLmiRhs(constr)。描述：获取指定LMI约束的常数项。返回SymMatrix类对象。参量：constr（指定的LMI约束）。",
        "code": ""
    },
    {
        "rowid": 20389,
        "name": "Model.setLmiRhs()",
        "description": "摘要：setLmiRhs(constr, mat)。描述：设置指定LMI约束的常数项。参量：constr（指定的LMI约束）；mat（新的常数项矩阵）。",
        "code": "# 设置LMI约束con的常数项对称矩阵为D\n.setLmiRhs(con, D)"
    },
    {
        "rowid": 20390,
        "name": "Model.getLmiSolution()",
        "description": "摘要：getLmiSolution()。描述：获取LMI约束的取值和对偶值。",
        "code": ""
    },
    {
        "rowid": 20391,
        "name": "Model.getLmiSlacks()",
        "description": "摘要：getLmiSlacks()。描述：获取LMI约束全部松弛变量的取值，返回一个列表对象。",
        "code": ""
    },
    {
        "rowid": 20392,
        "name": "Model.getLmiDuals()",
        "description": "摘要：getLmiDuals()。描述：获取LMI约束全部对偶变量的取值，返回一个列表对象。",
        "code": ""
    },
    {
        "rowid": 20393,
        "name": "Model.getCoeff()",
        "description": "摘要：getCoeff(constr, var)。描述：获取变量在线性约束、半定约束或LMI约束中的系数。参量：constr（指定的线性约束、半定约束或LMI约束）；var（指定的变量或半定变量）。",
        "code": "# 获取变量x在约束c1中的系数\ncoeff1 = m.getCoeff(c1, x)\n# 获取半定变量X在约束c2中的系数\ncoeff2 = m.getCoeff(c2, X)"
    },
    {
        "rowid": 20394,
        "name": "Model.setCoeff()",
        "description": "摘要：setCoeff(constr, var, newval)。描述：设置变量在线性约束、半定约束或LMI约束中的系数。参量：constr（指定的线性约束、半定约束或LMI约束）；var（指定的变量或半定变量）；newval（待设置的新系数或系数对称矩阵）。",
        "code": "# 设置变量x在约束c中的系数为1.0\nsetCoeff(c, x, 1.0)"
    },
    {
        "rowid": 20395,
        "name": "Model.setCoeffs()",
        "description": "摘要：setCoeffs(constrs, vars, vals)。描述：批量设置变量在线性约束中的系数。注意变量和约束组合不能重复出现，即不能对约束constr中的变量var重复设置相同或不同的系数。参量：constrs（指定和待设置系数相关的约束，可取值为字典、tupledict类对象、ConstrArray类对象或一组Constraint类对象）；vars（指定和待设置系数相关的变量，可取值为字典、tupledict类对象、VarArray类对象或一组Var类对象）；vals（待设置的新系数值，可取值为常数，或者是与constrs相匹配的列表或字典）。",
        "code": ""
    },
    {
        "rowid": 20396,
        "name": "Model.getA()",
        "description": "摘要：getA()。描述：获取模型的系数矩阵，返回一个scipy.sparse.csc_matrix对象。该方法依赖scipy工具包。",
        "code": "# 获取模型的系数矩阵\nA = model.getA()"
    },
    {
        "rowid": 20397,
        "name": "Model.loadMatrix()",
        "description": "摘要：loadMatrix(c, A, lhs, rhs, lb, ub, vtype=None)。描述：加载矩阵和向量信息构建模型。该方法依赖scipy工具包。参量：c（目标函数系数，若为None，则表示目标函数系数全为0）；A（系数矩阵，类型要求为scipy.sparse.csc_matrix）；lhs（约束的下边界）；rhs（约束的上边界）；lb（变量的下边界，若为None，则表示下边界全为0）；ub（变量的上边界，若为None，则表示上边界全为COPT.INFINITY）；vtype（变量类型，默认为None，表示全部为连续变量）。",
        "code": "# 矩阵数据构建模型\n.loadMatrix(c, A, lhs, rhs, lb, ub)"
    },
    {
        "rowid": 20398,
        "name": "Model.loadCone()",
        "description": "摘要：loadCone(ncone, types, dims, indices)。描述：加载二阶锥到模型中。参量：ncone（二阶锥的个数）；types（二阶锥的类型，可取值请参考二阶锥约束类型）；dims（二阶锥的维度）；indices（构成二阶锥的变量的下标数组）。",
        "code": ""
    },
    {
        "rowid": 20399,
        "name": "Model.loadExpCone()",
        "description": "摘要：loadExpCone(ncone, types, indices)。描述：加载指数锥到模型中。参量：ncone（指数锥的个数）；types（指数锥的类型，可取值请参考指数锥约束类型）；indices（构成指数锥的变量的下标数组）。",
        "code": ""
    },
    {
        "rowid": 20400,
        "name": "Model.getLpSolution()",
        "description": "摘要：getLpSolution()。描述：获取线性规划模型的变量取值、松弛变量取值、对偶变量取值和变量的Reduced cost，返回一个四元元组对象，元组中每个元素为一个列表对象。",
        "code": "获取线性规划模型的解\nvalues, slacks, duals, redcosts = m.getLpSolution()"
    },
    {
        "rowid": 20401,
        "name": "Model.setLpSolution()",
        "description": "摘要：setLpSolution(values, slack, duals, redcost)。描述：设置线性规划模型的变量取值、松弛变量取值、对偶变量取值和变量的Reduced cost。参量：values（变量取值）；slack（松弛变量取值）；duals（对偶变量取值）；redcost（变量的Reduced cost）。",
        "code": "# 设置线性规划模型的解\nm.setLpSolution(values, slack, duals, redcost)"
    },
    {
        "rowid": 20402,
        "name": "Model.getValues()",
        "description": "摘要：getValues()。描述：获取线性或整数规划模型的全部变量取值，返回一个列表对象。",
        "code": "# 获取模型中所有变量的取值\nvalues = m.getValues()"
    },
    {
        "rowid": 20403,
        "name": "Model.getRedcosts()",
        "description": "摘要：getRedcosts()。描述：获取线性规划模型全部变量的Reduced cost，返回一个列表对象。",
        "code": "# 获取模型中所有变量的Reduced cost\nredcosts = m.getRedcosts()"
    },
    {
        "rowid": 20404,
        "name": "Model.getSlacks()",
        "description": "摘要：getSlacks()。描述：获取线性规划全部松弛变量的取值，返回一个列表对象。",
        "code": "获取模型中所有松弛变量的取值\nslacks = m.getSlacks()"
    },
    {
        "rowid": 20405,
        "name": "Model.getDuals()",
        "description": "摘要：getDuals()。描述：获取线性规划全部对偶变量的取值，返回一个列表对象。",
        "code": "获取模型中所有对偶变量的取值\nduals = m.getDuals()"
    },
    {
        "rowid": 20406,
        "name": "Model.getVarBasis()",
        "description": "摘要：getVarBasis(vars=None)。描述：获取指定变量的基状态。若参数vars为None，则返回全部变量的基状态组成的一个列表对象；若参数vars为Var类对象，则返回指定变量的基状态；若参数vars为列表或VarArray类对象，则返回指定变量的基状态组成的一个列表对象；若参数vars为字典或tupledict类对象，则返回键为指定变量的下标，值为指定变量的基状态组成的一个tupledict类对象。参量：vars，指定的变量，可选参量，默认为None。",
        "code": "# 获取模型中全部变量的基状态\nvarbasis = m.getVarBasis()\n# 获取变量x和y的基状态\nvarbasis = m.getVarBasis([x, y])\n# 获取tupledict对象xx中的变量相应的基状态\nvarbasis = m.getVarBasis(xx)"
    },
    {
        "rowid": 20407,
        "name": "Model.getConstrBasis()",
        "description": "摘要：getConstrBasis(constrs=None)。描述：获取线性规划中线性约束的基状态。若参数constrs为None，则返回全部线性约束的基状态组成的一个列表对象；若参数constrs为Constraint类对象，则返回指定线性约束的基状态；若参数constrs为列表或ConstrArray类对象，则返回指定线性约束的基状态组成的一个列表对象；若参数constrs为字典或tupledict类对象，则返回键为指定线性约束的下标，值为指定约束的基状态组成的一个tupledict类对象。参量：constrs，指定的线性约束，可选参量，默认为None。",
        "code": "# 获取模型中全部线性约束的基状态\nconbasis = m.getConstrBasis()\n# 获取模型中线性约束r0和r1相应的基状态\nconbasis = m.getConstrBasis([r0, r1])\n# 获取tupledict对象rr中的线性约束相应的基状态\nconbasis = m.getConstrBasis(rr)"
    },
    {
        "rowid": 20408,
        "name": "Model.getPoolObjVal()",
        "description": "摘要：getPoolObjVal(isol)。描述：获取解池中第isol个解的目标函数值，返回一个常数。参量：isol，解池中解的索引。",
        "code": "# 获取第2个解的目标函数值\nobjval = m.getPoolObjVal(2)"
    },
    {
        "rowid": 20409,
        "name": "Model.getPoolSolution()",
        "description": "摘要：getPoolSolution(isol, vars)。描述：获取解池中第isol个解中指定变量的取值。若参数vars为Var类对象，则返回指定变量的取值；若参数vars为列表或VarArray类对象，则返回指定变量的取值组成的一个列表对象；若参数vars为字典或tupledict类对象，则返回键为指定变量的下标，值为指定变量的取值组成的一个tupledict类对象。参量：isol，解池中解的索引；vars，指定的变量。",
        "code": "# 获取第2个解中变量x的值\nxval = m.getPoolSolution(2, x)"
    },
    {
        "rowid": 20410,
        "name": "Model.getVarLowerIIS()",
        "description": "摘要：getVarLowerIIS(vars)。描述：获取指定变量下边界的IIS状态。若参数vars为Var类对象，则返回指定变量下边界的IIS状态；若参数vars为列表或VarArray类对象，则返回指定变量下边界的IIS状态组成的一个列表对象；若参数vars为字典或tupledict类对象，则返回键为指定变量的下标，值为指定变量下边界的IIS状态组成的一个tupledict类对象。参量：vars，指定的变量。",
        "code": "# 获取变量x和y的下边界的IIS状态\nlowerIIS = m.getVarLowerIIS([x, y])\n# 获取tupledict对象xx中的变量下边界相应的IIS状态\nlowerIIS = m.getVarLowerIIS(xx)"
    },
    {
        "rowid": 20411,
        "name": "Model.getVarUpperIIS()",
        "description": "摘要：getVarUpperIIS(vars)。描述：获取指定变量上边界的IIS状态。若参数vars为Var类对象，则返回指定变量上边界的IIS状态；若参数vars为列表或VarArray类对象，则返回指定变量上边界的IIS状态组成的一个列表对象；若参数vars为字典或tupledict类对象，则返回键为指定变量的下标，值为指定变量上边界的IIS状态组成的一个tupledict类对象。参量：vars，指定的变量。",
        "code": "# 获取变量x和y的上边界的IIS状态\nupperIIS = m.getVarUpperIIS([x, y])\n# 获取tupledict对象xx中的变量上边界相应的IIS状态\nupperIIS = m.getVarUpperIIS(xx)"
    },
    {
        "rowid": 20412,
        "name": "Model.getConstrLowerIIS()",
        "description": "摘要：getConstrLowerIIS(constrs)。描述：获取指定约束下边界的IIS状态。若参数constrs为Constraint类对象，则返回指定约束下边界的IIS状态；若参数constrs为列表或ConstrArray类对象，则返回指定约束下边界的IIS状态组成的一个列表对象；若参数constrs为字典或tupledict类对象，则返回键为指定约束的下标，值为指定约束下边界的IIS状态组成的一个tupledict类对象。参量：constrs，指定的约束。",
        "code": "# 获取模型中约束r0和r1相应下边界的IIS状态\nlowerIIS = m.getConstrLowerIIS([r0, r1])\n# 获取tupledict对象rr中的约束下边界相应的IIS状态\nlowerIIS = m.getConstrLowerIIS(rr)"
    },
    {
        "rowid": 20413,
        "name": "Model.getConstrUpperIIS()",
        "description": "摘要：getConstrUpperIIS(constrs)。描述：获取指定约束上边界的IIS状态。若参数constrs为Constraint类对象，则返回指定约束上边界的IIS状态；若参数constrs为列表或ConstrArray类对象，则返回指定约束上边界的IIS状态组成的一个列表对象；若参数constrs为字典或tupledict类对象，则返回键为指定约束的下标，值为指定约束上边界的IIS状态组成的一个tupledict类对象。参量：constrs，指定的约束。",
        "code": "# 获取模型中约束r0和r1相应上边界的IIS状态\nupperIIS = m.getConstrUpperIIS([r0, r1])\n# 获取tupledict对象rr中的约束上边界相应的IIS状态\nupperIIS = m.getConstrUpperIIS(rr)"
    },
    {
        "rowid": 20414,
        "name": "Model.getSOSIIS()",
        "description": "摘要：getSOSIIS(soss)。描述：获取指定SOS约束的IIS状态。若参数soss为SOS类对象，则返回指定SOS约束的IIS状态；若参数soss为列表或SOSArray类对象，则返回指定SOS约束的IIS状态组成的一个列表对象；若参数soss为字典或tupledict类对象，则返回键为指定SOS约束的下标，值为指定SOS约束的IIS状态组成的一个tupledict类对象。参量：soss，指定的SOS约束。",
        "code": "# 获取模型中SOS约束r0和r1相应的IIS状态\nsosIIS = m.getSOSIIS([r0, r1])\n# 获取tupledict对象rr中的SOS约束相应的IIS状态\nsosIIS = m.getSOSIIS(rr)"
    },
    {
        "rowid": 20415,
        "name": "Model.getIndicatorIIS()",
        "description": "摘要：getIndicatorIIS(genconstrs)。描述：获取指定Indicator约束的IIS状态。若参数genconstrs为GenConstr类对象，则返回指定Indicator约束的IIS状态；若参数genconstrs为列表或GenConstrArray类对象，则返回指定Indicator约束的IIS状态组成的一个列表对象；若参数genconstrs为字典或tupledict类对象，则返回键为指定Indicator约束的下标，值为指定Indicator约束的IIS状态组成的一个tupledict类对象。参量：genconstrs，指定的Indicator约束。",
        "code": "# 获取模型中Indicator约束r0和r1相应的IIS状态\nindicatorIIS = m.getIndicatorIIS([r0, r1])\n# 获取tupledict对象rr中的Indicator约束相应的IIS状态\nindicatorIIS = m.getIndicatorIIS(rr)"
    },
    {
        "rowid": 20416,
        "name": "Model.getAttr()",
        "description": "摘要：getAttr(attrname)。描述：获取指定的模型属性值，返回一个常数。参量：attrname，指定的属性名，可取值详见属性章节部分。",
        "code": "# 获取目标函数的常数项\nobjconst = m.getAttr(COPT.Attr.ObjConst)"
    },
    {
        "rowid": 20417,
        "name": "Model.getInfo()",
        "description": "摘要：getInfo(infoname, args)。描述：获取指定变量或约束的信息值。若参数args为Var类对象或Constraint类对象，则返回指定变量或约束的信息值常数；若参数args为列表、VarArray类对象或ConstrArray类对象，则返回指定变量或约束的信息值组成的一个列表对象；若参数args为字典或tupledict类对象，则返回键为指定变量或约束的下标，值为指定变量或约束的信息值组成的一个tupledict类对象；若参数args为MVar类对象、MConstr类对象、MQConstr类对象或MPsdConstr类对象，则返回指定变量或约束的信息值组成的一个numpy.ndarray对象。参量：infoname，待获取信息名，可取值详见信息部分；args，待获取信息的变量或者约束。",
        "code": "# 获取模型中全部线性约束的下界信息\nlb = m.getInfo(COPT.Info.LB, m.getConstrs())\n# 获取变量x和y的取值信息\nsol = m.getInfo(COPT.Info.Value, [x, y])\n# 获取tupledict对象shipconstr中的线性约束相应的对偶变量取值信息\ndual = m.getInfo(COPT.Info.Dual, shipconstr)"
    },
    {
        "rowid": 20418,
        "name": "Model.getVarType()",
        "description": "摘要：getVarType(vars)。描述：获取指定变量的类型。若参数vars为Var类对象，则返回指定变量的类型；若参数vars为列表或VarArray类对象，则返回指定变量的类型组成的一个列表对象；若参数vars为字典或tupledict类对象，则返回键为指定变量的下标，值为指定变量的类型组成的一个tupledict类对象。参量：vars，指定的变量。",
        "code": "# 获取变量x的类型\nxtype = m.getVarType(x)\n# 获取变量x、y和z的类型\nxtype = m.getVarType([x, y, z])\n# 获取tupledict对象xdict中的变量的类型\nxtype = m.getVarType(xdict)"
    },
    {
        "rowid": 20419,
        "name": "Model.getParam()",
        "description": "摘要：getParam(paramname)。描述：获取指定的优化参数的当前值，返回一个常数。参量：paramname，指定的优化参数名，可取值详见参数部分。",
        "code": "# 获取优化求解时间限制的当前值\ntimelimit = m.getParam(COPT.Param.TimeLimit)"
    },
    {
        "rowid": 20420,
        "name": "Model.getParamInfo()",
        "description": "摘要：getParamInfo(paramname)。描述：获取指定的优化参数的信息，返回一个元组对象，其元素分别为：参数名、当前值、默认值、最小值和最大值。参量：paramname，指定的优化参数名，可取值详见参数部分。",
        "code": "# 获取优化求解时间限制参数的信息\npname, pcur, pdef, pmin, pmax = m.getParamInfo(COPT.Param.TimeLimit)"
    },
    {
        "rowid": 20421,
        "name": "Model.setBasis()",
        "description": "摘要：setBasis(varbasis, constrbasis)。描述：设置线性规划中全部变量和线性约束的基状态。参数varbasis和constrbasis为列表对象，其元素数目分别为模型中的变量总数和线性约束总数。参量：varbasis，变量的基状态；constrbasis，线性约束的基状态。",
        "code": "# 设置模型中全部变量和线性约束的基状态\n.setBasis(varbasis, constrbasis)"
    },
    {
        "rowid": 20422,
        "name": "Model.setSlackBasis()",
        "description": "摘要：setSlackBasis()。描述：设置线性规划的基为松弛基。",
        "code": "# 设置基状态为松弛基\n.setSlackBasis()"
    },
    {
        "rowid": 20423,
        "name": "Model.setVarType()",
        "description": "摘要：setVarType(vars, vartypes)。描述：设置指定变量的类型。若参数vars为Var类对象，则参数vartypes为变量类型常量；若参数vars为字典或tupledict类对象，则参数vartypes可为变量类型常量、字典或tupledict类对象；若参数vars为列表或VarArray类对象，则参数vartypes可为变量类型常量或列表对象。参量：vars，指定的变量；vartypes，指定的变量类型。",
        "code": "# 设置变量x为整数变量\nm.setVarType(x, COPT.INTEGER)\n# 设置变量x和y为二进制变量\nm.setVarType([x, y], COPT.BINARY)\n# 设置tupledict对象xdict中的变量为连续变量\nm.setVarType(xdict, COPT.CONTINUOUS)"
    },
    {
        "rowid": 20424,
        "name": "Model.setNames()",
        "description": "摘要：setNames(args, names)。描述：设置指定变量或约束的名称。参量：args，指定的变量或约束，可取值为单个或一组：Var类，Constraint类，QConstraint类，PsdVar类，PsdConstraint类，LmiConstraint类，GenConstr类或AffineCone类，以及由它们构成的列表或者字典对象；names，指定的变量或约束名称，可以是单个字符串，或者是与args匹配的列表或字典对象。",
        "code": "# 设置变量x为的名称为\"var\"\nm.setNames(x, \"var\")\n# 设置约束constr1的名称为\"c1\", constr2的名称为\"c2\"\n.setNames([constr1, constr2], [\"c1\", \"c2\"])"
    },
    {
        "rowid": 20425,
        "name": "Model.setMipStart()",
        "description": "摘要：setMipStart(vars, startvals)。描述：设置指定变量的初始值，仅对整数规划模型有效。若参数vars为Var类对象，则参数startvals为常量；若参数vars为字典或tupledict类对象，则参数startvals可为常量、字典或tupledict类对象；若参数vars为列表或VarArray类对象，则参数startvals可为常量或列表对象。注意：可以通过多次调用该方法来输入不同的初始解。请务必在输入结束后，调用loadMipStart()。参量：vars，指定的变量；startvals，指定的变量初始值。",
        "code": "# 设置变量x的初始解为1\nm.setMipStart(x, 1)\n# 设置变量x和y的初始解分别为2和3\nm.setMipStart([x, y], [2, 3])\n# 设置tupledict对象xdict中的变量的初始解均为1\nm.setMipStart(xdict, 1)\n# 加载初始解信息到模型\nm.loadMipStart()"
    },
    {
        "rowid": 20426,
        "name": "Model.setInfo()",
        "description": "摘要：setInfo(infoname, args, newvals)。描述：设置指定变量或约束的信息值。若参数args为Var类对象或Constraint类对象，则参数newvals为常量；若参数args为字典或tupledict类对象，则参数newvals可为常量、字典或tupledict类对象；若参数args为列表、VarArray类对象或ConstrArray类对象，则参数newvals可为常量或列表对象；若参数args为MVar类对象、MConstr类对象、MQConstr类对象或MPsdConstr类对象，则参数newvals可为常量或numpy.ndarray对象。参量：infoname，指定信息名，可取值详见信息部分；args，指定的变量或线性约束；newvals，指定的新信息值。",
        "code": "# 设置变量x的上界为1.0\nm.setInfo(COPT.Info.UB, x, 1.0)\n# 设置变量x和y的下界分别为1.0和2.0\nm.setInfo(COPT.Info.LB, [x, y], [1.0, 2.0])\n# 设置tupledict对象xdict中的变量的目标函数系数均为0\nm.setInfo(COPT.Info.OBJ, xdict, 0.0)"
    },
    {
        "rowid": 20427,
        "name": "Model.setParam()",
        "description": "摘要：setParam(paramname, newval)。描述：设置优化参数为指定值。参量：paramname，指定的优化参数，可取值详见参数部分；newval，指定的优化参数新值。",
        "code": "设置优化参数求解时间限制为1小时\nm.setParam(COPT.Param.TimeLimit, 3600)"
    },
    {
        "rowid": 20428,
        "name": "Model.resetParam()",
        "description": "摘要: resetParam()\n描述: 将模型所有优化参数重置为默认值。",
        "code": "# 重置模型所有优化参数为默认值\nm.resetParam()"
    },
    {
        "rowid": 20429,
        "name": "Model.read()",
        "description": "摘要: read(filename)\n描述: 根据文件名后缀判断文件类型并读入到模型中。\n目前支持 MPS 格式模型文件（后缀为 '.mps' 或 '.mps.gz'）、LP 格式模型文件（后缀为 '.lp' 或 '.lp.gz'）、SDPA 格式模型文件（后缀为 '.dat-s' 或 '.dat-s.gz'）、CBF 格式模型文件（后缀为 '.cbf' 或 '.cbf.gz'）、COPT 二进制格式文件（后缀为 '.bin'）、基解文件（后缀为 '.bas'）、结果文件（后缀为 '.sol'）、初始解文件（后缀为 '.mst'）和参数文件（后缀为 '.par'）。\n参量:\nfilename\n待读取文件的名称。",
        "code": "# 读取MPS格式模型文件\nm.read('test.mps.gz')\n# 读取LP格式模型文件\nm.read('test.lp.gz')\n# 读取COPT二进制格式模型文件\nm.read('test.bin')\n# 读取基解文件\nm.read('testlp.bas')\n# 读取结果文件\nm.read('testmip.sol')\n# 读取初始解文件\nm.read('testmip.mst')\n# 读取参数设置文件\nm.read('test.par')"
    },
    {
        "rowid": 20430,
        "name": "Model.readMps()",
        "description": "摘要: readMps(filename)\n描述: 按照 MPS 文件格式读取指定的文件到模型中。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照MPS文件格式读取文件\"test.mps.gz\"\nm.readMps('test.mps.gz')\n# 按照MPS文件格式读取文件\"test.lp.gz\"\nm.readMps('test.lp.gz')"
    },
    {
        "rowid": 20431,
        "name": "Model.readLp()",
        "description": "摘要: readLp(filename)\n描述: 按照 LP 文件格式读取指定的文件到模型中。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照LP文件格式读取文件\"test.mps.gz\"\nm.readLp('test.mps.gz')\n# 按照LP文件格式读取文件\"test.lp.gz\"\nm.readLp('test.lp.gz')"
    },
    {
        "rowid": 20432,
        "name": "Model.readSdpa()",
        "description": "摘要: readSdpa(filename)\n描述: 按照 SDPA 文件格式读取指定的文件到模型中。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照SDPA文件格式读取文件\"test.dat-s\"\nm.readSdpa('test.dat-s')"
    },
    {
        "rowid": 20433,
        "name": "Model.readCbf()",
        "description": "摘要: readCbf(filename)\n描述: 按照 CBF 文件格式读取指定的文件到模型中。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照CBF文件格式读取文件\"test.cbf\"\nm.readCbf('test.cbf')"
    },
    {
        "rowid": 20434,
        "name": "Model.readBin()",
        "description": "摘要: readBin(filename)\n描述: 按照 COPT 二进制文件格式读取指定的文件到模型中。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照COPT二进制文件格式读取文件\"test.bin\"\nm.readBin('test.bin')"
    },
    {
        "rowid": 20435,
        "name": "Model.readSol()",
        "description": "摘要: readSol(filename)\n描述: 按照结果文件格式读取文件到模型中。\n注意：若读取成功，则读取的值将作为整数规划模型求解的一组初始解。文件中变量的取值可不完全指定（默认值为 0），若某变量的取值指定了多次，则采用最后一次指定的值。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照结果文件格式读取文件\"testmip.sol\"\nm.readSol('testmip.sol')\n# 按照结果文件格式读取文件\"testmip.txt\"\nm.readSol('testmip.txt')"
    },
    {
        "rowid": 20436,
        "name": "Model.readBasis()",
        "description": "摘要: readBasis(filename)\n描述: 按照基解文件格式读取变量和线性约束的基状态到模型中，仅适用于线性规划模型。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照基解文件格式读取文件\"testmip.bas\"\nm.readBasis('testmip.bas')\n# 按照基解文件格式读取文件\"testmip.txt\"\nm.readBasis('testmip.txt')"
    },
    {
        "rowid": 20437,
        "name": "Model.readMst()",
        "description": "摘要: readMst(filename)\n描述: 按照初始解文件格式读取初始解到模型中。\n注意：若读取成功，则读取的值将作为整数规划模型求解的一组初始解。文件中变量的取值可不完全指定，若某变量的取值指定了多次，则采用最后一次指定的值。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照初始解文件格式读取文件\"testmip.mst\"\nm.readMst('testmip.mst')\n# 按照初始解文件格式读取文件\"testmip.txt\"\nm.readMst('testmip.txt')"
    },
    {
        "rowid": 20438,
        "name": "Model.readParam()",
        "description": "摘要: readParam(filename)\n描述: 按照参数文件格式读取优化参数到模型中。\n注意：若某优化参数的取值指定了多次，则采用最后一次指定的值。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照参数文件格式读取文件\"testmip.par\"\nm.readParam('testmip.par')\n# 按照参数文件格式读取文件\"testmip.txt\"\nm.readParam('testmip.txt')"
    },
    {
        "rowid": 20439,
        "name": "Model.readTune()",
        "description": "摘要: readTune(filename)\n描述: 按照调优文件格式读取调优参数组合到模型中。\n参量:\nfilename\n待读取文件名。",
        "code": "# 按照调优文件格式读取文件\"testmip.tune\"\nm.readTune('testmip.tune')\n# 按照调优文件格式读取文件\"testmip.txt\"\nm.readTune('testmip.txt')"
    },
    {
        "rowid": 20440,
        "name": "Model.write()",
        "description": "摘要: write(filename)\n描述: 根据文件后缀名判断文件类型并写出到磁盘。\n目前支持 MPS 格式模型文件（后缀为 '.mps'）、LP 格式模型文件（后缀为 '.lp'）、CBF 格式模型文件（后缀为 '.cbf'）、COPT 二进制格式文件（后缀为 '.bin'）、基解文件（后缀为 '.bas'）、结果文件（后缀为 '.sol'）、初始解文件（后缀为 '.mst'）和参数文件（后缀为 '.par'）。\n参量:\nfilename\n待输出文件名。",
        "code": "# 输出MPS格式模型文件\nm.write('test.mps')\n# 输出LP格式模型文件\nm.write('test.lp')\n# 输出COPT二进制格式模型文件\nm.write('test.bin')\n# 输出基解文件\nm.write('testlp.bas')\n# 输出结果文件\nm.write('testmip.sol')\n# 输出初始解文件\nm.write('testmip.mst')\n# 输出参数文件\nm.write('test.par')"
    },
    {
        "rowid": 20441,
        "name": "Model.writeMps()",
        "description": "摘要: writeMps(filename)\n描述: 将当前模型输出到 MPS 格式模型文件中。\n参量:\nfilename\n待输出 MPS 格式模型文件名。",
        "code": "# 输出MPS格式模型文件\"test.mps\"\nm.writeMps('test.mps')"
    },
    {
        "rowid": 20442,
        "name": "Model.writeMpsStr()",
        "description": "摘要: writeMpsStr()\n描述: 将当前模型以 MPS 格式输出到缓存对象。",
        "code": "# 将当前模型以MPS格式输出到缓存对象buff中并打印模型内容\nbuff = m.writeMpsStr()\nprint(buff.getData())"
    },
    {
        "rowid": 20443,
        "name": "Model.writeLp()",
        "description": "摘要: writeLp(filename)\n描述: 将当前模型输出到 LP 格式模型文件中。\n参量:\nfilename\n待输出 LP 格式模型文件名。",
        "code": "# 输出LP格式模型文件\"test.lp\"\nm.writeLp('test.lp')"
    },
    {
        "rowid": 20444,
        "name": "Model.writeCbf()",
        "description": "摘要: writeCbf(filename)\n描述: 将当前模型输出到 CBF 格式模型文件中。\n参量:\nfilename\n待输出 CBF 格式模型文件名。",
        "code": "# 输出CBF格式模型文件\"test.cbf\"\nm.writeCbf('test.cbf')"
    },
    {
        "rowid": 20445,
        "name": "Model.writeBin()",
        "description": "摘要: writeBin(filename)\n描述: 将当前模型输出到 COPT 二进制格式模型文件中。\n参量:\nfilename\n待输出 COPT 二进制格式模型文件名。",
        "code": "# 输出COPT二进制格式模型文件\"test.bin\"\nm.writeBin('test.bin')"
    },
    {
        "rowid": 20446,
        "name": "Model.writeIIS()",
        "description": "摘要: writeIIS(filename)\n描述: 将当前最小冲突模型写入 IIS 格式模型文件中。\n参量:\nfilename\n待输出 IIS 格式模型文件名。",
        "code": "# 输出IIS格式模型文件\"test.iis\"\nm.writeIIS('test.iis')"
    },
    {
        "rowid": 20447,
        "name": "Model.writeRelax()",
        "description": "摘要: writeRelax(filename)\n描述: 将可行化松弛模型输出到 Relax 格式模型文件中。\n参量:\nfilename\n待输出 Relax 格式模型文件名。",
        "code": "# 输出Relax格式模型文件\"test.relax\"\nm.writeRelax('test.relax')"
    },
    {
        "rowid": 20448,
        "name": "Model.writeSol()",
        "description": "摘要: writeSol(filename)\n描述: 将模型的结果输出到结果文件中。\n参量:\nfilename\n待输出结果文件名。",
        "code": "# 输出结果文件\"test.sol\"\nm.writeSol('test.sol')"
    },
    {
        "rowid": 20449,
        "name": "Model.writePoolSol()",
        "description": "摘要: writePoolSol(isol, filename)\n描述: 将指定的解池中的解写到文件中。\n参量:\nisol\n解池中解的索引。\nfilename\n待输出结果文件名。",
        "code": "# 输出解池中第1组解到结果文件\"poolsol_1.sol\"\nm.writePoolSol(1, 'poolsol_1.sol')"
    },
    {
        "rowid": 20450,
        "name": "Model.writeBasis()",
        "description": "摘要: writeBasis(filename)\n描述: 将线性规划模型的基解输出到基解文件中。\n参量:\nfilename\n待输出基解文件名。",
        "code": "# 输出基解文件\"testlp.bas\"\nm.writeBasis('testlp.bas')"
    },
    {
        "rowid": 20451,
        "name": "Model.writeMst()",
        "description": "摘要: writeMst(filename)\n描述: 对于整数规划模型，输出当前最好整数解到初始解文件中。若没有整数解，则输出模型中存储的第一组初始解。\n参量:\nfilename\n待输出初始解文件名。",
        "code": "# 输出初始解文件\"testmip.mst\"\nm.writeMst('testmip.mst')"
    },
    {
        "rowid": 20452,
        "name": "Model.writeParam()",
        "description": "摘要: writeParam(filename)\n描述: 输出与默认参数值不相同的参数到参数文件中。\n参量:\nfilename\n待输出参数文件名。",
        "code": "# 输出参数文件\"testmip.par\"\nm.writeParam('testmip.par')"
    },
    {
        "rowid": 20453,
        "name": "Model.writeTuneParam()",
        "description": "摘要: writeTuneParam(idx, filename)\n描述: 输出指定编号的参数调优结果到参数文件中。\n参量:\nidx: 参数调优结果编号。\nfilename: 待输出参数文件名。",
        "code": "# 输出指定编号的参数调优结果到参数文件\"testmip.par\"\nm.writeTuneParam(0, 'testmip.par')"
    },
    {
        "rowid": 20454,
        "name": "Model.setLogFile()",
        "description": "摘要: setLogFile(logfile)\n描述: 设置求解器日志文件。\n参量:\nlogfile: 日志文件。",
        "code": "# 设置日志文件为\"copt.log\"\nm.setLogFile('copt.log')"
    },
    {
        "rowid": 20455,
        "name": "Model.setLogCallback()",
        "description": "摘要: setLogCallback(logcb)\n描述: 设置求解日志回调函数。\n参量:\nlogcb: 求解日志回调函数。",
        "code": "# 设置日志回调函数为Python函数'logcbfun'\nm.setLogCallback(logcbfun)"
    },
    {
        "rowid": 20456,
        "name": "Model.solve()",
        "description": "摘要: solve()\n描述: 求解优化模型。",
        "code": "# 求解优化模型\nm.solve()"
    },
    {
        "rowid": 20457,
        "name": "Model.solveLP()",
        "description": "摘要: solveLP()\n描述: 求解线性规划模型。若是整数规划模型，则当作线性规划模型求解。",
        "code": "# 调用线性规划求解器求解模型\nm.solveLP()"
    },
    {
        "rowid": 20458,
        "name": "Model.computeIIS()",
        "description": "摘要: computeIIS()\n描述: 计算不可行模型的 IIS。",
        "code": "# 计算不可行模型的IIS\nm.computeIIS()"
    },
    {
        "rowid": 20459,
        "name": "Model.feasRelax()",
        "description": "摘要: feasRelax(vars, lbpen, ubpen, constrs, rhspen, uppen=None)\n描述: 计算不可行模型的可行化松弛。\n参量:\nvars: 待松弛变量。\nlbpen: 变量下界的惩罚因子。若为 None，则表示不松弛下界；若惩罚因子为 COPT.INFINITY，则表示不松弛相应的变量下界。\nubpen: 变量上界的惩罚因子。若为 None，则表示不松弛上界；若惩罚因子为 COPT.INFINITY，则表示不松弛相应的变量上界。\nconstrs: 待松弛约束。\nrhspen: 约束边界的惩罚因子。若为 None，则表示不松弛约束边界；若惩罚因子为 COPT.INFINITY，则表示不松弛相应的约束边界。\nuppen: 若约束存在双边约束，则表示约束上界的惩罚因子。若为 None，则惩罚因子由 rhspen 指定；若惩罚因子为 COPT.INFINITY，则表示不松弛相应的约束上界。",
        "code": "# 计算不可行模型的可行化松弛\nm.feasRelax(vars, lbpen, ubpen, constrs, rhspen)"
    },
    {
        "rowid": 20460,
        "name": "Model.feasRelaxS()",
        "description": "摘要: feasRelaxS(vrelax, crelax)\n描述: 计算不可行模型的可行化松弛。\n参量:\nvrelax: 是否松弛变量。\ncrelax: 是否松弛约束。",
        "code": "# 计算不可行模型的可行化松弛\nm.feasRelaxS(True, True)"
    },
    {
        "rowid": 20461,
        "name": "Model.tune()",
        "description": "摘要: tune()\n描述: 对模型进行参数调优。",
        "code": "# 对模型进行参数调优\nm.tune()"
    },
    {
        "rowid": 20462,
        "name": "Model.loadTuneParam()",
        "description": "摘要: loadTuneParam(idx)\n描述: 加载指定编号的参数调优结果到模型。",
        "code": "# 加载最佳参数调优结果到模型中\nm.loadTuneParam(0)"
    },
    {
        "rowid": 20463,
        "name": "Model.interrupt()",
        "description": "摘要: interrupt()\n描述: 中断当前求解的模型。",
        "code": "# 中断当前求解的模型\nm.interrupt()"
    },
    {
        "rowid": 20464,
        "name": "Model.remove()",
        "description": "摘要: remove(args)\n描述: 从模型中移除变量或约束。\n若移除变量，则参数 args 可取值为Var 类 对象、VarArray 类 对象、列表、字典或tupledict 类 对象；\n若移除线性约束，则参数 args 可取值为Constraint 类 对象、ConstrArray 类 对象、列表、字典或tupledict 类 对象；\n若移除 SOS 约束，则参数 args 可取值为SOS 类 对象、SOSArray 类 对象、列表、字典或tupledict 类 对象；\n若移除二阶锥约束，则参数 args 可取值为Cone 类 对象、ConeArray 类 对象、列表、字典或tupledict 类 对象；\n若移除指数锥约束，则参数 args 可取值为ExpCone 类 对象、ExpConeArray 类 对象、列表、字典或tupledict 类 对象；\n若移除二次约束，则参数 args 可取值为QConstraint 类 对象、QConstrArray 类 对象、列表、字典或tupledict 类 对象；\n若移除半定约束，则参数 args 可取值为PsdConstraint 类 对象、PsdConstrArray 类 对象、列表、字典或tupledict 类 对象；\n若移除 Indicator 约束，则参数 args 可取值为GenConstr 类 对象、GenConstrArray 类 对象、列表、字典或tupledict 类 对象；\n若移除 LMI 约束，则参数 args 可取值为LmiConstraint 类 对象、LmiConstrArray 类 对象、列表、字典或tupledict 类 对象；\n若移除仿射锥约束，则参数 args 可取值为AffineCone 类 对象、AffineConeArray 类 对象；\n若移除矩阵变量或矩阵约束，则参数 args 可取值为MVar 类 对象、MConstr 类 对象、MQConstr 类 对象、MPsdConstr 类 对象。\n参量:\nargs: 待移除变量或约束。",
        "code": "# 移除线性约束conx\nm.remove(conx)\n# 移除变量x和y\nm.remove([x, y])"
    },
    {
        "rowid": 20465,
        "name": "Model.reset()",
        "description": "摘要: reset()\n描述: 重置模型求解结果信息。",
        "code": "# 重置模型求解结果信息\nm.reset()"
    },
    {
        "rowid": 20466,
        "name": "Model.resetAll()",
        "description": "摘要: resetAll()\n描述: 重置模型的求解结果以及其他额外信息，如初始解、IIS 等。执行该函数后，模型需要计算的信息都会被清空，只剩下原始模型本身（即变量、目标和约束被保留）。",
        "code": "# 重置模型的求解结果及其他额外信息\nm.resetAll()"
    },
    {
        "rowid": 20467,
        "name": "Model.clear()",
        "description": "摘要: clear()\n描述: 清空整个模型。执行该函数后，模型中的全部内容都会被清空，包括此前添加的变量、目标和约束。",
        "code": "# 清空整个模型\nm.clear()"
    },
    {
        "rowid": 20468,
        "name": "Model.clone()",
        "description": "摘要: clone()\n描述: 创建模型的深拷贝，返回一个Model 类 对象。",
        "code": "# 创建模型的深拷贝\nmcopy = m.clone()"
    },
    {
        "rowid": 20469,
        "name": "Model.setCallback()",
        "description": "Synopsis: setCallback(cb, cbctx)\nDescription: 在 COPT 模型中，设置用户自定义的回调。\nArguments:\ncb: 用户自定义的回调类对象，继承CallbackBase 类 。\ncbctx: 回调的触发条件，可取值详见Callback context 。",
        "code": "cb = CoptCallback()\nmodel.setCallback(cb, COPT.CBCONTEXT_MIPSOL)"
    },
    {
        "rowid": 20501,
        "name": "Var.getType()",
        "description": "摘要: getType()\n描述: 获取变量的类型。",
        "code": "# 获取变量v的类型\nvtype = v.getType()"
    },
    {
        "rowid": 20502,
        "name": "Var.getName()",
        "description": "摘要: getName()\n描述: 获取变量的名字。",
        "code": "# 获取变量v的名字\nvarname = v.getName()"
    },
    {
        "rowid": 20503,
        "name": "Var.getBasis()",
        "description": "摘要: getBasis()\n描述: 获取变量的基状态。",
        "code": "# 获取变量v的基状态\nvarbasis = v.getBasis()"
    },
    {
        "rowid": 20504,
        "name": "Var.getLowerIIS()",
        "description": "摘要: getLowerIIS()\n描述: 获取变量下边界的 IIS 状态。",
        "code": "# 获取变量v下边界的IIS状态\nlowerIIS = v.getLowerIIS()"
    },
    {
        "rowid": 20505,
        "name": "Var.getUpperIIS()",
        "description": "摘要: getUpperIIS()\n描述: 获取变量上边界的 IIS 状态。",
        "code": "# 获取变量v上边界的IIS状态\nupperIIS = v.getUpperIIS()"
    },
    {
        "rowid": 20506,
        "name": "Var.getIdx()",
        "description": "摘要: getIdx()\n描述: 获取变量在系数矩阵中的下标。",
        "code": "# 获取变量v的下标\nvindex = v.getIdx()"
    },
    {
        "rowid": 20507,
        "name": "Var.setType()",
        "description": "摘要: setType(newtype)\n描述: 设置变量的类型。\n参量:\n  newtype: 变量的新类型。可取值详见变量类型 部分。",
        "code": "# 设置变量v的类型\nv.setType(COPT.BINARY)"
    },
    {
        "rowid": 20508,
        "name": "Var.setName()",
        "description": "摘要: setName(newname)\n描述: 设置变量的名称。\n参量:\n  newname: 变量的新名称。",
        "code": "# 设置变量v的名称\nv.setName('v')"
    },
    {
        "rowid": 20509,
        "name": "Var.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取变量指定的信息值，返回一个常数。\n参量:\n  infoname: 待获取信息名。可取值详见信息 部分。",
        "code": "# 获取变量x的下界\nlb = x.getInfo(COPT.Info.LB)"
    },
    {
        "rowid": 20510,
        "name": "Var.setInfo()",
        "description": "摘要: setInfo(infoname, newval)\n描述: 给变量设置新的信息值。\n参量:\n  infoname: 待设置信息名。可取值详见信息 部分。\n  newval: 待设置新信息值。",
        "code": "# 设置变量x的下界\nx.setInfo(COPT.Info.LB, 1.0)"
    },
    {
        "rowid": 20511,
        "name": "Var.remove()",
        "description": "摘要: remove()\n描述: 从模型中删除当前变量。",
        "code": "# 删除变量x\nx.remove()"
    },
    {
        "rowid": 20601,
        "name": "VarArray()",
        "description": "摘要: VarArray(vars=None)\n描述: 创建一个VarArray 类 对象。\n若参数 vars 为 None，则创建一个空的VarArray 类 对象，否则以参数 vars 初始化新创建的VarArray 类 对象。\n参量:\n  vars: 待添加变量。可选参量，默认为 None。可取值为Var 类 对象、VarArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的VarArray类对象\nvararr = VarArray()\n# 创建一个VarArray类对象，并使用变量x和y初始化\nvararr = VarArray([x, y])"
    },
    {
        "rowid": 20602,
        "name": "VarArray.pushBack()",
        "description": "摘要: pushBack(var)\n描述: 添加单个或多个Var 类 对象。\n参量:\n  var: 待添加变量。可取值为Var 类 对象、VarArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加变量x到vararr中\nvararr.pushBack(x)\n# 添加变量x和y到vararr中\nvararr.pushBack([x, y])"
    },
    {
        "rowid": 20603,
        "name": "VarArray.getVar()",
        "description": "摘要: getVar(idx)\n描述: 根据变量在VarArray 类 对象中的下标获取相应的变量，返回一个Var 类 对象。\n参量:\n  idx: 变量在VarArray 类 对象中的下标。起始为 0。",
        "code": "# 获取vararr中下标为1的变量\nvar = vararr.getVar(1)"
    },
    {
        "rowid": 20604,
        "name": "VarArray.getAll()",
        "description": "摘要: getAll()\n描述: 获取VarArray 类 对象中的的全部变量，返回一个列表对象。",
        "code": "# 获取vararr中的全部变量\nvarall = vararr.getAll()"
    },
    {
        "rowid": 20605,
        "name": "VarArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取VarArray 类 对象中元素的个数。",
        "code": "# 获取vararr中变量的个数\narrsize = vararr.getSize()"
    },
    {
        "rowid": 20701,
        "name": "PsdVar.getName()",
        "description": "摘要: getName()\n描述: 获取半定变量的名字。",
        "code": "# 获取半定变量v的名字\nvarname = v.getName()"
    },
    {
        "rowid": 20702,
        "name": "PsdVar.getIdx()",
        "description": "摘要: getIdx()\n描述: 获取半定变量在模型中的下标。",
        "code": "# 获取半定变量v的下标\nvindex = v.getIdx()"
    },
    {
        "rowid": 20703,
        "name": "PsdVar.getDim()",
        "description": "摘要: getDim()\n描述: 获取半定变量的维度。",
        "code": "# 获取半定变量v的维度\nvdim = v.getDim()"
    },
    {
        "rowid": 20704,
        "name": "PsdVar.getLen()",
        "description": "摘要: getLen()\n描述: 获取半定变量展开后的长度。",
        "code": "# 获取半定变量v展开后的长度\nvlen = v.getLen()"
    },
    {
        "rowid": 20705,
        "name": "PsdVar.setName()",
        "description": "摘要: setName(newname)\n描述: 设置半定变量的名称。\n参量:\n  newname: 半定变量的新名称。",
        "code": "# 设置半定变量v的名称\nv.setName('v')"
    },
    {
        "rowid": 20706,
        "name": "PsdVar.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取半定变量指定的信息值，返回一个列表。\n参量:\n  infoname: 待获取信息名。可取值详见信息 部分。",
        "code": "# 获取半定变量x的取值\nsol = x.getInfo(COPT.Info.Value)"
    },
    {
        "rowid": 20707,
        "name": "PsdVar.remove()",
        "description": "摘要: remove()\n描述: 从模型中删除当前半定变量。",
        "code": "# 删除半定变量x\nx.remove()"
    },
    {
        "rowid": 20708,
        "name": "PsdVar.diag()",
        "description": "摘要: diag(offset=0)\n描述: 获取半定变量的对角元。\n参量:\n  offset: 对角偏移量，默认值为 0。\n    若 offset 大于 0，则表示向下三角偏移；若 offset 小于 0，则表示向上三角偏移。\n返回值: PsdExpr 对象。",
        "code": "# 获取半定变量主对角元\nv.diag(offset=0)"
    },
    {
        "rowid": 20709,
        "name": "PsdVar.pick()",
        "description": "摘要: pick(indexes)\n描述: 获取半定变量中由指定下标构成的半定表达式。\n参量:\n  indexes: 指定的下标数组。\n返回值: PsdExpr 对象。",
        "code": "# 获取半定变量中下标为0的元素构成的半定表达式\nbarX = model.addPsdVars(3, \"BAR_X\")\nbarX.pick([0])"
    },
    {
        "rowid": 20710,
        "name": "PsdVar.sum()",
        "description": "摘要: sum()\n描述: 获取半定变量全部项相加构成的半定表达式。\n返回值: PsdExpr 对象。",
        "code": ""
    },
    {
        "rowid": 20711,
        "name": "PsdVar.toexpr()",
        "description": "摘要: toexpr()\n描述: 获取半定变量等价的半定表达式。\n返回值: PsdExpr 对象。",
        "code": ""
    },
    {
        "rowid": 20712,
        "name": "PsdVar.shape",
        "description": "摘要: shape\n描述: PsdVar 对象的形状。\n返回值: 整型元组。",
        "code": ""
    },
    {
        "rowid": 20713,
        "name": "PsdVar.size",
        "description": "摘要: size\n描述: PsdVar 对象的形状。\n返回值: 整型元组。",
        "code": ""
    },
    {
        "rowid": 20714,
        "name": "PsdVar.dim",
        "description": "摘要: dim\n描述: PsdVar 对象的维度。\n返回值: 整型值。",
        "code": ""
    },
    {
        "rowid": 20715,
        "name": "PsdVar.len",
        "description": "摘要: len\n描述: PsdVar 对象展开后的长度。\n返回值: 整型值。",
        "code": ""
    },
    {
        "rowid": "20801",
        "name": "PsdVarArray()",
        "description": "摘要: PsdVarArray(vars=None)\n描述: 创建一个PsdVarArray 类 对象。若参数 vars 为 None，则创建一个空的PsdVarArray 类 对象，否则以参数 vars 初始化新创建的PsdVarArray 类 对象。\n参量:\n- vars: 待添加半定变量。可选参量，默认为 None。可取值为PsdVar 类 对象、PsdVarArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的PsdVarArray类对象\nvararr = PsdVarArray()\n# 创建一个PsdVarArray类对象，并使用半定变量x和y初始化\nvararr = PsdVarArray([x, y])"
    },
    {
        "rowid": "20802",
        "name": "PsdVarArray.pushBack()",
        "description": "摘要: pushBack(var)\n描述: 添加单个或多个PsdVar 类 对象。\n参量:\n- var: 待添加半定变量。可取值为PsdVar 类 对象、PsdVarArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加半定变量x到vararr中\nvararr.pushBack(x)\n# 添加半定变量x和y到vararr中\nvararr.pushBack([x, y])"
    },
    {
        "rowid": "20803",
        "name": "PsdVarArray.getPsdVar()",
        "description": "摘要: getPsdVar(idx)\n描述: 根据半定变量在PsdVarArray 类 对象中的下标获取相应的半定变量，返回一个PsdVar 类 对象。\n参量:\n- idx: 半定变量在PsdVarArray 类 对象中的下标。起始为 0。",
        "code": "# 获取vararr中下标为1的半定变量\nvar = vararr.getPsdVar(1)"
    },
    {
        "rowid": "20804",
        "name": "PsdVarArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取PsdVarArray 类 对象中元素的个数。",
        "code": "# 获取vararr中半定变量的个数\narrsize = vararr.getSize()"
    },
    {
        "rowid": "20901",
        "name": "SymMatrix.getIdx()",
        "description": "摘要: getIdx()\n描述: 获取对称矩阵在模型中的下标。",
        "code": "# 获取对称矩阵mat的下标\nmatidx = mat.getIdx()"
    },
    {
        "rowid": "20902",
        "name": "SymMatrix.getDim()",
        "description": "摘要: getDim()\n描述: 获取对称矩阵在模型中的维度。",
        "code": "# 获取对称矩阵mat的维度\nmatdim = mat.getDim()"
    },
    {
        "rowid": "21001",
        "name": "SymMatrixArray()",
        "description": "摘要: SymMatrixArray(mats=None)\n描述: 创建一个SymMatrixArray 类 对象。若参数 mats 为 None，则创建一个空的SymMatrixArray 类 对象，否则以参数 mats 初始化新创建的SymMatrixArray 类 对象。\n参量:\n- mats: 待添加对称矩阵。可选参量，默认为 None。可取值为SymMatrix 类 对象、SymMatrixArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的SymMatrixArray类对象\nmatarr = SymMatrixArray()\n# 创建一个SymMatrixArray类对象，并使用对称矩阵matx和maty初始化\nmatarr = SymMatrixArray([matx, maty])"
    },
    {
        "rowid": "21002",
        "name": "SymMatrixArray.pushBack()",
        "description": "摘要: pushBack(mat)\n描述: 添加单个或多个SymMatrix 类 对象。\n参量:\n- mat: 待添加对称矩阵。可取值为SymMatrix 类 对象、SymMatrixArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加对称矩阵matx到matarr中\nmatarr.pushBack(matx)\n# 添加对称矩阵matx和maty到matarr中\nmatarr.pushBack([matx, maty])"
    },
    {
        "rowid": "21003",
        "name": "SymMatrixArray.getMatrix()",
        "description": "摘要: getMatrix(idx)\n描述: 根据对称矩阵在SymMatrixArray 类 对象中的下标获取相应的对称矩阵，返回一个SymMatrix 类 对象。\n参量:\n- idx: 对称矩阵在SymMatrixArray 类 对象中的下标。起始为 0。",
        "code": "# 获取matarr中下标为1的对称矩阵\nmat = matarr.getMatrix(1)"
    },
    {
        "rowid": "21004",
        "name": "SymMatrixArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取SymMatrixArray 类 对象中元素的个数。",
        "code": "# 获取matarr中对称矩阵的个数\narrsize = matarr.getSize()"
    },
    {
        "rowid": "21101",
        "name": "Constraint.getName()",
        "description": "摘要: getName()\n描述: 获取线性约束的名称。",
        "code": "# 获取线性约束con的名称\nconname = con.getName()"
    },
    {
        "rowid": "21102",
        "name": "Constraint.getBasis()",
        "description": "摘要: getBasis()\n描述: 获取线性约束的基状态。",
        "code": "# 获取线性约束con的基状态\nconbasis = con.getBasis()"
    },
    {
        "rowid": "21103",
        "name": "Constraint.getLowerIIS()",
        "description": "摘要: getLowerIIS()\n描述: 获取约束下边界的 IIS 状态。",
        "code": "# 获取约束con下边界的IIS状态\nlowerIIS = con.getLowerIIS()"
    },
    {
        "rowid": "21104",
        "name": "Constraint.getUpperIIS()",
        "description": "摘要: getUpperIIS()\n描述: 获取约束上边界的 IIS 状态。",
        "code": "# 获取约束con上边界的IIS状态\nupperIIS = con.getUpperIIS()"
    },
    {
        "rowid": "21105",
        "name": "Constraint.getIdx()",
        "description": "摘要: getIdx()\n描述: 获取线性约束在系数矩阵中的下标。",
        "code": "# 获取线性约束con的下标\nconidx = con.getIdx()"
    },
    {
        "rowid": "21106",
        "name": "Constraint.setName()",
        "description": "摘要: setName(newname)\n描述: 设置线性约束的名称。\n参量:\n- newname: 约束的新名称。",
        "code": "# 设置线性约束con的名称\ncon.setName('con')"
    },
    {
        "rowid": "21107",
        "name": "Constraint.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取指定的信息值，返回一个常数。\n参量:\n- infoname: 待获取信息名。可取值详见信息 部分。",
        "code": "# 获取线性约束con的下界\nconlb = con.getInfo(COPT.Info.LB)"
    },
    {
        "rowid": "21108",
        "name": "Constraint.setInfo()",
        "description": "摘要: setInfo(infoname, newval)\n描述: 设置新的信息值给指定线性约束。\n参量:\n- infoname: 待设置信息名。可取值详见信息 部分。\n- newval: 待设置新信息值。",
        "code": "# 设置线性约束con的下界\ncon.setInfo(COPT.Info.LB, 1.0)"
    },
    {
        "rowid": "21109",
        "name": "Constraint.remove()",
        "description": "摘要: remove()\n描述: 从模型中删除当前线性约束。",
        "code": "# 删除线性约束conx\nconx.remove()"
    },
    {
        "rowid": "21201",
        "name": "ConstrArray()",
        "description": "摘要: ConstrArray(constrs=None)\n描述: 创建一个ConstrArray 类 对象。若参数 constrs 为 None，则创建一个空的ConstrArray 类 对象，否则以参数 constrs 初始化新创建的ConstrArray 类 对象。\n参量:\n- constrs: 待添加线性约束。可选参量，默认为 None。可取值为Constraint 类 对象、ConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的ConstrArray类对象\nconarr = ConstrArray()\n# 创建一个ConstrArray类对象，并使用线性约束conx和cony初始化\nconarr = ConstrArray([conx, cony])"
    },
    {
        "rowid": "21202",
        "name": "ConstrArray.pushBack()",
        "description": "摘要: pushBack(constr)\n描述: 添加单个或多个Constraint 类 对象。\n参量:\n- constr: 待添加线性约束。可取值为Constraint 类 对象、ConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加线性约束r到conarr中\nconarr.pushBack(r)\n# 添加线性约束r0和r1到conarr中\nconarr.pushBack([r0, r1])"
    },
    {
        "rowid": "21203",
        "name": "ConstrArray.getConstr()",
        "description": "摘要: getConstr(idx)\n描述: 根据线性约束在ConstrArray 类 对象中的下标获取相应的线性约束，返回一个Constraint 类 对象。\n参量:\n- idx: 线性约束在ConstrArray 类 对象中的下标。起始为 0。",
        "code": "# 获取conarr中下标为1的线性约束\ncon = conarr.getConstr(1)"
    },
    {
        "rowid": "21204",
        "name": "ConstrArray.getAll()",
        "description": "摘要: getAll()\n描述: 获取ConstrArray 类 对象中的全部线性约束，返回一个列表对象。",
        "code": "# 获取conarr中的全部线性约束\ncons = conarr.getAll()"
    },
    {
        "rowid": "21205",
        "name": "ConstrArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取ConstrArray 类 对象中元素的个数。",
        "code": "# 获取conarr中线性约束的个数\narrsize = conarr.getSize()"
    },
    {
        "rowid": 21301,
        "name": "ConstrBuilder()",
        "description": "摘要: ConstrBuilder()\n描述: 创建一个空的ConstrBuilder 类 对象。",
        "code": "# 创建一个空的线性约束构建器\nconstrbuilder = ConstrBuilder()"
    },
    {
        "rowid": 21302,
        "name": "ConstrBuilder.setBuilder()",
        "description": "摘要: setBuilder(expr, sense, rhs)\n描述: 设置线性约束构建器的表达式和约束类型。\n参量:\nexpr: 待设置表达式。可取值为Var 类 对象或LinExpr 类 对象。\nsense: 约束类型。可取值详见约束类型 部分。\nrhs: 约束右端项。",
        "code": "# 设置线性约束构建器的表达式为：x + y == 1\nconstrbuilder.setBuilder(x + y, COPT.EQUAL, 1)"
    },
    {
        "rowid": 21303,
        "name": "ConstrBuilder.getExpr()",
        "description": "摘要: getExpr()\n描述: 获取线性约束构建器对象的表达式。",
        "code": "# 获取线性约束构建器的表达式\nlinexpr = constrbuilder.getExpr()"
    },
    {
        "rowid": 21304,
        "name": "ConstrBuilder.getSense()",
        "description": "摘要: getSense()\n描述: 获取线性约束构建器对象的约束类型。",
        "code": "# 获取线性约束构建器的约束类型\nconsense = constrbuilder.getSense()"
    },
    {
        "rowid": 21401,
        "name": "ConstrBuilderArray()",
        "description": "摘要: ConstrBuilderArray(constrbuilders=None)\n描述: 创建一个ConstrBuilderArray 类 对象。若参数 constrbuilders 为 None，则创建一个空的ConstrBuilderArray 类 对象，否则以参数 constrbuilders 初始化新创建的ConstrBuilderArray 类 对象。\n参量:\nconstrbuilders: 待添加线性约束构建器。可选参量，默认为 None。可取值为ConstrBuilder 类 对象、ConstrBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的ConstrBuilderArray类对象\nconbuilderarr = ConstrBuilderArray()\n# 创建一个ConstrBuilderArray类对象，并使用构建器对象conbuilderx和conbuildery初始化\nconbuilderarr = ConstrBuilderArray([conbuilderx, conbuildery])"
    },
    {
        "rowid": 21402,
        "name": "ConstrBuilderArray.pushBack()",
        "description": "摘要: pushBack(constrbuilder)\n描述: 添加单个或多个ConstrBuilder 类 对象。\n参量:\nconstrbuilder: 待添加线性约束构建器。可取值为ConstrBuilder 类 对象、ConstrBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加线性约束构建器conbuilderx到conbuilderarr中\nconbuilderarr.pushBack(conbuilderx)\n# 添加线性约束构建器conbuilderx和conbuildery到conbuilderarr中\nconbuilderarr.pushBack([conbuilderx, conbuildery])"
    },
    {
        "rowid": 21403,
        "name": "ConstrBuilderArray.getBuilder()",
        "description": "摘要: getBuilder(idx)\n描述: 根据线性约束构建器在ConstrBuilderArray 类 对象中的下标获取相应的构建器对象。\n参量:\nidx: 线性约束构建器在ConstrBuilderArray 类 对象中的下标。起始为 0。",
        "code": "# 获取conbuilderarr中下标为1的构建器\nconbuilder = conbuilderarr.getBuilder(1)"
    },
    {
        "rowid": 21404,
        "name": "ConstrBuilderArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取ConstrBuilderArray 类 对象中元素的个数。",
        "code": "# 获取conbuilderarr中构建器的个数\narrsize = conbuilderarr.getSize()"
    },
    {
        "rowid": 21501,
        "name": "QConstraint.getName()",
        "description": "摘要: getName()\n描述: 获取二次约束的名称。",
        "code": "# 获取二次约束qcon的名称\nqconname = qcon.getName()"
    },
    {
        "rowid": 21502,
        "name": "QConstraint.getRhs()",
        "description": "摘要: getRhs()\n描述: 获取二次约束的右端项。",
        "code": "# 获取二次约束qcon的右端项\nqconrhs = qcon.getRhs()"
    },
    {
        "rowid": 21503,
        "name": "QConstraint.getSense()",
        "description": "摘要: getSense()\n描述: 获取二次约束的约束类型。",
        "code": "# 获取二次约束qcon的约束类型\nqconsense = qcon.getSense()"
    },
    {
        "rowid": 21504,
        "name": "QConstraint.getIdx()",
        "description": "摘要: getIdx()\n描述: 获取二次约束的下标。",
        "code": "# 获取二次约束qcon的下标\nqconidx = qcon.getIdx()"
    },
    {
        "rowid": 21505,
        "name": "QConstraint.setName()",
        "description": "摘要: setName(newname)\n描述: 设置二次约束的名称。\n参量:\nnewname: 二次约束的新名称。",
        "code": "# 设置二次约束qcon的名称\nqcon.setName('qcon')"
    },
    {
        "rowid": 21506,
        "name": "QConstraint.setRhs()",
        "description": "摘要: setRhs(rhs)\n描述: 设置二次约束的右端项。\n参量:\nrhs: 二次约束的新右端项。",
        "code": "# 设置二次约束qcon的右端项为0.0\nqcon.setRhs(0.0)"
    },
    {
        "rowid": 21507,
        "name": "QConstraint.setSense()",
        "description": "摘要: setSense(sense)\n描述: 设置二次约束的约束类型。\n参量:\nsense: 二次约束的新约束类型。",
        "code": "# 设置二次约束qcon的约束类型为小于等于\nqcon.setSense(COPT.LESS_EQUAL)"
    },
    {
        "rowid": 21508,
        "name": "QConstraint.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取指定的信息值，返回一个常数。\n参量:\ninfoname: 待获取信息名。可取值详见信息 部分。",
        "code": "# 获取二次约束qcon的当前取值\nqconlb = qcon.getInfo(COPT.Info.Slack)"
    },
    {
        "rowid": 21509,
        "name": "QConstraint.setInfo()",
        "description": "摘要: setInfo(infoname, newval)\n描述: 设置新的信息值给指定二次约束。\n参量:\ninfoname: 待设置信息名。可取值详见信息 部分。\nnewval: 待设置新信息值。",
        "code": "# 设置二次约束qcon的下界\nqcon.setInfo(COPT.Info.LB, 1.0)"
    },
    {
        "rowid": 21510,
        "name": "Constraint.remove()",
        "description": "摘要: remove()\n描述: 从模型中删除当前二次约束。",
        "code": "# 删除二次约束qconx\nqconx.remove()"
    },
    {
        "rowid": 21601,
        "name": "QConstrArray()",
        "description": "摘要: QConstrArray(qconstrs=None)\n描述: 创建一个QConstrArray 类 对象。若参数 qconstrs 为 None，则创建一个空的QConstrArray 类 对象，否则以参数 qconstrs 初始化新创建的QConstrArray 类 对象。\n参量:\nqconstrs: 待添加二次约束。可选参量，默认为 None。可取值为QConstraint 类 对象、QConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的QConstrArray类对象\nqconarr = QConstrArray()\n# 创建一个QConstrArray类对象，并使用二次约束qconx和qcony初始化\nqconarr = QConstrArray([qconx, qcony])"
    },
    {
        "rowid": 21602,
        "name": "QConstrArray.pushBack()",
        "description": "摘要: pushBack(constr)\n描述: 添加单个或多个QConstraint 类 对象。\n参量:\nconstr: 待添加二次约束。可取值为QConstraint 类 对象、QConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加二次约束qr到qconarr中\nqconarr.pushBack(qr)\n# 添加二次约束qr0和qr1到qconarr中\nqconarr.pushBack([qr0, qr1])"
    },
    {
        "rowid": 21603,
        "name": "QConstrArray.getQConstr()",
        "description": "摘要: getQConstr(idx)\n描述: 根据二次约束在QConstrArray 类 对象中的下标获取相应的二次约束，返回一个QConstraint 类 对象。\n参量:\nidx: 二次约束在QConstrArray 类 对象中的下标。起始为 0。",
        "code": "# 获取qconarr中下标为1的二次约束\nqcon = qconarr.getQConstr(1)"
    },
    {
        "rowid": 21604,
        "name": "QConstrArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取QConstrArray 类 对象中元素的个数。",
        "code": "# 获取qconarr中二次约束的个数\nqarrsize = qconarr.getSize()"
    },
    {
        "rowid": 21701,
        "name": "QConstrBuilder()",
        "description": "摘要: QConstrBuilder()\n描述: 创建一个空的QConstrBuilder 类 对象。",
        "code": "# 创建一个空的二次约束构建器\nqconstrbuilder = QConstrBuilder()"
    },
    {
        "rowid": 21702,
        "name": "QConstrBuilder.setBuilder()",
        "description": "摘要: setBuilder(expr, sense, rhs)\n描述: 设置二次约束构建器的表达式、约束类型和右端项。\n参量:\nexpr: 待设置表达式。可取值为Var 类 对象、LinExpr 类 对象或QuadExpr 类 对象。\nsense: 二次约束类型。可取值详见约束类型 部分。\nrhs: 二次约束右端项。",
        "code": "# 设置二次约束构建器的表达式为：x + y，约束类型为小于等于，右端项为1.0\nqconstrbuilder.setBuilder(x + y, COPT.LESS_EQUAL, 1.0)"
    },
    {
        "rowid": 21703,
        "name": "QConstrBuilder.getQuadExpr()",
        "description": "摘要: getQuadExpr()\n描述: 获取二次约束构建器对象的表达式。",
        "code": "# 获取二次约束构建器的表达式\nquadexpr = constrbuilder.getQuadExpr()"
    },
    {
        "rowid": 21704,
        "name": "QConstrBuilder.getSense()",
        "description": "摘要: getSense()\n描述: 获取二次约束构建器对象的约束类型。",
        "code": "# 获取二次约束构建器的约束类型\nqconsense = qconstrbuilder.getSense()"
    },
    {
        "rowid": 21801,
        "name": "QConstrBuilderArray()",
        "description": "摘要: QConstrBuilderArray(qconstrbuilders=None)\n描述: 创建一个QConstrBuilderArray 类 对象。若参数 qconstrbuilders 为 None，则创建一个空的QConstrBuilderArray 类 对象，否则以参数 qconstrbuilders 初始化新创建的QConstrBuilderArray 类 对象。\n参量:\nqconstrbuilders: 待添加二次约束构建器。可选参量，默认为 None。可取值为QConstrBuilder 类 对象、QConstrBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的QConstrBuilderArray类对象\nqconbuilderarr = QConstrBuilderArray()\n# 创建一个QConstrBuilderArray类对象，并使用构建器对象qconbuilderx和qconbuildery初始化\nqconbuilderarr = QConstrBuilderArray([qconbuilderx, qconbuildery])"
    },
    {
        "rowid": 21802,
        "name": "QConstrBuilderArray.pushBack()",
        "description": "摘要: pushBack(qconstrbuilder)\n描述: 添加单个或多个QConstrBuilder 类 对象。\n参量:\nqconstrbuilder: 待添加二次约束构建器。可取值为QConstrBuilder 类 对象、QConstrBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加二次约束构建器qconbuilderx到qconbuilderarr中\nqconbuilderarr.pushBack(qconbuilderx)\n# 添加二次约束构建器qconbuilderx和qconbuildery到qconbuilderarr中\nqconbuilderarr.pushBack([qconbuilderx, qconbuildery])"
    },
    {
        "rowid": 21803,
        "name": "QConstrBuilderArray.getBuilder()",
        "description": "摘要: getBuilder(idx)\n描述: 根据二次约束构建器在QConstrBuilderArray 类 对象中的下标获取相应的构建器对象。\n参量:\nidx: 二次约束构建器在QConstrBuilderArray 类 对象中的下标。起始为 0。",
        "code": "# 获取qconbuilderarr中下标为1的构建器\nqconbuilder = qconbuilderarr.getBuilder(1)"
    },
    {
        "rowid": 21804,
        "name": "QConstrBuilderArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取QConstrBuilderArray 类 对象中元素的个数。",
        "code": "# 获取qconbuilderarr中构建器的个数\nqarrsize = qconbuilderarr.getSize()"
    },
    {
        "rowid": 21901,
        "name": "PsdConstraint.getName()",
        "description": "摘要: getName()\n描述: 获取半定约束的名称。",
        "code": "# 获取半定约束con的名称\nconname = con.getName()"
    },
    {
        "rowid": 21902,
        "name": "PsdConstraint.getIdx()",
        "description": "摘要: getIdx()\n描述: 获取半定约束在模型中的下标。",
        "code": "# 获取半定约束con的下标\nconidx = con.getIdx()"
    },
    {
        "rowid": 21903,
        "name": "PsdConstraint.setName()",
        "description": "摘要: setName(newname)\n描述: 设置半定约束的名称。\n参量:\nnewname: 半定约束的新名称。",
        "code": "# 设置半定约束con的名称\ncon.setName('con')"
    },
    {
        "rowid": 21904,
        "name": "PsdConstraint.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取指定的信息值，返回一个常数。\n参量:\ninfoname: 待获取信息名。可取值详见信息 部分。",
        "code": "# 获取半定约束con的下界\nconlb = con.getInfo(COPT.Info.LB)"
    },
    {
        "rowid": 21905,
        "name": "PsdConstraint.setInfo()",
        "description": "摘要: setInfo(infoname, newval)\n描述: 设置新的信息值给指定半定约束。\n参量:\ninfoname: 待设置信息名。可取值详见信息 部分。\nnewval: 待设置新信息值。",
        "code": "# 设置半定约束con的下界\ncon.setInfo(COPT.Info.LB, 1.0)"
    },
    {
        "rowid": 21906,
        "name": "PsdConstraint.remove()",
        "description": "摘要: remove()\n描述: 从模型中删除当前半定约束。",
        "code": "# 删除半定约束conx\nconx.remove()"
    },
    {
        "rowid": 22001,
        "name": "PsdConstrArray()",
        "description": "摘要: PsdConstrArray(constrs=None)\n描述: 创建一个PsdConstrArray 类 对象。若参数 constrs 为 None，则创建一个空的PsdConstrArray 类 对象，否则以参数 constrs 初始化新创建的PsdConstrArray 类 对象。\n参量:\nconstrs: 待添加半定约束。可选参量，默认为 None。可取值为PsdConstraint 类 对象、PsdConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的PsdConstrArray类对象\nconarr = PsdConstrArray()\n# 创建一个PsdConstrArray类对象，并使用半定约束conx和cony初始化\nconarr = PsdConstrArray([conx, cony])"
    },
    {
        "rowid": 22002,
        "name": "PsdConstrArray.pushBack()",
        "description": "摘要: pushBack(constr)\n描述: 添加单个或多个PsdConstraint 类 对象。\n参量:\nconstr: 待添加半定约束。可取值为PsdConstraint 类 对象、PsdConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加半定约束r到conarr中\nconarr.pushBack(r)\n# 添加半定约束r0和r1到conarr中\nconarr.pushBack([r0, r1])"
    },
    {
        "rowid": 22003,
        "name": "PsdConstrArray.getPsdConstr()",
        "description": "摘要: getPsdConstr(idx)\n描述: 根据半定约束在PsdConstrArray 类 对象中的下标获取相应的半定约束，返回一个PsdConstraint 类 对象。\n参量:\nidx: 半定约束在PsdConstrArray 类 对象中的下标。起始为 0。",
        "code": "# 获取conarr中下标为1的半定约束\ncon = conarr.getPsdConstr(1)"
    },
    {
        "rowid": "22004",
        "name": "PsdConstrArray.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取PsdConstrArray 类 对象中元素的个数。",
        "code": "# 获取conarr中半定约束的个数\narrsize = conarr.getSize()"
    },
    {
        "rowid": "22101",
        "name": "PsdConstrBuilder()",
        "description": "摘要\nPsdConstrBuilder()\n描述\n创建一个空的PsdConstrBuilder 类 对象。",
        "code": "# 创建一个空的半定约束构建器\nconstrbuilder = PsdConstrBuilder()"
    },
    {
        "rowid": "22102",
        "name": "PsdConstrBuilder.setBuilder()",
        "description": "摘要\nsetBuilder(expr, sense, rhs)\n描述\n设置半定约束构建器的表达式、约束类型和右端项。\n参量\nexpr\n待设置表达式。可取值为PsdVar 类 对象或PsdExpr 类 对象。\nsense\n约束类型。可取值详见约束类型 部分。\nrhs\n约束右端项。",
        "code": "# 设置半定约束构建器的表达式为：x + y == 1，约束类型为等于\nconstrbuilder.setBuilder(x + y, COPT.EQUAL, 1)"
    },
    {
        "rowid": "22103",
        "name": "PsdConstrBuilder.setRange()",
        "description": "摘要\nsetRange(expr, range)\n描述\n设置半定约束构建器的表达式和右端项, 形式为 expr 小于等于 0, 且大于等于 -\nrange.\n参量\nexpr\n待设置表达式。可取值为PsdVar 类 对象或PsdExpr 类 对象。\nrange\nRange 约束的右端项, 非负。",
        "code": "# 设置半定约束构建器的表达式为：x + y - 1，range右端项为1\nconstrbuilder.setRange(x + y - 1, 1)"
    },
    {
        "rowid": "22104",
        "name": "PsdConstrBuilder.getPsdExpr()",
        "description": "摘要\ngetPsdExpr()\n描述\n获取半定约束构建器对象的表达式。",
        "code": "# 获取半定约束构建器的表达式\npsdexpr = constrbuilder.getPsdExpr()"
    },
    {
        "rowid": "22105",
        "name": "PsdConstrBuilder.getSense()",
        "description": "摘要\ngetSense()\n描述\n获取半定约束构建器对象的约束类型。",
        "code": "# 获取线性约束构建器的约束类型\nconsense = constrbuilder.getSense()"
    },
    {
        "rowid": "22106",
        "name": "PsdConstrBuilder.getRange()",
        "description": "摘要\ngetRange()\n描述\n获取半定约束构建器对象的 range 右端项, 即约束上下界之差。",
        "code": "# 获取线性约束构建器的range右端项\nrngval = constrbuilder.getRange()"
    },
    {
        "rowid": "22201",
        "name": "PsdConstrBuilderArray()",
        "description": "摘要\nPsdConstrBuilderArray(builders=None)\n描述\n创建一个PsdConstrBuilderArray 类 对象。\n若参数 builders 为 None，则创建一个空的PsdConstrBuilderArray 类 对象，否则\n以参数 builders 初始化新创建的\nPsdConstrBuilderArray 类 对象。\n参量\nbuilders\n待添加半定约束构建器。可选参量，默认为 None。可取值为PsdConstrBuilder 类 对象、PsdConstrBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的PsdConstrBuilderArray类对象\nconbuilderarr = PsdConstrBuilderArray()\n# 创建一个PsdConstrBuilderArray类对象，并使用构建器对象conbuilderx和conbuildery初始化\nconbuilderarr = PsdConstrBuilderArray([conbuilderx, conbuildery])"
    },
    {
        "rowid": "22202",
        "name": "PsdConstrBuilderArray.pushBack()",
        "description": "摘要\npushBack(builder)\n描述\n添加单个或多个PsdConstrBuilder 类 对象。\n参量\nbuilder\n待添加半定约束构建器。可取值为PsdConstrBuilder 类 对象、PsdConstrBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加半定约束构建器conbuilderx到conbuilderarr中\nconbuilderarr.pushBack(conbuilderx)\n# 添加半定约束构建器conbuilderx和conbuildery到conbuilderarr中\nconbuilderarr.pushBack([conbuilderx, conbuildery])"
    },
    {
        "rowid": "22203",
        "name": "PsdConstrBuilderArray.getBuilder()",
        "description": "摘要\ngetBuilder(idx)\n描述\n根据半定约束构建器在PsdConstrBuilderArray 类 对象中的下标获取相应的构建器\n对象。\n参量\nidx\n半定约束构建器在PsdConstrBuilderArray 类 对象中的下标。起始为 0。",
        "code": "# 获取conbuilderarr中下标为1的构建器\nconbuilder = conbuilderarr.getBuilder(1)"
    },
    {
        "rowid": "22204",
        "name": "PsdConstrBuilderArray.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取PsdConstrBuilderArray 类 对象中元素的个数。",
        "code": "# 获取conbuilderarr中构建器的个数\narrsize = conbuilderarr.getSize()"
    },
    {
        "rowid": "22301",
        "name": "LmiConstraint.getName()",
        "description": "摘要\ngetName()\n描述\n获取 LMI 约束的名称。",
        "code": "# 获取LMI约束con的名称\nconname = con.getName()"
    },
    {
        "rowid": "22302",
        "name": "LmiConstraint.getIdx()",
        "description": "摘要\ngetIdx()\n描述\n获取 LMI 约束在模型中的下标。",
        "code": "# 获取LMI约束con的下标\nconidx = con.getIdx()"
    },
    {
        "rowid": "22303",
        "name": "LmiConstraint.getDim()",
        "description": "摘要\ngetDim()\n描述\n获取 LMI 约束的维度。",
        "code": "# 获取LMI约束con的维度\nconidx = con.getDim()"
    },
    {
        "rowid": "22304",
        "name": "LmiConstraint.getLen()",
        "description": "摘要\ngetLen()\n描述\n获取 LMI 约束展开后的长度。",
        "code": "# 获取LMI约束展开后的长度\nconidx = con.getLen()"
    },
    {
        "rowid": "22305",
        "name": "LmiConstraint.setName()",
        "description": "摘要\nsetName(newname)\n描述\n设置 LMI 约束的名称。\n参量\nnewname\nLMI 约束的新名称。",
        "code": "# 设置LMI约束con的名称\ncon.setName('con')"
    },
    {
        "rowid": "22306",
        "name": "LmiConstraint.setRhs()",
        "description": "摘要\nsetRhs(mat)\n描述\n设置 LMI 约束的常数项对称矩阵。\n参量\nmat\nLMI 约束的常数项对称矩阵，需要为SymMatrix 类 类对象。",
        "code": "# 设置LMI约束con的常数项对称矩阵\nD = m.addSparseMat(2, [0, 1], [0, 1], [1.0, 1.0])\ncon.setRhs(D)"
    },
    {
        "rowid": "22307",
        "name": "LmiConstraint.getInfo()",
        "description": "摘要\ngetInfo(infoname)\n描述\n获取 LMI 约束指定信息 infoname 的取值。\n参量\ninfoname\n待获取信息名。可取值为 \"Slack\" 或 \"Dual\" 。",
        "code": "# 获取LMI约束con松弛变量的取值\ncon_slack = con.getInfo(\"Slack\")\n# 获取LMI约束con的对偶变量取值\ncon_dual = con.getInfo(\"Dual\")"
    },
    {
        "rowid": "22308",
        "name": "LmiConstraint.remove()",
        "description": "摘要\nremove()\n描述\n从模型中删除当前 LMI 约束。",
        "code": "# 删除LMI约束conx\nconx.remove()"
    },
    {
        "rowid": "22309",
        "name": "LmiConstraint.shape",
        "description": "摘要\nshape\n描述\nLmiConstraint 对象的形状。\n返回值\n整型元组。",
        "code": ""
    },
    {
        "rowid": "22310",
        "name": "LmiConstraint.size",
        "description": "摘要\nsize\n描述\nLmiConstraint 对象的形状。\n返回值\n整型元组。",
        "code": ""
    },
    {
        "rowid": "22311",
        "name": "LmiConstraint.dim",
        "description": "摘要\ndim\n描述\nLmiConstraint 对象的维度。\n返回值\n整型值。",
        "code": ""
    },
    {
        "rowid": "22312",
        "name": "LmiConstraint.len",
        "description": "摘要\nlen\n描述\nLmiConstraint 对象展开后的长度。\n返回值\n整型值。",
        "code": ""
    },
    {
        "rowid": "22401",
        "name": "LmiConstrArray()",
        "description": "摘要\nLmiConstrArray(constrs=None)\n描述\n创建一个LmiConstrArray 类 对象。\n若参数 constrs 为 None，则创建一个空的LmiConstrArray 类 对象，否则以参数\nconstrs 初始化新创建的LmiConstrArray 类 对象。\n参量\nconstrs\n待添加的 LMI 约束。可选参量，默认为 None。可取值为LmiConstraint 类 对象、LmiConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的LmiConstrArray类对象\nconarr = LmiConstrArray()\n# 创建一个LmiConstrArray类对象，并使用LMI约束conx和cony初始化\nconarr = LmiConstrArray([conx, cony])"
    },
    {
        "rowid": "22402",
        "name": "LmiConstrArray.pushBack()",
        "description": "摘要\npushBack(constr)\n描述\n向 LmiConstrArray 中添加单个或多个LmiConstraint 类 对象。\n参量\nconstr\n待添加 LMI 约束。可取值为LmiConstraint 类 对象、LmiConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加LMI约束r到conarr中\nconarr.pushBack(r)\n# 添加LMI约束r0和r1到conarr中\nconarr.pushBack([r0, r1])"
    },
    {
        "rowid": "22403",
        "name": "LmiConstrArray.getLmiConstr()",
        "description": "摘要\ngetLmiConstr(idx)\n描述\n根据 LMI 约束在LmiConstrArray 类 对象中的下标获取相应的 LMI 约束，返回一\n个LmiConstraint 类 对象。\n参量\nidx\nLMI 约束在LmiConstrArray 类 对象中的下标。起始为 0。",
        "code": "# 获取conarr中下标为1的LMI约束\ncon = conarr.getLmiConstr(1)"
    },
    {
        "rowid": "22404",
        "name": "LmiConstrArray.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取LmiConstrArray 类 对象中元素的个数。",
        "code": "# 获取conarr中Lmi约束的个数\narrsize = conarr.getSize()"
    },
    {
        "rowid": "22405",
        "name": "LmiConstrArray.reserve()",
        "description": "摘要\nreserve(n)\n描述\n为大小为 n 的LmiConstrArray 类 对象保留空间。\n参量\nn\nLmiConstrArray 类 对象中元素的个数。",
        "code": ""
    },
    {
        "rowid": "22501",
        "name": "SOS.getIdx()",
        "description": "摘要\ngetIdx()\n描述\n获取 SOS 约束在模型中的下标。",
        "code": "# 获取SOS约束sosx的下标\nsosidx = sosx.getIdx()"
    },
    {
        "rowid": "22502",
        "name": "SOS.remove()",
        "description": "摘要\nremove()\n描述\n从模型中删除当前 SOS 约束。",
        "code": "# 删除SOS约束sosx\nsosx.remove()"
    },
    {
        "rowid": "22601",
        "name": "SOSArray()",
        "description": "摘要\nSOSArray(soss=None)\n描述\n创建一个SOSArray 类 对象。\n若参数 soss 为 None，则创建一个空的SOSArray 类 对象，否则以参数 soss 初始\n化新创建的SOSArray 类 对象。\n参量\nsoss\n待添加 SOS 约束。可选参量，默认为 None。可取值为SOS 类 对象、SOSArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个新的SOSArray对象\nsosarr = SOSArray()\n# 创建一个SOSArray对象，并使用SOS约束sosx和sosy初始化\nsosarr = SOSArray([sosx, sosy])"
    },
    {
        "rowid": "22602",
        "name": "SOSArray.pushBack()",
        "description": "摘要\npushBack(sos)\n描述\n添加单个或多个SOS 类 对象。\n参量\nsos\n待添加 SOS 约束。可取值为SOS 类 对象、SOSArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加SOS约束sosx到sosarr中\nsosarr.pushBack(sosx)\n# 添加SOS约束sosx和sosy到sosarr中\nsosarr.pushBack([sosx, sosy])"
    },
    {
        "rowid": "22603",
        "name": "SOSArray.getSOS()",
        "description": "摘要\ngetSOS(idx)\n描述\n根据 SOS 约束在SOSArray 类 对象中的下标获取相应的 SOS 约束，返回一个SOS\n类 对象。\n参量\nidx\nSOS 约束在SOSArray 类 对象中的下标。起始为 0。",
        "code": "# 获取sosarr中下标为1的SOS约束\nsos = sosarr.getSOS(1)"
    },
    {
        "rowid": "22604",
        "name": "SOSArray.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取SOSArray 类 对象中元素的个数。",
        "code": "# 获取sosarr中SOS约束的个数\narrsize = sosarr.getSize()"
    },
    {
        "rowid": "22701",
        "name": "SOSBuilder()",
        "description": "摘要\nSOSBuilder()\n描述\n创建一个空的SOSBuilder 类 对象。",
        "code": "# 创建一个空的SOSBuilder对象\nsosbuilder = SOSBuilder()"
    },
    {
        "rowid": "22702",
        "name": "SOSBuilder.setBuilder()",
        "description": "摘要\nsetBuilder(sostype, vars, weights=None)\n描述\n设置SOSBuilder 类 对象的类型、变量和变量权重。\n参量\nsostype\nSOS 约束类型，可取值详见SOS 约束类型 。\nvars\nSOS 约束的变量，可取值为VarArray 类 对象、列表、字典或tupledict 类 对象。\nweights\nSOS 约束的变量的权重。可选取值，默认为 None。可取值为列表、字典或tupledict 类 对象。",
        "code": "# 设置SOS约束构建器的类型为SOS1，变量为x和y，变量的权重分别为1和2\nsosbuilder.setBuilder(COPT.SOS_TYPE1, [x, y], [1, 2])"
    },
    {
        "rowid": "22703",
        "name": "SOSBuilder.getType()",
        "description": "摘要\ngetType()\n描述\n获取SOSBuilder 类 对象的 SOS 约束类型。",
        "code": "# 获取SOS约束构建器sosx的类型\nsostype = sosbuilder.getType(sosx)"
    },
    {
        "rowid": "22704",
        "name": "SOSBuilder.getVar()",
        "description": "摘要\ngetVar(idx)\n描述\n根据变量在SOSBuilder 类 对象的下标获取相应的变量，返回一个Var 类 对象。\n参量\nidx\n变量在SOSBuilder 类 对象中的下标。起始为 0。",
        "code": "# 获取SOS约束构建器sosx中下标为1的变量\nsosvar = sosx.getVar(1)"
    },
    {
        "rowid": "22705",
        "name": "SOSBuilder.getVars()",
        "description": "摘要\ngetVars()\n描述\n获取SOSBuilder 类 对象的所有变量，返回一个VarArray 类 对象。",
        "code": "# 获取SOS约束构建器sosx中的所有变量\nsosvars = sosx.getVars()"
    },
    {
        "rowid": "22706",
        "name": "SOSBuilder.getWeight()",
        "description": "摘要\ngetWeight(idx)\n描述\n根据变量在SOSBuilder 类 对象的下标获取相应的变量权重。\n参量\nidx\n变量在SOSBuilder 类 对象中的下标。起始为 0。",
        "code": "# 获取SOS约束构建器sosx中下标为1的变量相应的权重\nsosweight = sosx.getWeight(1)"
    },
    {
        "rowid": "22707",
        "name": "SOSBuilder.getWeights()",
        "description": "摘要\ngetWeights()\n描述\n获取SOSBuilder 类 对象中所有变量的权重。",
        "code": "# 获取SOS约束构建器sosx中所有变量的权重\nsosweights = sosx.getWeights()"
    },
    {
        "rowid": "22708",
        "name": "SOSBuilder.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取SOSBuilder 类 对象中元素的个数。",
        "code": "# 获取SOS约束构建器sosx中元素的个数\nsossize = sosx.getSize()"
    },
    {
        "rowid": "22801",
        "name": "SOSBuilderArray()",
        "description": "摘要\nSOSBuilderArray(sosbuilders=None)\n描述\n创建一个SOSBuilderArray 类 对象。\n若参数 sosbuilders 为 None，则创建一个空的SOSBuilderArray 类 对象，否则以\n参数 sosbuilders 初始化新创建的SOSBuilderArray 类 对象。\n参量\nsosbuilders\n待添加 SOS 约束构建器。可选参量，默认为 None。可取值为SOSBuilder 类 对象、SOSBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的SOSBuilderArray对象\nsosbuilderarr = SOSBuilderArray()\n# 创建一个SOSBuilderArray对象，并使用SOS约束构建器sosx和sosy初始化\nsosbuilderarr = SOSBuilderArray([sosx, sosy])"
    },
    {
        "rowid": "22802",
        "name": "SOSBuilderArray.pushBack()",
        "description": "摘要\npushBack(sosbuilder)\n描述\n添加单个或多个SOSBuilder 类 对象。\n参量\nsosbuilder\n待添加 SOS 约束构建器。可取值为SOSBuilder 类 对象、SOSBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加SOS约束构建器sosx到sosbuilderarr中\nsosbuilderarr.pushBack(sosx)"
    },
    {
        "rowid": "22803",
        "name": "SOSBuilderArray.getBuilder()",
        "description": "摘要\ngetBuilder(idx)\n描述\n根据 SOS 约束构建器在SOSBuilderArray 类 对象中的下标获取相应的构建器。\n参量\nidx\nSOS 约束构建器在SOSBuilderArray 类 对象中的下标。起始为 0。",
        "code": "# 获取sosbuilderarr中下标为1的SOS约束构建器\nsosbuilder = sosbuilderarr.getBuilder(1)"
    },
    {
        "rowid": "22804",
        "name": "SOSBuilderArray.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取SOSBuilderArray 类 对象中元素的个数。",
        "code": "# 获取sosbuilderarr中元素的个数\nsosbuildersize = sosbuilderarr.getSize()"
    },
    {
        "rowid": "22901",
        "name": "Cone.getIdx()",
        "description": "摘要\ngetIdx()\n描述\n获取二阶锥约束在模型中的下标。",
        "code": "# 获取二阶锥约束cone的下标\nconeidx = cone.getIdx()"
    },
    {
        "rowid": "22902",
        "name": "Cone.remove()",
        "description": "摘要\nremove()\n描述\n从模型中删除当前二阶锥约束。",
        "code": "# 删除二阶锥约束cone\ncone.remove()"
    },
    {
        "rowid": "23001",
        "name": "ConeArray()",
        "description": "摘要\nConeArray(cones=None)\n描述\n创建一个ConeArray 类 对象。\n若参数 cones 为 None，则创建一个空的ConeArray 类 对象，否则以参数 cones 初\n始化新创建的ConeArray 类 对象。\n参量\ncones\n待添加二阶锥约束。可选参量，默认为 None。可取值为Cone 类 对象、ConeArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个新的ConeArray对象\nconearr = ConeArray()\n# 创建一个ConeArray对象，并使用二阶锥约束conex和coney初始化\nconearr = ConeArray([conex, coney])"
    },
    {
        "rowid": "23002",
        "name": "ConeArray.pushBack()",
        "description": "摘要\npushBack(cone)\n描述\n添加单个或多个Cone 类 对象。\n参量\ncone\n待添加二阶锥约束。可取值为Cone 类 对象、ConeArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加二阶锥约束conex到conearr中\nconearr.pushBack(conex)\n# 添加二阶锥约束conex和coney到conearr中\nconearr.pushBack([conex, coney])"
    },
    {
        "rowid": "23003",
        "name": "ConeArray.getCone()",
        "description": "摘要\ngetCone(idx)\n描述\n根据二阶锥约束在ConeArray 类 对象中的下标获取相应的二阶锥约束，返回一\n个Cone 类 对象。\n参量\nidx\n二阶锥约束在ConeArray 类 对象中的下标。起始为 0。",
        "code": "# 获取conearr中下标为1的二阶锥约束\ncone = conearr.getCone(1)"
    },
    {
        "rowid": "23004",
        "name": "ConeArray.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取ConeArray 类 对象中元素的个数。",
        "code": "# 获取conearr中二阶锥约束的个数\narrsize = conearr.getSize()"
    },
    {
        "rowid": "23101",
        "name": "ConeBuilder()",
        "description": "摘要\nConeBuilder()\n描述\n创建一个空的ConeBuilder 类 对象。",
        "code": "# 创建一个空的ConeBuilder对象\nconebuilder = ConeBuilder()"
    },
    {
        "rowid": "23102",
        "name": "ConeBuilder.setBuilder()",
        "description": "摘要\nsetBuilder(conetype, vars)\n描述\n设置ConeBuilder 类 对象的类型、变量。\n参量\nconetype\n二阶锥约束类型，可取值详见二阶锥约束类型 。\nvars\n二阶锥约束的变量，可取值为VarArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 设置二阶锥约束构建器的类型为标准二阶锥\nconebuilder.setBuilder(COPT.CONE_QUAD, [z, x, y])"
    },
    {
        "rowid": "23103",
        "name": "ConeBuilder.getType()",
        "description": "摘要\ngetType()\n描述\n获取ConeBuilder 类 对象的二阶锥约束类型。",
        "code": "# 获取二阶锥约束构建器conex的类型\nconetype = conebuilder.getType(conex)"
    },
    {
        "rowid": 23104,
        "name": "ConeBuilder.getVar()",
        "description": "getVar(idx)\n根据变量在ConeBuilder 类 对象的下标获取相应的变量，返回一个Var 类 对象。\n参量\nidx\n变量在ConeBuilder 类 对象中的下标。起始为 0。",
        "code": "# 获取二阶锥约束构建器conex中下标为1的变量\nconevar = conex.getVar(1)"
    },
    {
        "rowid": 23105,
        "name": "ConeBuilder.getVars()",
        "description": "getVars()\n获取ConeBuilder 类 对象的所有变量，返回一个VarArray 类 对象。",
        "code": "# 获取二阶锥约束构建器conex中的所有变量\nconevars = conex.getVars()"
    },
    {
        "rowid": 23106,
        "name": "ConeBuilder.getSize()",
        "description": "getSize()\n获取ConeBuilder 类 对象中元素的个数。",
        "code": "# 获取二阶锥约束构建器conex中元素的个数\nconesize = conex.getSize()"
    },
    {
        "rowid": 23201,
        "name": "ConeBuilderArray()",
        "description": "ConeBuilderArray(conebuilders=None)\n创建一个ConeBuilderArray 类 对象。\n若参数 conebuilders 为 None，则创建一个空的ConeBuilderArray 类 对象，否则\n以参数 conebuilders 初始化新创建的ConeBuilderArray 类 对象。\n参量\nconebuilders\n待添加二阶锥约束构建器。可选参量，默认为 None。可取值为ConeBuilder\n类 对象、ConeBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的ConeBuilderArray对象\nconebuilderarr = ConeBuilderArray()\n# 创建一个ConeBuilderArray对象，并使用二阶锥约束构建器conex和coney初始化\nconebuilderarr = ConeBuilderArray([conex, coney])"
    },
    {
        "rowid": 23202,
        "name": "ConeBuilderArray.pushBack()",
        "description": "pushBack(ConeBuilder)\n添加单个或多个ConeBuilder 类 对象。\n参量\nConeBuilder\n待添加二阶锥约束构建器。可取值为ConeBuilder 类 对象、ConeBuilder-\nArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加二阶锥约束构建器conex到conebuilderarr中\nconebuilderarr.pushBack(conex)"
    },
    {
        "rowid": 23203,
        "name": "ConeBuilderArray.getBuilder()",
        "description": "getBuilder(idx)\n根据二阶锥约束构建器在ConeBuilderArray 类 对象中的下标获取相应的构建器。\n参量\nidx\n二阶锥约束构建器在ConeBuilderArray 类 对象中的下标。起始为 0。",
        "code": "# 获取conebuilderarr中下标为1的二阶锥约束构建器\nConeBuilder = conebuilderarr.getBuilder(1)"
    },
    {
        "rowid": 23204,
        "name": "ConeBuilderArray.getSize()",
        "description": "getSize()\n获取ConeBuilderArray 类 对象中元素的个数。",
        "code": "# 获取conebuilderarr中元素的个数\nconebuildersize = conex.getSize()"
    },
    {
        "rowid": 23301,
        "name": "ExpCone.getIdx()",
        "description": "getIdx()\n获取指数锥约束在模型中的下标。",
        "code": "# 获取指数锥约束expcone的下标\nconeidx = expcone.getIdx()"
    },
    {
        "rowid": 23302,
        "name": "ExpCone.remove()",
        "description": "remove()\n从模型中删除当前指数锥约束。",
        "code": "# 删除指数锥约束expcone\nexpcone.remove()"
    },
    {
        "rowid": 23401,
        "name": "ExpConeArray()",
        "description": "ExpConeArray(cones=None)\n创建一个ExpConeArray 类 对象。\n若参数 cones 为 None，则创建一个空的ExpConeArray 类 对象，否则以参数 cones\n初始化新创建的ExpConeArray 类 对象。\n参量\ncones\n待添加指数锥约束。可选参量，默认为 None。可取值为ExpCone 类 对象、\nExpConeArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个新的ExpConeArray对象\nconearr = ExpConeArray()\n# 创建一个ExpConeArray对象，并使用指数锥约束conex和coney初始化\nconearr = ExpConeArray([conex, coney])"
    },
    {
        "rowid": 23402,
        "name": "ExpConeArray.pushBack()",
        "description": "pushBack(cone)\n添加单个或多个ExpCone 类 对象。\n参量\ncone\n待添加指数锥约束。可取值为ExpCone 类 对象、ExpConeArray 类 对象、\n列表、字典或tupledict 类 对象。",
        "code": "# 添加指数锥约束conex到conearr中\nconearr.pushBack(conex)\n# 添加指数锥约束conex和coney到conearr中\nconearr.pushBack([conex, coney])"
    },
    {
        "rowid": 23403,
        "name": "ExpConeArray.getCone()",
        "description": "getCone(idx)\n根据指数锥约束在ExpConeArray 类 对象中的下标获取相应的指数锥约束，返回一\n个ExpCone 类 对象。\n参量\nidx\n指数锥约束在ExpConeArray 类 对象中的下标。起始为 0。",
        "code": "# 获取conearr中下标为1的指数锥约束\ncone = conearr.getCone(1)"
    },
    {
        "rowid": 23404,
        "name": "ExpConeArray.getSize()",
        "description": "getSize()\n获取ExpConeArray 类 对象中元素的个数。",
        "code": "# 获取conearr中指数锥约束的个数\narrsize = conearr.getSize()"
    },
    {
        "rowid": 23501,
        "name": "ExpConeBuilder()",
        "description": "ExpConeBuilder()\n创建一个空的ExpConeBuilder 类 对象。",
        "code": "# 创建一个空的ExpConeBuilder对象\nExpConeBuilder = ExpConeBuilder()"
    },
    {
        "rowid": 23502,
        "name": "ExpConeBuilder.setBuilder()",
        "description": "setBuilder(conetype, vars)\n设置ExpConeBuilder 类 对象的类型、变量。\n参量\nconetype\n指数锥约束类型，可取值详见指数锥约束类型 。\nvars\n指数锥约束的变量，可取值为VarArray 类 对象、列表、字典或tupledict 类\n对象。",
        "code": "# 设置指数锥约束构建器的类型为原始指数锥\nExpConeBuilder.setBuilder(COPT.EXPCONE_PRIMAL, [z, x, y])"
    },
    {
        "rowid": 23503,
        "name": "ExpConeBuilder.getType()",
        "description": "getType()\n获取ExpConeBuilder 类 对象的指数锥约束类型。",
        "code": "# 获取指数锥约束构建器conex的类型\nconetype = ExpConeBuilder.getType(conex)"
    },
    {
        "rowid": 23504,
        "name": "ExpConeBuilder.getVar()",
        "description": "getVar(idx)\n根据变量在ExpConeBuilder 类 对象的下标获取相应的变量，返回一个Var 类 对象。\n参量\nidx\n变量在ExpConeBuilder 类 对象中的下标。起始为 0。",
        "code": "# 获取指数锥约束构建器conex中下标为1的变量\nconevar = conex.getVar(1)"
    },
    {
        "rowid": 23505,
        "name": "ExpConeBuilder.getVars()",
        "description": "getVars()\n获取ExpConeBuilder 类 对象的所有变量，返回一个VarArray 类 对象。",
        "code": "# 获取指数锥约束构建器conex中的所有变量\nconevars = conex.getVars()"
    },
    {
        "rowid": 23506,
        "name": "ExpConeBuilder.getSize()",
        "description": "getSize()\n获取ExpConeBuilder 类 对象中元素的个数。",
        "code": "# 获取指数锥约束构建器conex中元素的个数\nconesize = conex.getSize()"
    },
    {
        "rowid": 23601,
        "name": "ExpConeBuilderArray()",
        "description": "ExpConeBuilderArray(ExpConeBuilders=None)\n创建一个ExpConeBuilderArray 类 对象。\n若参数 ExpConeBuilders 为 None，则创建一个空的ExpConeBuilderArray 类 对象，\n否则以参数 ExpConeBuilders 初始化新创建的ExpConeBuilderArray 类 对象。\n参量\nExpConeBuilders\n待 添 加 指 数 锥 约 束 构 建 器。 可 选 参 量， 默 认 为 None。 可 取 值\n为\nExpConeBuilder 类 对象、ExpConeBuilderArray 类 对象、列表、\n字典或tupledict 类 对象。",
        "code": "# 创建一个空的ExpConeBuilderArray对象\nExpConeBuilderarr = ExpConeBuilderArray()\n# 创建一个ExpConeBuilderArray对象，并使用指数锥约束构建器conex和coney初始化\nExpConeBuilderarr = ExpConeBuilderArray([conex, coney])"
    },
    {
        "rowid": 23602,
        "name": "ExpConeBuilderArray.pushBack()",
        "description": "pushBack(ExpExpConeBuilder)\n添加单个或多个ExpConeBuilder 类 对象。\n参量\nExpExpConeBuilder\n待添加指数锥约束构建器。可取值为ExpConeBuilder 类 对象、ExpConeB-\nuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加指数锥约束构建器conex到ExpConeBuilderarr中\nExpConeBuilderarr.pushBack(conex)"
    },
    {
        "rowid": 23603,
        "name": "ExpConeBuilderArray.getBuilder()",
        "description": "getBuilder(idx)\n根据指数锥约束构建器在ExpConeBuilderArray 类 对象中的下标获取相应的构建\n器。\n参量\nidx\n指数锥约束构建器在ExpConeBuilderArray 类 对象中的下标。起始为 0。",
        "code": "# 获取ExpConeBuilderarr中下标为1的指数锥约束构建器\nExpExpConeBuilder = ExpConeBuilderarr.getBuilder(1)"
    },
    {
        "rowid": 23604,
        "name": "ExpConeBuilderArray.getSize()",
        "description": "getSize()\n获取ExpConeBuilderArray 类 对象中元素的个数。",
        "code": "# 获取ExpConeBuilderarr中元素的个数\nExpConeBuildersize = ExpConeBuilderarr.getSize()"
    },
    {
        "rowid": 23701,
        "name": "AffineCone.getIdx()",
        "description": "getIdx()\n获取仿射锥约束在模型中的下标。",
        "code": "# 获取仿射锥约束afcone的下标\nafconeidx = afcone.getIdx()"
    },
    {
        "rowid": 23702,
        "name": "AffineCone.getName()",
        "description": "getName()\n获取仿射锥约束的名称。",
        "code": "# 获取仿射锥约束afcone的名称\nafconename = afcone.getName()"
    },
    {
        "rowid": 23703,
        "name": "AffineCone.setName()",
        "description": "setName(newname)\n设置仿射锥约束的名称。\n参量\nnewname\n仿射锥的名称。",
        "code": "# 设置仿射锥约束afcone的名称\nafcone.setName(\"afcone\")"
    },
    {
        "rowid": 23704,
        "name": "AffineCone.remove()",
        "description": "remove()\n从模型中删除当前仿射锥约束。",
        "code": "# 从模型中删除当前仿射锥afcone\nafcone.remove()"
    },
    {
        "rowid": 23801,
        "name": "AffineConeArray()",
        "description": "AffineConeArray(cones=None)\n创建一个AffineConeArray 类 对象。\n若参数 cones 为 None，则创建一个空的AffineConeArray 类 对象，否则以参数\ncones 初始化新创建的AffineConeArray 类 对象。\n参量\ncones\n待添加仿射锥约束。可选参量，默认为 None。可取值为AffineCone 类 对\n象、AffineConeArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的AffineConeArray对象\nafconearr = AffineConeArray()\n# 创建一个AffineConeArray对象，并使用仿射锥约束afconex和afconey初始化\nafconearr = AffineConeArray([afconex, afconey])"
    },
    {
        "rowid": 23802,
        "name": "AffineConeArray.pushBack()",
        "description": "pushBack(cone)\n添加单个或多个AffineCone 类 对象。\n参量\ncone\n待添加仿射锥约束。可取值为AffineCone 类 对象、AffineConeArray 类 对\n象、列表、字典或tupledict 类 对象。",
        "code": "# 添加仿射锥约束afconex到afconearr中\nafconearr.pushBack(afconex)\n# 添加仿射锥约束afconex和afconey到afconearr1中\nafconearr.pushBack([afconex, afconey])\n# 添加仿射锥约束afcone1和afcone2到afconearr2中\ndict_cone = {'AC': afcone1, 'CA': afcone2}\nafconearr2 = AffineConeArray({'AC': afcone1, 'CA': afcone2})"
    },
    {
        "rowid": 23803,
        "name": "AffineConeArray.getCone()",
        "description": "getCone(idx)\n根据仿射锥在AffineConeArray 类 对象中的下标获取相应的仿射锥约束，返回一\n个AffineCone 类 对象。\n参量\nidx\n仿射锥约束在AffineConeArray 类 对象中的下标。起始为 0。\n返回值",
        "code": "# 获取afconearr中下标为1的仿射锥约束\nafcone = afconearr.getCone(1)"
    },
    {
        "rowid": 23804,
        "name": "AffineConeArray.getSize()",
        "description": "getSize()\n获取AffineConeArray 类 对象中元素的个数。",
        "code": "# 获取afconearr中仿射锥约束的个数\narrsize = afconearr.getSize()"
    },
    {
        "rowid": 23901,
        "name": "AffineConeBuilder()",
        "description": "AffineConeBuilder()\n创建一个空的AffineConeBuilder 类 对象。",
        "code": "# 创建一个空的AffineConeBuilder对象\nafconebuilder = AffineConeBuilder()"
    },
    {
        "rowid": 23902,
        "name": "AffineConeBuilder.setBuilder()",
        "description": "setBuilder(conetype, exprs)\n设置仿射锥构建器。\n参量\nconetype\n仿射锥类型，可取值详见二阶锥约束类型 和指数锥约束类型 。\nexprs\n构成仿射锥的数学表达式，可取值为线性表达式或半定表达式。",
        "code": "# 设置仿射锥约束构建器的类型为标准二阶锥，由z, x+y, y构成\nafconebuilder = AffineConeBuilder()\nafconebuilder.setBuilder(COPT.CONE_QUAD, [z, x+y, y])"
    },
    {
        "rowid": 23903,
        "name": "AffineConeBuilder.hasPsdTerm()",
        "description": "hasPsdTerm()\n检查仿射锥构建器中是否含有半定项。\n返回值\nBool。如果取值为 False ，表示仿射锥的表达式里没有半定项。从而可以直接获取\n线性表达式。",
        "code": ""
    },
    {
        "rowid": 23904,
        "name": "AffineConeBuilder.getType()",
        "description": "getType()\n获取AffineConeBuilder 类 对象的仿射锥约束类型。",
        "code": "# \n获取仿射锥约束构建器\nafconex\n的类型\nafconetype = afconebuilder.getType(afconex)"
    },
    {
        "rowid": 23905,
        "name": "AffineConeBuilder.getExpr()",
        "description": "getExpr(idx)\n获取仿射锥约束构建器中指定下标的表达式。\n参量\nidx\n指定待获取表达式在仿射锥约束构建器中的下标。\n返回值\n若存在半定项，则返回 PsdExpr 对象；若不存在半定项，则返回 LinExpr 对象。",
        "code": "# 获取仿射锥约束构建器中下标为0的表达式\nexpr = afconstrbuilder.getExpr(0)"
    },
    {
        "rowid": 23906,
        "name": "AffineConeBuilder.getPsdExpr()",
        "description": "getPsdExpr(idx)\n获取仿射锥约束构建器中指定下标的半定表达式。\n参量\nidx\n指定待获取半定表达式在仿射锥约束构建器中的下标。\n返回值\n返回 PsdExpr 对象。",
        "code": "# 获取仿射锥约束构建器中下标为0的半定表达式\npsdexpr = afconstrbuilder.getPsdExpr(0)"
    },
    {
        "rowid": 23907,
        "name": "AffineConeBuilder.getExprs()",
        "description": "getExprs(idx=None)\n获取仿射锥约束构建器中指定序号的一组表达式。\n参量\nidx\n指定待获取表达式在仿射锥约束构建器中的下标。\n若 idx 为 None ，则返回仿射锥所有的表达式；若 idx 为 Python 列表对\n象，则返回仿射锥指定序号的一组表达式。\n返回值\n若存在半定项，则返回 PsdExpr 对象；若不存在半定项，则返回 LinExpr 对象。",
        "code": "# 获取仿射锥约束构建器中全部项的表达式\nallexprs = afconstrbuilder.getExprs()"
    },
    {
        "rowid": 23908,
        "name": "AffineConeBuilder.getPsdExprs()",
        "description": "getPsdExprs(idx=None)\n获取仿射锥约束构建器中指定序号的一组半定表达式。\n参量\nidx\n指定待获取半定表达式在仿射锥约束构建器中的下标。\n若 idx 为 None ，则返回仿射锥所有的半定表达式；若 idx 为 Python 列\n表对象，则返回仿射锥指定序号的一组半定表达式。\n返回值\n返回 PsdExpr 对象。",
        "code": "# 获取仿射锥约束构建器中全部的半定表达式\nallpsdexprs = afconstrbuilder.getPsdExprs()"
    },
    {
        "rowid": 23909,
        "name": "AffineConeBuilder.getSize()",
        "description": "getSize()\n获取仿射锥约束构建器中表达式的个数。",
        "code": "# 获取仿射锥约束构建器中表达式的个数\nafconesize = afconebuilder.getSize()"
    },
    {
        "rowid": 24001,
        "name": "AffineConeBuilderArray()",
        "description": "AffineConeBuilderArray(conebuilders=None)\n创建一个AffineConeBuilderArray 类 对象。\n若参数 conebuilders 为 None，则创建一个空的AffineConeBuilderArray 类 对象；\n否则以参数 conebuilders 初始化新创建的AffineConeBuilderArray 类 对象。\n参量\nconebuilders\n待 添 加 仿 射 锥 约 束 构 建 器。 可 选 参 量， 默 认 为 None。 可 取 值\n为AffineConeBuilder 类 对象、AffineConeBuilderArray 类 对象、列\n表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的AffineConeBuilderArray对象\nconebuilderarr = AffineConeBuilderArray()\n# 创建一个AffineConeBuilderArray对象，并使用仿射锥约束构建器conex和coney初始化\nconebuilderarr = AffineConeBuilderArray([conex, coney])"
    },
    {
        "rowid": 24002,
        "name": "AffineConeBuilderArray.pushBack()",
        "description": "pushBack(AffineConeBuilder)\n添加单个或多个AffineConeBuilder 类 对象。\n参量\nAffineConeBuilder\n待 添 加 仿 射 锥 约 束 构 建 器。 可 取 值 为AffineConeBuilder 类 对 象、\nAffineConeBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加仿射锥约束构建器afconex到afconebuilderarr中\nafconebuilderarr.pushBack(afconex)"
    },
    {
        "rowid": 24003,
        "name": "AffineConeBuilderArray.getBuilder()",
        "description": "getBuilder(idx)\n根据仿射锥约束构建器在AffineConeBuilderArray 类 对象中的下标获取相应的构\n建器。\n参量\nidx\n仿射锥约束构建器在AffineConeBuilderArray 类 对象中的下标。起始为 0。",
        "code": "# 获取afconebuilderarr中下标为1的仿射锥约束构建器\naffineConeBuilder = afconebuilderarr.getBuilder(1)"
    },
    {
        "rowid": 24004,
        "name": "AffineConeBuilderArray.getSize()",
        "description": "getSize()\n获取AffineConeBuilderArray 类 对象中元素的个数。",
        "code": "# 获取afconebuilderarr中元素的个数\nafconebuildersize = afconebuilderarr.getSize()"
    },
    {
        "rowid": 24101,
        "name": "GenConstr.getName()",
        "description": "getName()\n获取 Indicator 约束的名称。",
        "code": "# 获取Indicator约束indicx的名字\nindiname = indicx.getName()"
    },
    {
        "rowid": 24102,
        "name": "GenConstr.setName()",
        "description": "setName(newname)\n设置 Indicator 约束的名称为指定的 newname 。",
        "code": "# 设置Indicator约束indicx的名字为\"if\"\nindicx.setName(\"if\")"
    },
    {
        "rowid": 24103,
        "name": "GenConstr.getIdx()",
        "description": "getIdx()\n获取 Indicator 约束在模型中的下标。",
        "code": "# 获取Indicator约束indicx的下标\nindidx = indicx.getIdx()"
    },
    {
        "rowid": 24104,
        "name": "GenConstr.remove()",
        "description": "remove()\n从模型中删除当前 Indicator 约束。",
        "code": "# 删除Indicator约束indx\nindx.remove()"
    },
    {
        "rowid": "24201",
        "name": "GenConstrArray()",
        "description": "摘要: GenConstrArray(genconstrs=None)\n描述: 创建一个GenConstrArray 类 对象。\n若参数 genconstrs 为 None，则创建一个空的GenConstrArray 类 对象，否则以参数 genconstrs 初始化新创建的GenConstrArray 类 对象。\n参量: genconstrs: 待添加 Indicator 约束。可选参量，默认为 None。可取值为GenConstr 类 对象、GenConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个新的GenConstrArray对象\ngenconstrarr = GenConstrArray()\n# 创建一个GenConstrArray对象，并使用Indicator约束genx和geny初始化\ngenconstrarr = GenConstrArray([genx, geny])"
    },
    {
        "rowid": "24202",
        "name": "GenConstrArray.pushBack()",
        "description": "摘要: pushBack(genconstr)\n描述: 添加单个或多个GenConstr 类 对象。\n参量: constrs: 待添加 Indicator 约束。可取值为GenConstr 类 对象、GenConstrArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加Indicator约束genx到genconarr中\ngenconarr.pushBack(genx)\n# 添加Indicator约束genx和geny到genconarr中\ngenconarr.pushBack([genx, geny])"
    },
    {
        "rowid": "24203",
        "name": "GenConstrArray.getGenConstr()",
        "description": "摘要: getGenConstr(idx)\n描述: 根据 Indicator 约束在GenConstrArray 类 对象中的下标获取相应的 Indicator 约束，返回一个GenConstr 类 对象。\n参量: idx: Indicator 约束在GenConstrArray 类 对象中的下标。起始为 0。",
        "code": "# 获取genconarr中下标为1的Indicator约束\ngenconstr = genconarr.getGenConstr(1)"
    },
    {
        "rowid": "24204",
        "name": "GenConstrArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取GenConstrArray 类 对象中的元素个数。",
        "code": "# 获取genconarr中元素的个数\ngenconsize = genconarr.getSize()"
    },
    {
        "rowid": "24301",
        "name": "GenConstrBuilder()",
        "description": "摘要: GenConstrBuilder()\n描述: 创建一个空的GenConstrBuilder 类 对象。",
        "code": "# 创建一个空的GenConstrBuilder对象\ngenconbuilder = GenConstrBuilder()"
    },
    {
        "rowid": "24302",
        "name": "GenConstrBuilder.setBuilder()",
        "description": "摘要: setBuilder(var, val, expr, sense, type=COPT.INDICATOR_IF)\n描述: 设置GenConstrBuilder 类 对象的 Indicator 变量、Indicator 变量的取值、线性约束表达式和类型，以及 Indicator 约束的类型。\n参量: var: Indicator 变量。\nval: Indicator 变量的取值。\nexpr: 线性约束的表达式。可取值为Var 类 对象或LinExpr 类 对象。\nsense: 线性约束的类型。可取值详见约束类型 。\ntype: Indicator 约束的类型。默认为 COPT.INDICATOR_IF （If-Then 类型约束），可取值详见 Indicator 约束类型 。",
        "code": "# 设置Indicator约束构建器的Indicator变量为x，当x为真时，线性约束x + y == 1成立\ngenconbuilder.setBuilder(x, True, x + y - 1, COPT.EQUAL)"
    },
    {
        "rowid": "24303",
        "name": "GenConstrBuilder.getBinVar()",
        "description": "摘要: getBinVar()\n描述: 获取GenConstrBuilder 类 对象的 Indicator 变量。",
        "code": "# 获取Indicator约束构建器genbuilderx的Indicator变量\nindvar = genbuilderx.getBinVar()"
    },
    {
        "rowid": "24304",
        "name": "GenConstrBuilder.getBinVal()",
        "description": "摘要: getBinVal()\n描述: 获取GenConstrBuilder 类 对象的 Indicator 变量的取值。",
        "code": "# 获取Indicator约束构建器genbuilderx的Indicator变量有效时的取值\nindval = genbuilderx.getBinVal()"
    },
    {
        "rowid": "24305",
        "name": "GenConstrBuilder.getExpr()",
        "description": "摘要: getExpr()\n描述: 获取GenConstrBuilder 类 对象的线性约束表达式。",
        "code": "# 获取Indicator约束构建器genbuilderx的线性约束表达式\nlinexpr = genbuilderx.getExpr()"
    },
    {
        "rowid": "24306",
        "name": "GenConstrBuilder.getSense()",
        "description": "摘要: getSense()\n描述: 获取GenConstrBuilder 类 对象的线性约束类型。",
        "code": "# 获取Indicator约束构建器genbuilderx的线性约束类型。\nlinsense = genbuilderx.getSense()"
    },
    {
        "rowid": "24307",
        "name": "GenConstrBuilder.getIndType()",
        "description": "摘要: getIndType()\n描述: 获取GenConstrBuilder 类 对象的 Indicator 约束类型。",
        "code": "# 获取Indicator约束构建器genbuilderx的Indicator约束类型\nlinsense = genbuilderx.getIndType()"
    },
    {
        "rowid": "24401",
        "name": "GenConstrBuilderArray()",
        "description": "摘要: GenConstrBuilderArray(genconstrbuilders=None)\n描述: 创建一个GenConstrBuilderArray 类 对象。\n若参数 genconstrbuilders 为 None，则创建一个空的GenConstrBuilderArray 类 对象，否则以参数 genconstrbuilders 初始化新创建的GenConstrBuilderArray 类 对象。\n参量: genconstrbuilders: 待添加 Indicator 约束构建器。可选参量，默认为 None。可取值为GenConstrBuilder 类 对象、GenConstrBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的GenConstrBuilderArray对象\ngenbuilderarr = GenConstrBuilderArray()\n# 创建一个GenConstrBuilderArray对象，并使用Indicator约束构建器genbuilderx和genbuildery初始化\ngenbuilderarr = GenConstrBuilderArray([genbuilderx, genbuildery])"
    },
    {
        "rowid": "24402",
        "name": "GenConstrBuilderArray.pushBack()",
        "description": "摘要: pushBack(genconstrbuilder)\n描述: 添加单个或多个GenConstrBuilder 类 对象。\n参量: genconstrbuilder: 待添加 Indicator 约束构建器。可取值为GenConstrBuilder 类 对象、Gen-ConstrBuilderArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加Indicator约束构建器到genbuilderarr中\ngenbuilderarr.pushBack(genbuilderx)\n# 添加Indicator约束构建器genbuilderx和genbuildery到genbuilderarr中\ngenbuilderarr.pushBack([genbuilderx, genbuildery])"
    },
    {
        "rowid": "24403",
        "name": "GenConstrBuilderArray.getBuilder()",
        "description": "摘要: getBuilder(idx)\n描述: 根据 Indicator 约束构建器在GenConstrBuilderArray 类 对象中的下标获取相应的构建器，返回一个GenConstrBuilder 类 对象。\n参量: idx: Indicator 约束构建器在GenConstrBuilderArray 类 对象中的下标。起始为 0。",
        "code": "# 获取genbuilderarr中下标为1的Indicator约束构建器\ngenbuilder = genbuilderarr.getBuilder(1)"
    },
    {
        "rowid": "24404",
        "name": "GenConstrBuilderArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取GenConstrBuilderArray 类 对象中元素的个数。",
        "code": "# 获取genbuilderarr中元素的个数\ngenbuildersize = genbuilderarr.getSize()"
    },
    {
        "rowid": "24501",
        "name": "Column()",
        "description": "摘要: Column(constrs=0.0, coeffs=None)\n描述: 创建一个Column 类 对象。\n若参数 constrs 为 None，参数 coeffs 为 None，则创建一个空的Column 类 对象，否则采用参数 constrs 和 coeffs 初始化新创建的Column 类 对象。若参数 constrs 为 Constraint 类 对象或Column 类 对象，则参数 coeffs 为常数，当参数 coeffs 为 None，则当作常数 1.0；若参数 constrs 为列表对象，参数 coeffs 为 None，则参数 constrs 中的元素为约束、系数对；对于其它参数情形，则调用成员方法 addTerms 初始化新创建的 Column 类 对象。\n参量: constrs: 线性约束。\ncoeffs: 变量在线性约束中的系数。",
        "code": "# 创建一个空的Column对象\ncol = Column()\n# 创建一个Column对象，并添加两个项：约束conx中变量系数为2，约束cony中变量系数为3\ncol = Column([(conx, 2), (cony, 3)])\n# 创建一个Column对象，并添加两个项：约束conxx中变量系数为1，约束conyy中变量系数为2\ncol = Column([conxx, conyy], [1, 2])"
    },
    {
        "rowid": "24502",
        "name": "Column.getCoeff()",
        "description": "摘要: getCoeff(idx)\n描述: 根据元素在Column 类 对象中的下标获取相应系数。\n参量: idx: 元素的下标。起始为 0。",
        "code": "# 获取col中下标为0的项对应的系数\ncoeff = col.getCoeff(0)"
    },
    {
        "rowid": "24503",
        "name": "Column.getConstr()",
        "description": "摘要: getConstr(idx)\n描述: 根据元素在Column 类 对象中的下标获取相应线性约束。\n参量: idx: 元素的下标。起始为 0。",
        "code": "# 获取col中下标为1的项对应的线性约束\nconstr = col.getConstr(1)"
    },
    {
        "rowid": "24504",
        "name": "Column.getSize()",
        "description": "摘要: getSize()\n描述: 获取Column 类 对象中元素的个数。",
        "code": "# 获取col中元素的个数\ncolsize = col.getSize()"
    },
    {
        "rowid": "24505",
        "name": "Column.addTerm()",
        "description": "摘要: addTerm(constr, coeff=1.0)\n描述: 添加一个新的项。\n参量: constr: 待添加项对应的线性约束。\ncoeff: 待添加项的系数。可选参量，默认值为 1.0。",
        "code": "# 添加一个项到col，其约束为cony，系数为2.0\ncol.addTerm(cony, 2.0)\n# 添加一个项到col，其约束为conx，系数为1.0\ncol.addTerm(conx)"
    },
    {
        "rowid": "24506",
        "name": "Column.addTerms()",
        "description": "摘要: addTerms(constrs, coeffs)\n描述: 添加单个或多个新项。\n若参数 constrs 为 Constraint 类 对象，则参数 coeffs 为常数；若参数 constrs 为ConstrArray 类 对象或列表对象，则参数 coeffs 为常数或列表对象；若参数 constrs 为字典对象或tupledict 类 对象，则参数 coeffs 为常数、字典或tupledict 类 对象。\n参量: constrs: 待添加项对应的约束。\ncoeffs: 待添加项对应的系数。",
        "code": "# 添加两个项：约束conx中变量系数为2.0，约束cony中变量系数为3.0\ncol.addTerms([conx, cony], [2.0, 3.0])"
    },
    {
        "rowid": "24507",
        "name": "Column.addColumn()",
        "description": "摘要: addColumn(col, mult=1.0)\n描述: 添加新的列到当前列中。\n参量: col: 待添加列对象。\nmult: 待添加列的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加列coly中的项到列colx中，coly中的项放大系数为2.0\ncolx.addColumn(coly, 2.0)"
    },
    {
        "rowid": "24508",
        "name": "Column.clone()",
        "description": "摘要: clone()\n描述: 创建列对象的深拷贝。",
        "code": "# 创建列col的深拷贝\ncolcopy = col.clone()"
    },
    {
        "rowid": "24509",
        "name": "Column.remove()",
        "description": "摘要: remove(item)\n描述: 从列对象中移除指定的项。\n若参数 item 为常数，则移除指定下标对应的项；否则参数 item 为Constraint 类 对象。\n参量: item: 常数下标或待移除项相应的线性约束。",
        "code": "# 从列col中移除下标为2相应的项\ncol.remove(2)\n# 从列col中移除线性约束conx所在的项\ncol.remove(conx)"
    },
    {
        "rowid": "24510",
        "name": "Column.clear()",
        "description": "摘要: clear()\n描述: 清空列对象中的内容。",
        "code": "# 清空列col中的内容\ncol.clear()"
    },
    {
        "rowid": "24601",
        "name": "ColumnArray()",
        "description": "摘要: ColumnArray(columns=None)\n描述: 创建一个ColumnArray 类 对象。\n若参数 columns 为 None，则创建一个空的ColumnArray 类 对象，否则以参数 columns 初始化新创建的ColumnArray 类 对象。\n参量: columns: 待添加列。可选参量，默认为 None。可取值为Column 类 对象、ColumnArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 创建一个空的ColumnArray对象\ncolarr = ColumnArray()\n# 创建一个ColumnArray对象，并使用列colx和coly初始化\ncolarr = ColumnArray([colx, coly])"
    },
    {
        "rowid": "24602",
        "name": "ColumnArray.pushBack()",
        "description": "摘要: pushBack(column)\n描述: 添加单个或多个Column 类 对象。\n参量: column: 待添加列。可取值为Column 类 对象、ColumnArray 类 对象、列表、字典或tupledict 类 对象。",
        "code": "# 添加列colx到colarr中\ncolarr.pushBack(colx)\n# 添加列colx和coly到colarr中\ncolarr.pushBack([colx, coly])"
    },
    {
        "rowid": "24603",
        "name": "ColumnArray.getColumn()",
        "description": "摘要: getColumn(idx)\n描述: 根据列在ColumnArray 类 对象中的下标获取相应的列，返回一个Column 类 对象。\n参量: idx: 列在ColumnArray 类 对象中的下标。起始为 0。",
        "code": "# 获取colarr中下标为1的列\ncol = colarr.getColumn(1)"
    },
    {
        "rowid": "24604",
        "name": "ColumnArray.getSize()",
        "description": "摘要: getSize()\n描述: 获取ColumnArray 类 对象中元素的个数。",
        "code": "# 获取colarr中元素的个数\ncolsize = colarr.getSize()"
    },
    {
        "rowid": "24605",
        "name": "ColumnArray.clear()",
        "description": "摘要: clear()\n描述: 清空ColumnArray 类 对象中的内容。",
        "code": "# 清空colarr中的内容\ncolarr.clear()"
    },
    {
        "rowid": "24701",
        "name": "MVar.fromlist()",
        "description": "摘要: fromlist(vars)\n描述: 从一组Var 类 对象生成一个MVar 类 对象。这是类生成方法，可以直接调用，无需 MVar 对象。\n参量: vars: 一组 Var 对象，可以是多维的 list，或者 ndarray。\n返回值: 新的 MVar 对象，其维度取决于参量 vars 的维度。",
        "code": "vars = model.addVars(4)\nmx_1d = MVar.fromlist(vars)\nmx_2d = MVar.fromlist([vars[0], vars[1]], [vars[2], vars[3]])"
    },
    {
        "rowid": "24702",
        "name": "MVar.fromvar()",
        "description": "摘要: fromvar(var)\n描述: 从一个Var 类 对象生成一个 0 维的MVar 类 对象。这是类生成方法，可以直接调用，无需 MVar 对象。\n参量: var: 一个 Var 对象。\n返回值: 新的 0 维 MVar 对象。",
        "code": "x = model.addVar()\nmx_0d = MVar.fromvar(x)"
    },
    {
        "rowid": "24703",
        "name": "MVar.clone()",
        "description": "摘要: clone()\n描述: 深度复制一个MVar 类 对象。\n返回值: 新的 MVar 对象",
        "code": "# 创建一个2-D变量，并复制一份。注意实际变量没有增加。\nmx = model.addMVar((3, 2), nameprefix=\"mx\")\nmx_copy = mx.clone()"
    },
    {
        "rowid": "24704",
        "name": "MVar.diagonal()",
        "description": "摘要: diagonal(offset=0, axis1=0, axis2=1)\n描述: 生成一个MVar 类 对象，其元素是原 MVar 对象对角线上的元素。\n参量: offset: 可选参量，表示对角线的偏移量，默认值为 0。如果值大于 0，表示对角线向上的偏移量；如果值小于 0，表示对角线向下的偏移量。\naxis1: 可选参量，用来作为二维子 MVar 的第一轴的轴, 对角线应该从这里开始。默认第一轴为 0。\naxis2: 可选参量，用来作为二维子 MVar 的第二轴的轴, 对角线应该从这里开始。默认第二轴为 1。\n返回值: 新的 MVar 对象",
        "code": "mx = model.addMVar((5, 5), nameprefix=\"mx\")\ndiag_m0 = mx.diagonal()\ndiag_a1 = mx.diagonal(1)\ndiag_b1 = mx.diagonal(-1)"
    },
    {
        "rowid": "24705",
        "name": "MVar.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取 MVar 内每个变量的信息值。\n参量: infoname: 待查询信息的名称。可取值详见信息章节 。\n返回值: 返回一个 NumPy 的 ndarray，维度和 MVar 对象维度相同，其元素是对应变量信息的取值。",
        "code": "mx = model.addMVar(3)\nprint(mx.getInfo(\"LB\"))"
    },
    {
        "rowid": "24706",
        "name": "MVar.item()",
        "description": "摘要: item()\n描述: 获取 0 维 MVar 内的 Var 变量。如果 MVar 对象不是 0 维，触发 ValueError 异常。\n返回值: 返回 Var 对象。",
        "code": "mx = model.addMVar(3)\nvar = mx[0].item()"
    },
    {
        "rowid": "24707",
        "name": "MVar.reshape()",
        "description": "摘要: reshape(shape, order='C')\n描述: 返回一个新的 MVar 对象，其元素保持不变，但形状按参量 shape 转换。\n参量: shape: 取值为整数，或者整数元组。表示新 MVar 对象的形状。\norder: 可选参量，默认为字符’C’，表示兼容 C 语言，即按行存储；也可设为字符’F’，即按列存储，兼容 Fortune 语言。\n返回值: 返回一个元素和原 MVar 对象相同，但形状不同的新 MVar 对象。",
        "code": "mx = model.addMVar(6)\nmx_2x3 = mx.reshape((2, 3))"
    },
    {
        "rowid": "24708",
        "name": "MVar.setInfo()",
        "description": "摘要: setInfo(infoname, newval)\n描述: 设置 MVar 内每个变量的信息值。\n参量: infoname: 待设置的信息名称。可取值详见信息章节 。\nnewval: 待设置新的信息取值。",
        "code": "mx = model.addMVar(3)\nmx.setInfo(\"UB\", 9.0)\nmx.setInfo(COPT.Info.LB, 0.0)"
    },
    {
        "rowid": "24709",
        "name": "MVar.sum()",
        "description": "摘要: sum(axis=None)\n描述: 对 MVar 里的变量求和，返回一个新的MLinExpr 类 对象。\n参量: axis: 可选整型参量，默认值为 None，即逐个变量求和。否则，按给定的轴求和。\n返回值: 返回 MLinExpr 对象，表示对应变量的和。",
        "code": "mx = model.addMVar((3, 5))\nsum_all = mx.sum()\n #返回0维MLinExpr对象\nsum_row = mx.sum(axis = 0) #\n返回\n1\n维\nMLinExpr\n对象，形状为\n(5, )"
    },
    {
        "rowid": "24710",
        "name": "MVar.tolist()",
        "description": "摘要: tolist()\n描述: 把 MVar 对象转化为 Var 对象的一维列表。\n返回值: 返回包含 Var 对象的一维列表。",
        "code": "mx = model.addMVar((3, 5))\nprint(mx.tolist())"
    },
    {
        "rowid": "24711",
        "name": "MVar.transpose()",
        "description": "摘要: transpose()\n描述: 生成一个新的 MVar 对象，它是原 MVar 对象的转置。\n返回值: 返回新的 MVar 对象。",
        "code": "mx = model.addMVar((3, 5))\nprint(mx.transpose().shape) #其形状为(5, 3)"
    },
    {
        "rowid": "24712",
        "name": "MVar.ndim",
        "description": "摘要: ndim\n描述: MVar 对象的维度。\n返回值: 整型值。",
        "code": "mx = model.addMVar((3, 5))\nprint(mx.ndim) # ndim = 2"
    },
    {
        "rowid": "24713",
        "name": "MVar.shape",
        "description": "摘要: shape\n描述: MVar 对象的形状。\n返回值: 整型元组。",
        "code": "mx = model.addMVar((3,))\nprint(mx.shape) # shape = (3, )"
    },
    {
        "rowid": "24714",
        "name": "MVar.size",
        "description": "摘要: size\n描述: MVar 对象的 Var 变量个数。\n返回值: 整型值。",
        "code": "mx = model.addMVar((3, 4))\nprint(mx.size) # size = 12"
    },
    {
        "rowid": "24715",
        "name": "MVar.T",
        "description": "摘要: T\n描述: MVar 对象的转置。类似于类方法 transpose()。\n返回值: 返回转置后的 MVar 对象。",
        "code": "mx = model.addMVar((3, 4))\nprint(mx.T.shape) # shape = (4, 3)"
    },
    {
        "rowid": "24801",
        "name": "MConstr.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取 MConstr 内每个约束的信息值。可取值详见信息章节 。\n参量: infoname: 待获取信息的名称。\n返回值: 返回一个 NumPy 的 ndarray，维度和 MConstr 对象维度相同，其元素是对应约束的信息值。",
        "code": "a = np.random.rand(4)\nmx = m.addMVar((4, 3), nameprefix=\"mx\")\nb = np.random.rand(3)\nmc = m.addConstrs(a @ mx <= b)\nprint(mc.getInfo(\"pi\"))"
    },
    {
        "rowid": "24802",
        "name": "MConstr.item()",
        "description": "摘要: item()\n描述: 获取 0 维 MConstr 内的约束对象。如果 MConstr 对象不是 0 维，触发 ValueError 异常。\n返回值: 返回线性约束对象。",
        "code": "mc = m.addConstrs(a @ mx <= b)\nprint(mc[0].item())"
    },
    {
        "rowid": "24803",
        "name": "MConstr.reshape()",
        "description": "摘要: reshape(shape, order='C')\n描述: 返回一个新的 MConstr 对象，其元素保持不变，但形状按参量 shape 转换。\n参量: shape: 取值为整数，或者整数元组。表示新 MConstr 对象的形状。\norder: 可选参量，默认为字符’C’，表示兼容 C 语言，即按行存储；也可设为字符’F’，即按列存储，兼容 Fortune 语言。\n返回值: 返回一个元素和原 MConstr 对象相同，但形状不同的新 MConstr 对象。",
        "code": "mc = m.addConstrs(a @ mx <= b)\nmc_2x2 = mc.reshape((2, 2))"
    },
    {
        "rowid": "24804",
        "name": "MConstr.setInfo()",
        "description": "摘要: setInfo(infoname, newval)\n描述: 设置 MConstr 内每个约束的信息值。\n参量: infoname: 待设置的信息名称。可取值详见信息章节 。\nnewval: 待设置新的信息取值。",
        "code": "mc = model.addConstrs(a @ mx <= b)\nmc.setInfo(\"obj\", 9.0)"
    },
    {
        "rowid": "24805",
        "name": "MConstr.tolist()",
        "description": "摘要: tolist()\n描述: 把 MConstr 对象转化为元素为约束的一维列表。\n返回值: 返回包含 Constraint 对象的一维列表。",
        "code": "mc = m.addConstrs(a @ mx <= b)\nprint(mc.tolist())"
    },
    {
        "rowid": "24806",
        "name": "MConstr.transpose()",
        "description": "摘要: transpose()\n描述: 生成一个新的 MConstr 对象，它是原 MConstr 对象的转置。\n返回值: 返回转置后的 MConstr 对象。",
        "code": "mc = m.addConstrs(a @ mx <= b)\nprint(mc.transpose())"
    },
    {
        "rowid": "24807",
        "name": "MConstr.ndim",
        "description": "摘要: ndim\n描述: MConstr 对象的维度。\n返回值: 整型值。",
        "code": "mc = m.addConstrs(a @ mx <= b)\nprint(mc.ndim)"
    },
    {
        "rowid": "24808",
        "name": "MConstr.shape",
        "description": "摘要: shape\n描述: MConstr 对象的形状。\n返回值: 整型元组。",
        "code": "mc = m.addConstrs(a @ mx <= b)\nprint(mc.shape)"
    },
    {
        "rowid": "24809",
        "name": "MConstr.size",
        "description": "摘要: size\n描述: MConstr 对象的约束个数。\n返回值: 整型值。",
        "code": "mc = m.addConstrs(a @ mx <= b)\nprint(mc.size)"
    },
    {
        "rowid": "24810",
        "name": "MConstr.T",
        "description": "摘要: T\n描述: MConstr 对象的转置。类似于类方法 transpose()。\n返回值: 返回转置后的 MConstr 对象。",
        "code": "A = np.ones([2, 4])\nmx = m.addMVar((4, 3), nameprefix=\"mx\")\nmc = m.addConstrs(A @ X == 0.0)\nprint(mc.T.shape) # shape = (3, 2)"
    },
    {
        "rowid": 24901,
        "name": "MConstrBuilder()",
        "description": "摘要: MConstrBuilder(args, shape=None)\n描述: 类构造方法，生成 MConstrBuilder 对象。\n参量:\n  args: 单个或者一组ConstrBuilder 类 对象。可以是 Python 列表，或者 NumPy 多维数组。\n  shape: 取值为整数，或者整数元组。表示新 MConstrBuilder 对象的形状。",
        "code": "vars = m.addVars(4)\nbuilders = [x <= 1.0 for x in vars]\nmcb = MConstrBuilder(builders, (2, 2))\n# 或者通过MVar对象的比较运算符来生成\nmx = m.addMVar((3, 2))\nmcb = mx >= 1.0\n# 它可以作为addConstrs的输入\nmodel.addConstrs(mx >= 1.0)"
    },
    {
        "rowid": 25001,
        "name": "MQConstr.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取 MQConstr 类对象内每个二次约束的信息值。\n参量:\n  infoname: 待获取信息的名称。可取值详见信息章节 。\n返回值: 返回一个与 MQConstr 对象形状相同的 COPT 内置 NdArray 类对象，其元素是相应 MQConstr 约束对象的信息值。",
        "code": "mx = m.addMVar((1, 3), nameprefix=\"mx\")\nmc = m.addQConstr(mx @ mx.T <= 1.0)\nprint(mc.getInfo(\"x\"))"
    },
    {
        "rowid": 25002,
        "name": "MQConstr.item()",
        "description": "摘要: item()\n描述: 获取 0 维 MQConstr 对象内的二次约束。如果 MQConstr 对象不是 0 维，则触发 ValueError 异常。\n返回值: 返回二次约束对象。",
        "code": "mc = m.addQConstr(mx @ mx.T <= 1.0)\nprint(mc.item())"
    },
    {
        "rowid": 25003,
        "name": "MQConstr.reshape()",
        "description": "摘要: reshape(shape, order='C')\n描述: 返回一个新的 MQConstr 对象，其元素保持不变，但形状按参量 shape 转换。\n参量:\n  shape: 取值为整数，或者整数元组。表示新 MQConstr 对象的形状。\n  order: 可选参量，默认为字符’C’，表示兼容 C 语言，即按行存储；experimental 模式暂不支持’F’ 模式。\n返回值: 返回一个元素和原 MQConstr 对象相同，但形状不同的新 MQConstr 对象。",
        "code": "mc = m.addQConstr(mx.T @ mx <= 1.0)\nmc_1x9 = mc.reshape((1, 9))"
    },
    {
        "rowid": 25004,
        "name": "MQConstr.setInfo()",
        "description": "摘要: setInfo(infoname, newval)\n描述: 设置 MQConstr 对象内每个二次约束的信息值。\n参量:\n  infoname: 待设置的信息名称。可取值详见信息章节 。\n  newval: 待设置新的信息取值。",
        "code": "mc = model.addQConstr(mx @ mx.T <= 1.0)\nmc.setInfo(\"LB\", 9.0)"
    },
    {
        "rowid": 25005,
        "name": "MQConstr.tolist()",
        "description": "摘要: tolist()\n描述: 把 MQConstr 对象转化为元素为约束的一维列表。\n返回值: 返回包含QConstraint 类 对象的一维列表。",
        "code": "mc = m.addQConstr(mx.T @ mx <= 1.0)\nprint(mc.tolist())"
    },
    {
        "rowid": 25006,
        "name": "MQConstr.transpose()",
        "description": "摘要: transpose()\n描述: 生成一个新的 MQConstr 对象，它是原 MQConstr 对象的转置。\n返回值: 返回转置后的 MQConstr 对象。",
        "code": "mc = m.addQConstr(mx.T @ mx <= 1.0)\nprint(mc.transpose())"
    },
    {
        "rowid": 25007,
        "name": "MQConstr.ndim",
        "description": "摘要: ndim\n描述: MQConstr 对象的维度。\n返回值: 整型值。",
        "code": "mc = m.addQConstr(mx.T @ mx <= 1.0)\nprint(mc.ndim)"
    },
    {
        "rowid": 25008,
        "name": "MQConstr.shape",
        "description": "摘要: shape\n描述: MQConstr 对象的形状。\n返回值: 整型元组。",
        "code": "mc = m.addQConstr(mx.T @ mx <= 1.0)\nprint(mc.shape)"
    },
    {
        "rowid": 25009,
        "name": "MQConstr.size",
        "description": "摘要: size\n描述: MQConstr 对象中的约束个数。\n返回值: 整型值。",
        "code": "mc = m.addQConstr(mx.T @ mx <= 1.0)\nprint(mc.size)"
    },
    {
        "rowid": 25010,
        "name": "MQConstr.T",
        "description": "摘要: T\n描述: MQConstr 对象的转置。类似于类方法 transpose() 。\n返回值: 返回转置后的 MQConstr 对象。",
        "code": "A = np.ones([4, 3])\nmx = model.addMVar((3, 4), nameprefix=\"mx\")\nmc = model.addQConstr(mx @ A @ mx == 0.0)\nprint(mc.shape) # shape = (3, 4)\nprint(mc.T.shape) # shape = (4, 3)"
    },
    {
        "rowid": 25101,
        "name": "MQConstrBuilder()",
        "description": "摘要: MQConstrBuilder(args, shape=None)\n描述: 类构造方法，生成 MQConstrBuilder 对象。\n参量:\n  args: 单个或者一组QConstrBuilder 类 对象。可以是 Python 列表，或者 NumPy 多维数组。\n  shape: 取值为整数，或者整数元组。表示新 MQConstrBuilder 对象的形状。",
        "code": "x = model.addVar()\nmqcb = MQConstrBuilder(x * x <= 9.0)\n# 或者通过MVar对象的矩阵乘法和MQuadExpr的比较运算符来生成\nmx = model.addMVar(3, 3)\nmqcb = mx @ mx >= 1.0\n# 它可以作为addQConstr的输入\nma = model.addMVar(2)\nA = np.full((2,3), 1)\nmb = model.addMVar(3)\nmodel.addQConstr(ma @ A @ mb <= 1.0)"
    },
    {
        "rowid": 25201,
        "name": "MPsdConstr.getInfo()",
        "description": "摘要: getInfo(infoname)\n描述: 获取 MPsdConstr 内每个半定约束的信息值。\n参量:\n  infoname: 待获取信息的名称。可取值详见信息章节 。\n返回值: 返回以多维数组保存的半定约束的信息值。",
        "code": "mpsdcon = model.addConstr(barX[:-1, :-1].sum() == 1)\nprint(mpsdcon.UB)\nprint(mpsdcon.getInfo(\"UB\"))"
    },
    {
        "rowid": 25202,
        "name": "MPsdConstr.setInfo()",
        "description": "摘要: setInfo(infoname, newval)\n描述: 设置 MPsdConstr 内每个半定约束的信息值。\n参量:\n  infoname: 待设置的信息名称。可取值详见信息章节 。\n  newval: 待设置新的信息取值。",
        "code": "barX = model.addPsdVars(3, \"BAR_X\")\nmY = model.addMVar(2, nameprefix=\"M_X\")\nmpsdCon = model.addConstrs(barX[:-1, :-1].diagonal()== mY)\nmpsdCon.UB = 10\nmpsdCon.setInfo(\"UB\", 10)"
    },
    {
        "rowid": 25203,
        "name": "MPsdConstr.item()",
        "description": "摘要: item()\n描述: 获取 0 维 MPsdConstr 内的半定约束对象。如果 MPsdConstr 对象不是 0 维，触发 ValueError 异常。\n返回值: 返回 PsdConstraint 类对象。",
        "code": "barX = model.addPsdVars(3, \"BAR_X\")\nmY = model.addMVar(2, nameprefix=\"M_X\")\nmpsdCon = model.addConstrs(barX[:-1, :-1].diagonal()== mY)\npsdCon = mpsdCon[1].item()"
    },
    {
        "rowid": 25204,
        "name": "MPsdConstr.clone()",
        "description": "摘要: clone()\n描述: 深度复制一个MPsdConstr 类 对象。\n返回值: 新的 MPsdConstr 对象。",
        "code": "barX = model.addPsdVars(3, \"BAR_X\")\nmY = model.addMVar(2, nameprefix=\"M_X\")\nmpsdCon = model.addConstrs(barX[:-1, :-1].diagonal()== mY)\nmpsdCon_copy = mpsdCon.clone()"
    },
    {
        "rowid": 25301,
        "name": "MPsdConstrBuilder()",
        "description": "摘要: MPsdConstrBuilder()\n描述: 创建一个空的MPsdConstrBuilder 类 对象。",
        "code": "# 创建一个空的半定约束构建器\nconstrbuilder = MPsdConstrBuilder()"
    },
    {
        "rowid": 25302,
        "name": "MPsdConstrBuilder.setBuilder()",
        "description": "摘要: setBuilder(expr, sense, rhs)\n描述: 设置多维半定约束构建器的表达式和约束类型。\n参量:\n  expr: 待设置表达式。可取值为常数、MVar 类 对象、MLinExpr 类 对象 或MPsdExpr 类 对象。\n  sense: 约束类型。可取值详见约束类型 部分。\n  rhs: 约束右端项。可取值为常数、MVar 类 对象、MLinExpr 类 对象或MPsdExpr 类 对象。",
        "code": "# \n设置多维半定约束构建器的表达式为：\nx + y == 1\nconstrbuilder.setBuilder(x + y, COPT.EQUAL, 1)"
    },
    {
        "rowid": 25303,
        "name": "MPsdConstrBuilder.setRange()",
        "description": "摘要: setRange(expr, range)\n描述: 设置多维半定约束构建器的表达式和右端项，即约束上下界之差；形式为 expr 小于等于 0, 且大于等于 - range 。\n参量:\n  expr: 待设置表达式。可取值为MPsdExpr 类 对象。\n  range: Range 约束的右端项, 非负。",
        "code": "# 设置多维半定约束构建器的表达式为：x + y - 1，range右端项为1\nconstrbuilder.setRange(x + y - 1, 1)"
    },
    {
        "rowid": 25304,
        "name": "MPsdConstrBuilder.getPsdExpr()",
        "description": "摘要: getPsdExpr()\n描述: 获取多维半定约束构建器对象的表达式。",
        "code": "# 获取多维半定约束构建器的表达式\npsdexpr = constrbuilder.getPsdExpr()"
    },
    {
        "rowid": 25305,
        "name": "MPsdConstrBuilder.getSense()",
        "description": "摘要: getSense()\n描述: 获取多维半定约束构建器对象的约束类型。",
        "code": "# 获取多维半定约束构建器的约束类型\nconsense = constrbuilder.getSense()"
    },
    {
        "rowid": 25306,
        "name": "MPsdConstrBuilder.getRange()",
        "description": "摘要: getRange()\n描述: 获取多维半定约束构建器对象的 range 右端项, 即约束上下界之差。",
        "code": "# 获取多维半定约束构建器的range右端项\nrngval = constrbuilder.getRange()"
    },
    {
        "rowid": 25401,
        "name": "MLinExpr.zeros()",
        "description": "摘要: zeros(shape)\n描述: 这是类生成方法，可以直接调用，无需 MLinExpr 对象。\n参量:\n  shape: 取值为整数，或者整数元组。表示新 MLinExpr 对象的形状。\n返回值: 新的 MLinExpr 对象。",
        "code": "mexpr = MLinExpr.zeros((2,3))\nx = model.addVar()\nmexpr += x"
    },
    {
        "rowid": 25402,
        "name": "MLinExpr.clear()",
        "description": "摘要: clear()\n描述: 重置MLinExpr 类 对象的每个元素为 0.0。",
        "code": "mexpr = 2.0 * model.addMVar(3)\nmexpr.clear()"
    },
    {
        "rowid": 25403,
        "name": "MLinExpr.clone()",
        "description": "摘要: clone()\n描述: 深度复制一个MLinExpr 类 对象。\n返回值: 新的 MLinExpr 对象",
        "code": "mexpr = 2.0 * model.addMVar(3)\nmexpr_copy = mexpr.clone()"
    },
    {
        "rowid": 25404,
        "name": "MLinExpr.getValue()",
        "description": "摘要: getValue()\n描述: 获取MLinExpr 类 对象内每个线性表达式的估值。\n返回值: 返回一个 NumPy 的 ndarray，维度和 MLinExpr 对象维度相同，其元素是对应表达式的估值。",
        "code": "a = np.random.rand(4)\nmx = m.addMVar((4, 3), nameprefix=\"mx\")\nmexpr = a @ mx\nmc = m.addConstrs(mexpr <= 1.0)\nmodel.solve()\nprint(mc.getValue())"
    },
    {
        "rowid": 25405,
        "name": "MLinExpr.item()",
        "description": "摘要: item()\n描述: 获取 0 维 MLinExpr 内的约束对象。如果 MLinExpr 对象不是 0 维，触发 ValueError 异常。\n返回值: 返回线性约束对象。",
        "code": "mexpr = 2.0 * model.addMVar(3)\nprint(mexpr[0].item())"
    },
    {
        "rowid": 25406,
        "name": "MLinExpr.reshape()",
        "description": "摘要: reshape(shape, order='C')\n描述: 返回一个新的 MLinExpr 对象，其元素保持不变，但形状按参量 shape 转换。\n参量:\n  shape: 取值为整数，或者整数元组。表示新 MLinExpr 对象的形状。\n  order: 可选参量，默认为字符’C’，表示兼容 C 语言，即按行存储；也可设为字符’F’，即按列存储，兼容 Fortune 语言。\n返回值: 返回一个元素和原 MLinExpr 对象相同，但形状不同的新 MLinExpr 对象。",
        "code": "mc = m.addConstrs(a @ mx <= b)\nmc_2x2 = mc.reshape((2, 2))"
    },
    {
        "rowid": 25407,
        "name": "MLinExpr.sum()",
        "description": "摘要: sum(axis=None)\n描述: 对 MLinExpr 对象里的变量求和，返回一个新的MLinExpr 类 对象。\n参量:\n  axis: 可选整型参量，默认值为 None，即逐个变量求和。否则，按给定的轴求和。\n返回值: 返回 MLinExpr 对象，表示对应线性表达式的和。",
        "code": "mexpr = 2.0 * model.addMVar((3, 5))\nsum_all = mexpr.sum() #返回0维MLinExpr对象\nsum_row = mexpr.sum(axis = 0) #返回1维MLinExpr对象，形状为(5, )"
    },
    {
        "rowid": 25408,
        "name": "MLinExpr.tolist()",
        "description": "摘要: tolist()\n描述: 把 MLinExpr 对象转化为元素为线性表达式的一维列表。\n返回值: 返回包含LinExpr 类 的一维列表。",
        "code": "mexpr = 2.0 * model.addMVar((3, 5))\nprint(mexpr.tolist())"
    },
    {
        "rowid": 25409,
        "name": "MLinExpr.transpose()",
        "description": "摘要: transpose()\n描述: 生成一个新的 MLinExpr 对象，它是原 MLinExpr 对象的转置。\n返回值: 返回转置后的 MLinExpr 对象。",
        "code": "mexpr = 2.0 * model.addMVar((3, 5))\nprint(mexpr.transpose())"
    },
    {
        "rowid": 25410,
        "name": "MLinExpr.ndim",
        "description": "摘要: ndim\n描述: MLinExpr 类 对象的维度。\n返回值: 整型值。",
        "code": "mexpr = 2.0 * model.addMVar((3, 5))\nprint(mexpr.ndim)"
    },
    {
        "rowid": 25411,
        "name": "MLinExpr.shape",
        "description": "摘要: shape\n描述: MLinExpr 类 对象的形状。\n返回值: 整型元组。",
        "code": "mexpr = 2.0 * model.addMVar((3, 5))\nprint(mexpr.shape)"
    },
    {
        "rowid": 25412,
        "name": "MLinExpr.size",
        "description": "摘要: size\n描述: MLinExpr 类 对象的元素个数。\n返回值: 整型值。",
        "code": "mexpr = 2.0 * model.addMVar((3, 5))\nprint(mexpr.size)"
    },
    {
        "rowid": 25413,
        "name": "MLinExpr.T",
        "description": "摘要: T\n描述: MLinExpr 类 对象的转置。类似于类方法 transpose()。\n返回值: 返回转置后的 MLinExpr 对象。",
        "code": "mexpr = 2.0 * model.addMVar((3, 5))\nprint(mexpr.T.shape) # 转置后的形状为(5, 3)"
    },
    {
        "rowid": 25414,
        "name": "MLinExpr.__eq__()",
        "description": "摘要: __eq__()\n描述: 对运算符 == 的重载，生成一个MConstrBuilder 类 对象。可以作为模型类里的 addConstrs 的输入。\n返回值: 返回MConstrBuilder 类 对象。",
        "code": "model.addConstrs(A @ x == 1.0)"
    },
    {
        "rowid": 25415,
        "name": "MLinExpr.__ge__()",
        "description": "摘要: __ge__()\n描述: 对运算符 >= 的重载，生成一个MConstrBuilder 类 对象。可以作为模型类里的 addConstrs 的输入。\n返回值: 返回MConstrBuilder 类 对象。",
        "code": "model.addConstrs(A @ x >= 1.0)"
    },
    {
        "rowid": 25416,
        "name": "MLinExpr.__le__()",
        "description": "摘要: __le__()\n描述: 对运算符 <= 的重载，生成一个MConstrBuilder 类 对象。可以作为模型类里的 addConstrs 的输入。\n返回值: 返回MConstrBuilder 类 对象。",
        "code": "model.addConstrs(A @ x <= 1.0)"
    },
    {
        "rowid": 25501,
        "name": "MQuadExpr.zeros()",
        "description": "摘要: zeros(shape)\n描述: 这是类生成方法，可以直接调用，无需 MQuadExpr 对象。\n参量:\n  shape: 取值为整数，或者整数元组。表示新 MQuadExpr 对象的形状。\n返回值: 新的 MQuadExpr 对象。",
        "code": "mqx = MQuadExpr.zeros((2,3)) # shape = (2, 3)\nx = model.addVar()\nmqx += 2.0 * x * x # broadcast scalar\nmqx += model.addMVar(3) # broadcast MVar of shape (3,)"
    },
    {
        "rowid": 25502,
        "name": "MQuadExpr.clear()",
        "description": "摘要: clear()\n描述: 重置MQuadExpr 类 对象的每个元素为 0.0。",
        "code": "ma = model.addMVar(3, nameprefix='a')\nmb = model.addMVar(3, nameprefix='b')\nmqx = ma * mb # elementwise multiply, shape = (3,)\nmqx.clear()\nprint(mqx) # result is [0.0, 0.0, 0.0]"
    },
    {
        "rowid": 25503,
        "name": "MQuadExpr.clone()",
        "description": "摘要: clone()\n描述: 深度复制一个MQuadExpr 类 对象。\n返回值: 新的MQuadExpr 类 对象。",
        "code": "mx = model.addMVar((3, 3), nameprefix='mx')\nmqx = 2.0 * mx @ mx # matrix multiply, shape = (3, 3)\nmqx_copy = mqx.clone()\nmqx_copy.clear()\nprint(mqx) # mqx is untouched"
    },
    {
        "rowid": 25504,
        "name": "MQuadExpr.getValue()",
        "description": "摘要: getValue()\n描述: 获取MQuadExpr 类 对象内每个二次表达式的估值。\n返回值: 返回一个 NumPy 的 ndarray，维度和 MQuadExpr 对象维度相同，其元素是对应表达式的估值。",
        "code": "A = np.eye(3)\nmx = m.addMVar(3, nameprefix=\"mx\")\nmqx = mx @ A @ mx # 0-D MQuadExpr, shape = ()\nm.addQConstr(mqx <= 9.0)\nm.solve()\nprint(mqx.getValue())"
    },
    {
        "rowid": 25505,
        "name": "MQuadExpr.item()",
        "description": "摘要: item()\n描述: 获取 0 维 MQuadExpr 内的约束对象。如果 MQuadExpr 对象不是 0 维，触发 ValueError 异常。\n返回值: 返回二次表达式对象。",
        "code": "x = m.addVar()\nmqx = MQuadExpr.zeros(3) + x * x\nprint(mqx[1].item()) # 返回 QuadExpr(x * x)"
    },
    {
        "rowid": 25506,
        "name": "MQuadExpr.reshape()",
        "description": "摘要: reshape(shape, order='C')\n描述: 返回一个新的 MQuadExpr 对象，其元素保持不变，但形状按参量 shape 转换。\n参量:\n  shape: 取值为整数，或者整数元组。表示新 MQuadExpr 对象的形状。\n  order: 可选参量，默认为字符’C’，表示兼容 C 语言，即按行存储；也可设为字符’F’，即按列存储，兼容 Fortune 语言。\n返回值: 返回一个元素和原 MQuadExpr 对象相同，但形状不同的新 MQuadExpr 对象。",
        "code": "mqx = MQuadExpr.zeros(6)\nmqx_2x3 = mqx.reshape((2, 3))"
    },
    {
        "rowid": 25507,
        "name": "MQuadExpr.sum()",
        "description": "摘要: sum(axis=None)\n描述: 对 MQuadExpr 对象里的二次表达式求和，返回一个新的MQuadExpr 类 对象。\n参量:\n  axis: 可选整型参量，默认值为 None，即逐个表达式求和。否则按给定的轴求和。\n返回值: 返回 MQuadExpr 对象，表示对应二次表达式的和。",
        "code": "ma = model.addMVar((2, 3), nameprefix='ma')\nmb = model.addMVar((3, 2), nameprefix='mb')\nmqx = ma @ mb\nsum_all = mqx.sum() # 返回0维MQuadExpr对象\nsum_row = mqx.sum(axis = 0) # 返回1维MQuadExpr对象，形状为(2,)"
    },
    {
        "rowid": 25508,
        "name": "MQuadExpr.tolist()",
        "description": "摘要: tolist()\n描述: 把 MQuadExpr 对象转化为元素为二次表达式的一维列表。\n返回值: 返回元素为QuadExpr 类 的一维列表。",
        "code": "print(MQuadExpr.zeros((2,3)).tolist()) # 长度为6的列表"
    },
    {
        "rowid": 25509,
        "name": "MQuadExpr.transpose()",
        "description": "摘要: transpose()\n描述: 生成一个新的 MQuadExpr 对象，它是原 MQuadExpr 对象的转置。\n返回值: 返回转置后的 MQuadExpr 对象。",
        "code": "mqx = MQuadExpr.zeros((2,3))\nprint(mqx.transpose().shape) # shape = (3, 2)"
    },
    {
        "rowid": 25510,
        "name": "MQuadExpr.ndim",
        "description": "摘要: ndim\n描述: MQuadExpr 类 对象的维度。\n返回值: 整型值。",
        "code": "mqx = MQuadExpr.zeros((2,3))\nprint(mqx.ndim) # ndim = 2"
    },
    {
        "rowid": 25511,
        "name": "MQuadExpr.shape",
        "description": "摘要: shape\n描述: MQuadExpr 类 对象的形状。\n返回值: 整型元组。",
        "code": "print(MQuadExpr.zeros((2,3)).shape) # shape = (2, 3)"
    },
    {
        "rowid": 25512,
        "name": "MQuadExpr.size",
        "description": "摘要: size\n描述: MQuadExpr 类 对象的元素个数。\n返回值: 整型值。",
        "code": "mqx = MQuadExpr.zeros((2,3))\nprint(mqx.size) # size= 6"
    },
    {
        "rowid": 25513,
        "name": "MQuadExpr.T",
        "description": "摘要: T\n描述: MQuadExpr 类 对象的转置。类似于类方法 transpose()。\n返回值: 返回转置后的 MQuadExpr 对象。",
        "code": "mqx = MQuadExpr.zeros((2,3))\nprint(mqx.T.shape) # shape = (3, 2)"
    },
    {
        "rowid": 25514,
        "name": "MQuadExpr.__eq__()",
        "description": "摘要: __eq__()\n描述: 对运算符 == 的重载，生成一个MQConstrBuilder 类 对象。可以作为模型类里的 addQConstr 的输入。\n返回值: 返回MQConstrBuilder 类 对象。",
        "code": "model.addQConstr(x @ Q @ y == 1.0)"
    },
    {
        "rowid": 25515,
        "name": "MQuadExpr.__ge__()",
        "description": "摘要: __ge__()\n描述: 对运算符 >= 的重载，生成一个MQConstrBuilder 类 对象。可以作为模型类里的 addQConstr 的输入。\n返回值: 返回MQConstrBuilder 类 对象。",
        "code": "model.addQConstr(x @ Q @ y >= 1.0)"
    },
    {
        "rowid": 25516,
        "name": "MQuadExpr.__le__()",
        "description": "摘要: __le__()\n描述: 对运算符 <= 的重载，生成一个MQConstrBuilder 类 对象。可以作为模型类里的 addQConstr 的输入。\n返回值: 返回MQConstrBuilder 类 对象。",
        "code": "model.addQConstr(x @ Q @ y <= 1.0)"
    },
    {
        "rowid": 25601,
        "name": "NdArray()",
        "description": "摘要: NdArray(args=None, dtype=None, shape=None)\n描述: 创建一个NdArray 类 对象。\n返回值: 返回 NdArray 对象。",
        "code": "# 创建一个形状为3x3的NdArray对象，并将其中元素初始化为0\nndmat = NdArray(shape=(3, 3))"
    },
    {
        "rowid": 25602,
        "name": "NdArray.item()",
        "description": "摘要: item()\n描述: 获取 0 维 NdArray 对象内的单个元素。如果 NdArray 对象不是 0 维，则会触发ValueError 异常。\n返回值: 返回 0 维 NdArray 对象中元素的数据类型。（例如:\"float\" 或者 \"int\" 等）",
        "code": "ndmat = NdArray(args=1.1, shape=(1,))\n# Type of value is \"float\"\nvalue = ndmat.item()"
    },
    {
        "rowid": 25603,
        "name": "NdArray.reshape()",
        "description": "摘要: reshape(shape, order='C')\n描述: 返回一个新的 NdArray 对象，其元素保持不变，但形状按参量 shape 转换。\n参量:\n  shape: 取值为整数，或者整数元组。表示新 NdArray 对象的形状。\n  order: 可选参量，默认为字符’C’，表示兼容 C 语言，即按行存储。当前版本还不支持字符’F’，即按列存储。\n返回值: 返回一个元素和原 NdArray 对象相同，但形状不同的新 NdArray 对象。",
        "code": "ndmat = NdArray(shape=(6,))\nndmat_2x3 = ndmat.reshape((2, 3))"
    },
    {
        "rowid": 25604,
        "name": "NdArray.sum()",
        "description": "摘要: sum(axis=None)\n描述: 按给定的轴对 NdArray 里的元素求和。\n参量:\n  axis: 可选整型参量，默认值为 None，即逐个元素求和。否则，按给定的轴求和。\n返回值: 如果 axis 为空，返回一个新的 0 维 NdArray 对象，其中的元素取值表示对应元素的和。如果 axis 非空，返回一个新的 N-1 维 NdArray 对象，其中的元素为按给定的轴上元素的和。",
        "code": "ndmat = NdArray(args=1.1, shape=(2, 2))\nsum_all = ndmat.sum() #对ndmat中所有元素加和，返回0维NdArray对象\nsum_row = ndmat.sum(axis=0) #对ndmat中元素按行加和，返回1维NdArray对象，形状为(2, )"
    },
    {
        "rowid": 25605,
        "name": "NdArray.tolist()",
        "description": "摘要: tolist()\n描述: 将 NdArray 对象转化为一维列表。\n返回值: 返回一维列表 list 对象。",
        "code": "# Type of object mat_tolist is \"list\"\nmat_tolist = ndmat.tolist()"
    },
    {
        "rowid": 25606,
        "name": "NdArray.tonumpy()",
        "description": "摘要: tonumpy()\n描述: 将 NdArray 对象转化为 NumPy 的 ndarray 对象。\n返回值: 返回 numpy ndarray 对象。",
        "code": "# Type of object mat_tolist is \"numpy.ndarray\"\nmat_tonumpy = ndmat.tonumpy()"
    },
    {
        "rowid": 25607,
        "name": "NdArray.fill()",
        "description": "摘要: fill(value)\n描述: 将 NdArray 对象中每个元素填充为指定值。\n参量:\n  value: NdArray 对象中每个元素新的取值。\n返回值: 返回 ndarray 对象。",
        "code": "mat_fillvalue = ndmat.fill(100.0)"
    },
    {
        "rowid": 25608,
        "name": "NdArray.expand()",
        "description": "摘要: expand(axis=0)\n描述: 将 NdArray 对象在 axis 轴上扩展成 N+1 维形状。\n参量:\n  axis: 指定的维度，默认为 0（即第一个维度）。\n返回值: 返回 N+1 维的 NdArray 对象。",
        "code": "mat_1 = ndmat.expand()"
    },
    {
        "rowid": 25609,
        "name": "NdArray.squeeze()",
        "description": "摘要: squeeze(axis=0)\n描述: 将 NdArray 对象在 axis 轴上缩减成 N-1 维形状。\n参量:\n  axis: 指定的维度，默认为 0（即第一个维度）。\n返回值: 返回 N-1 维的 NdArray 对象。",
        "code": "mat_1 = ndmat.squeeze()"
    },
    {
        "rowid": 25610,
        "name": "NdArray.flatten()",
        "description": "摘要: flatten()\n描述: 将 NdArray 对象展开成一维形状。\n返回值: 返回新的一维 NdArray 对象。",
        "code": "ndmat = NdArray(shape=(2, 2))\n# The shape of mat_1 is (4,)\nmat_1 = ndmat.flatten()"
    },
    {
        "rowid": 25611,
        "name": "NdArray.setItem()",
        "description": "摘要: setItem(idx, value)\n描述: 设置 NdArray 对象中给定索引对应元素的取值。\n参量:\n  idx: 指定的一维索引，即把 NdArray 展开成一维后对应的索引值。\n  value: 指定一维索引对应元素的新取值。\n返回值: 返回 NdArray 对象，其中 idx 的元素取值被设置为 value 。",
        "code": "# 设置第0个索引的元素取值为100\nmat_1 = ndmat.setItem(0, 100)"
    },
    {
        "rowid": 25612,
        "name": "NdArray.transpose()",
        "description": "摘要: transpose()\n描述: 生成一个新的 NdArray 对象，它是原 NdArray 对象的转置。\n返回值: 返回新的 NdArray 对象。",
        "code": "ndmat = NdArray(shape=(3, 5))\nprint(ndmat.transpose().shape) #其形状为(5, 3)"
    },
    {
        "rowid": 25613,
        "name": "NdArray.diagonal()",
        "description": "摘要: diagonal(offset=0, axis1=0, axis2=1)\n描述: 生成一个NdArray 类 对象，其元素是原 NdArray 对象对角线上的元素。\n参量:\n  offset: 可选参量，表示对角线的偏移量，默认值为 0。如果值大于 0，表示对角线向上的偏移量；如果值小于 0，表示对角线向下的偏移量。\n  axis1: 可选参量，用来作为二维子 NdArray 的第一轴的轴, 对角线应该从这里开始。默认第一轴为 0。\n  axis2: 可选参量，用来作为二维子 NdArray 的第二轴的轴, 对角线应该从这里开始。默认第二轴为 1。\n返回值: 新的 NdArray 对象。",
        "code": "ndmat = NdArray(shape=(3, 3),args=[[1,1,1],[2,2,2],[3,3,3]])\ndiag_m0 = ndmat.diagonal(0)\ndiag_a1 = ndmat.diagonal(1)\ndiag_b1 = ndmat.diagonal(-1)"
    },
    {
        "rowid": 25614,
        "name": "NdArray.pick()",
        "description": "摘要: pick(indexes)\n描述: 根据指定的下标，从 NdArray 对象获取新的多维数组。\n参量:\n  indexes: 指定的下标。\n返回值: 返回新的 NdArray 对象。",
        "code": ""
    },
    {
        "rowid": 25615,
        "name": "NdArray.hstack()",
        "description": "摘要: hstack(other)\n描述: 和另一个 NdArray 对象在水平维度（最后一个维度）上堆叠形成新的 NdArray 对象。\n参量:\n  other: 另一个 NdArray 对象。\n返回值: 返回新的 NdArray 对象。",
        "code": ""
    },
    {
        "rowid": 25616,
        "name": "NdArray.vstack()",
        "description": "摘要: vstack(other)\n描述: 和另一个 NdArray 对象在纵向维度上堆叠形成新的 NdArray 对象。\n参量:\n  other: 另一个 NdArray 对象。\n返回值: 返回新的 NdArray 对象。",
        "code": ""
    },
    {
        "rowid": 25617,
        "name": "NdArray.stack()",
        "description": "摘要: stack(other, axis)\n描述: 和另一个 NdArray 对象在指定轴方向上堆叠形成新的 NdArray 对象。\n参量:\n  other: 另一个 NdArray 对象。\n  axis: 指定轴方向序号。\n返回值: 返回新的 NdArray 对象。",
        "code": ""
    },
    {
        "rowid": 25618,
        "name": "NdArray.ndim",
        "description": "摘要: ndim\n描述: NdArray 对象的维度。\n返回值: 整型值。",
        "code": "ndmat = NdArray((3, 5))\nprint(ndmat.ndim) # ndim = 2"
    },
    {
        "rowid": 25619,
        "name": "NdArray.shape",
        "description": "摘要: shape\n描述: NdArray 对象的形状。\n返回值: 整型元组。",
        "code": "ndmat = NdArray((3, 5))\nprint(ndmat.shape) # shape = (3, 5)"
    },
    {
        "rowid": 25620,
        "name": "NdArray.size",
        "description": "摘要: size\n描述: NdArray 对象的元素个数。\n返回值: 整型值。",
        "code": "ndmat = NdArray((3, 5))\nprint(ndmat.size) # size = 15"
    },
    {
        "rowid": 25621,
        "name": "NdArray.T",
        "description": "摘要: T\n描述: NdArray 对象的转置，类似于类方法 NdArray.transpose() 。\n返回值: 返回转置后的 NdArray 对象。",
        "code": "ndmat = NdArray(shape=(3, 5))\nprint(ndmat.T.shape) # shape = (5, 3)"
    },
    {
        "rowid": 25701,
        "name": "ExprBuilder()",
        "description": "摘要: ExprBuilder(arg1=0.0, arg2=None)\n描述: 创建一个ExprBuilder 类 对象。\n若参数 arg1 为常数，参数 arg2 为 None，则创建一个ExprBuilder 类 对象，并以参数 arg1 的值初始化；若参数 arg1 为Var 类 对象或ExprBuilder 类 对象，则参数 arg2 为常数，参数 arg2 可为 None，此时当作常数 1.0，并以参数 arg1 和 arg2 初始化新创建的ExprBuilder 类 对象；若参数 arg1 和 arg2 为列表对象，则分别表示组成线性表达式的变量、系数，并初始化新创建的ExprBuilder 类 对象。\n参量:\n  arg1: 可选参量，默认值为 0.0。\n  arg2: 可选参量，默认值为 None。",
        "code": "# 创建一个新的ExprBuilder对象，并初始化为：0.0\nexpr0 = ExprBuilder()\n# 创建一个ExprBuilder对象，并初始化为：x + 2*y\nexpr2 = ExprBuilder([x, y], [1, 2])"
    },
    {
        "rowid": 25702,
        "name": "ExprBuilder.getSize()",
        "description": "摘要: getSize()\n描述: 获取表达式构建器中项的个数。",
        "code": "# 获取线性表达式构建器expr中元素的个数\nexprsize = expr.getSize()"
    },
    {
        "rowid": 25703,
        "name": "ExprBuilder.getCoeff()",
        "description": "摘要: getCoeff(idx)\n描述: 根据变量在表达式构建器中的下标获取其系数。\n参量:\n  idx: 变量在表达式构建器中的下标。起始为 0。",
        "code": "# 获取线性表达式构建器expr第1项的系数\ncoeff = expr.getCoeff(1)"
    },
    {
        "rowid": 25704,
        "name": "ExprBuilder.getVar()",
        "description": "摘要: getVar(idx)\n描述: 根据变量在表达式中构建器的下标获取相应的变量，返回一个Var 类 对象。\n参量:\n  idx: 变量在表达式构建器中的下标。起始为 0。",
        "code": "# 获取线性表达式构建器expr第1项的变量\nx = expr.getVar(1)"
    },
    {
        "rowid": 25705,
        "name": "ExprBuilder.getConstant()",
        "description": "摘要: getConstant()\n描述: 获取表达式构建器中的常数项。",
        "code": "# 获取线性表达式expr的常数项\nconstant = expr.getConstant()"
    },
    {
        "rowid": 25706,
        "name": "ExprBuilder.addTerm()",
        "description": "摘要: addTerm(var, coeff=1.0)\n描述: 添加新的项到当前表达式构建器中。\n参量:\n  var: 待添加项的变量。\n  coeff: 待添加项的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加项：2*x 到线性表达式构建器expr中\nexpr.addTerm(x, 2.0)"
    },
    {
        "rowid": 25707,
        "name": "ExprBuilder.addExpr()",
        "description": "摘要: addExpr(expr, coeff=1.0)\n描述: 添加新的表达式构建器到当前表达式构建器中。\n参量:\n  expr: 待添加表达式构建器。\n  coeff: 待添加表达式构建器的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加线性表达式构建器对象 2*x + 2*y 到线性表达式构建器expr中\nexpr.addExpr(x + y, 2.0)"
    },
    {
        "rowid": 25708,
        "name": "ExprBuilder.clone()",
        "description": "摘要: clone()\n描述: 创建表达式构建器对象的深拷贝。",
        "code": "# 创建线性表达式构建器expr的深拷贝\nexprcopy = expr.clone()"
    },
    {
        "rowid": 25709,
        "name": "ExprBuilder.getExpr()",
        "description": "摘要: getExpr()\n描述: 创建并获取线性表达式构建器相应的表达式，返回一个LinExpr 类 对象。",
        "code": "# 获取线性表达式构建器exprbuilder相应的表达式\nexpr = exprbuilder.getExpr()"
    },
    {
        "rowid": 25801,
        "name": "LinExpr()",
        "description": "摘要: LinExpr(arg1=0.0, arg2=None)\n描述: 创建一个LinExpr 类 对象。\n若参数 arg1 为常数，参数 arg2 为 None，则创建一个LinExpr 类 对象，并以参数 arg1 的值初始化；若参数 arg1 为Var 类 对象或LinExpr 类 对象，则参数 arg2 为常数，参数 arg2 可为 None，此时当作常数 1.0，并以参数 arg1 和 arg2 初始化新创建的LinExpr 类 对象；若参数 arg1 为列表对象，参数 arg2 为 None，则参数 arg1 中的元素为变量、系数对，并以参数 arg1 和 arg2 初始化新创建的LinExpr 类 对象；对于其它参数情形，则调用成员方法 addTerms 初始化新创建的LinExpr 类 对象。\n参量:\n  arg1: 可选参量，默认值为 0.0。\n  arg2: 可选参量，默认值为 None。",
        "code": "# 创建一个新的LinExpr对象，并初始化为：0.0\nexpr0 = LinExpr()\n# 创建一个LinExpr对象，并初始化为：2*x + 3*y\nexpr1 = LinExpr([(x, 2), (y, 3)])\n# 创建一个LinExpr对象，并初始化为：x + 2*y\nexpr2 = LinExpr([x, y], [1, 2])"
    },
    {
        "rowid": 25802,
        "name": "LinExpr.setCoeff()",
        "description": "摘要: setCoeff(idx, newval)\n描述: 根据变量在表达式中的下标设置其系数。\n参量:\n  idx: 变量在表达式中的下标。起始为 0。\n  newval: 变量的新系数。",
        "code": "# 设置线性表达式expr第0项的系数为1.0\nexpr.setCoeff(0, 1.0)"
    },
    {
        "rowid": 25803,
        "name": "LinExpr.getCoeff()",
        "description": "摘要: getCoeff(idx)\n描述: 根据变量在表达式中的下标获取其系数。\n参量:\n  idx: 变量在表达式中的下标。起始为 0。",
        "code": "# 获取线性表达式expr第1项的系数\ncoeff = expr.getCoeff(1)"
    },
    {
        "rowid": 25804,
        "name": "LinExpr.getVar()",
        "description": "摘要: getVar(idx)\n描述: 根据变量在表达式中的下标获取相应的变量，返回一个Var 类 对象。\n参量:\n  idx: 变量在表达式中的下标。起始为 0。",
        "code": "# 获取线性表达式expr第1项的变量\nx = expr.getVar(1)"
    },
    {
        "rowid": 25805,
        "name": "LinExpr.getConstant()",
        "description": "摘要: getConstant()\n描述: 获取表达式中的常数项。",
        "code": "# 获取线性表达式expr的常数项\nconstant = expr.getConstant()"
    },
    {
        "rowid": 25806,
        "name": "LinExpr.getValue()",
        "description": "摘要: getValue()\n描述: 获取以变量的取值计算出的表达式的值。",
        "code": "# 获取线性表达式expr的当前值\nval = expr.getValue()"
    },
    {
        "rowid": 25807,
        "name": "LinExpr.getSize()",
        "description": "摘要: getSize()\n描述: 获取表达式中项的个数。",
        "code": "# 获取线性表达式expr中元素的个数\nexprsize = expr.getSize()"
    },
    {
        "rowid": 25808,
        "name": "LinExpr.setConstant()",
        "description": "摘要: setConstant(newval)\n描述: 设置表达式的常数项。\n参量:\n  newval: 待设置常数值。",
        "code": "# 设置线性表达式expr的常数项为2.0\nexpr.setConstant(2.0)"
    },
    {
        "rowid": 25809,
        "name": "LinExpr.addConstant()",
        "description": "摘要: addConstant(newval)\n描述: 添加常数到表达式。\n参量:\n  newval: 待添加常数值。",
        "code": "# 添加常数2.0到线性表达式expr中\nexpr.addConstant(2.0)"
    },
    {
        "rowid": 25810,
        "name": "LinExpr.addTerm()",
        "description": "摘要: addTerm(var, coeff=1.0)\n描述: 添加新的项到当前表达式中。\n参量:\n  var: 待添加项的变量。\n  coeff: 待添加项的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加项：x到线性表达式expr中\nexpr.addTerm(x)"
    },
    {
        "rowid": 25811,
        "name": "LinExpr.addTerms()",
        "description": "摘要: addTerms(vars, coeffs)\n描述: 添加单个或多个新项到表达式。\n若参数 vars 为Var 类 对象，则参数 coeffs 为常数；若参数 vars 为VarArray 类 对象或列表对象，则参数 coeffs 为常数或列表对象；若参数 vars 为字典对象或tupledict 类 对象，则参数 coeffs 为常数、字典或tupledict 类 对象。\n参量:\n  vars: 待添加的变量。\n  coeffs: 待添加项的系数。",
        "code": "# 添加项：2*x + 2*y到线性表达式expr中\nexpr.addTerms([x, y], [2.0, 3.0])"
    },
    {
        "rowid": 25812,
        "name": "LinExpr.addExpr()",
        "description": "摘要: addExpr(expr, coeff=1.0)\n描述: 添加新的表达到当前表达式中。\n参量:\n  expr: 待添加表达式或者表达式构建器对象。\n  coeff: 待添加表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加线性表达式：2*x + 2*y到线性表达式expr中\nexpr.addExpr(x + y, 2.0)"
    },
    {
        "rowid": 25813,
        "name": "LinExpr.clone()",
        "description": "摘要: clone()\n描述: 创建表达式对象的深拷贝。",
        "code": "# 创建线性表达式expr的深拷贝\nexprcopy = expr.clone()"
    },
    {
        "rowid": 25814,
        "name": "LinExpr.reserve()",
        "description": "摘要: reserve(n)\n描述: 为表达式对象预分配空间。\n参量:\n  n: 预分配的表达式中项的数目。",
        "code": "# 预分配表达式expr中项的数目为100\nexpr.reserve(100)"
    },
    {
        "rowid": 25815,
        "name": "LinExpr.remove()",
        "description": "摘要: remove(item)\n描述: 从表达式中移除指定项。\n若参数 item 为常数，则移除指定下标对应的项；否则参数 item 为Var 类 对象。\n参量:\n  item: 常数下标或待移除项相应的变量。",
        "code": "# 从线性表达式expr中移除下标为2相应的项\nexpr.remove(2)\n# 从线性表达式expr中移除变量x相应的项\nexpr.remove(x)"
    },
    {
        "rowid": 25901,
        "name": "QuadExpr()",
        "description": "摘要: QuadExpr(expr=0.0)\n描述: 创建一个QuadExpr 类 对象。\n参数 expr 为常数、Var 类 对象、LinExpr 类 对象或QuadExpr 类 对象。\n参量:\n  expr: 可选参量，默认值为 0.0。",
        "code": "# 创建一个新的QuadExpr对象，并初始化为：0.0\nquadexpr0 = QuadExpr()\n# 创建一个QuadExpr对象，并初始化为：2*x + 3*y\nquadexpr1 = QuadExpr(2*x + 3*y)\n# 创建一个QuadExpr对象，并初始化为：x*x + 2*y*z\nquadexpr2 = QuadExpr(x*x + 2*y*z)"
    },
    {
        "rowid": 25902,
        "name": "QuadExpr.setCoeff()",
        "description": "摘要: setCoeff(idx, newval)\n描述: 设置二次表达式中指定索引值对应的二次项系数。\n参量:\n  idx: 指定的索引值。起始为 0。\n  newval: 变量的新系数。",
        "code": "# 设置二次表达式quadexpr第0项的系数为1.0\nquadexpr.setCoeff(0, 1.0)"
    },
    {
        "rowid": 25903,
        "name": "QuadExpr.getCoeff()",
        "description": "摘要: getCoeff(idx)\n描述: 根据变量在表达式中的下标获取其系数。\n参量:\n  idx: 变量在表达式中的下标。起始为 0。",
        "code": "# 获取二次表达式quadexpr第1项的系数\ncoeff = quadexpr.getCoeff(1)"
    },
    {
        "rowid": 25904,
        "name": "QuadExpr.getVar1()",
        "description": "摘要: getVar1(idx)\n描述: 获取指定的二次项的第一个变量，返回一个Var 类 对象。\n参量:\n  idx: 二次项的下标。起始为 0。",
        "code": "# 获取第1个二次项的第1个变量\nx = expr.getVar1(1)"
    },
    {
        "rowid": 25905,
        "name": "QuadExpr.getVar2()",
        "description": "摘要: getVar2(idx)\n描述: 获取指定的二次项的第二个变量，返回一个Var 类 对象。\n参量:\n  idx: 二次项的下标。起始为 0。",
        "code": "# 获取第1个二次项的第2个变量\ny = expr.getVar2(1)"
    },
    {
        "rowid": 25906,
        "name": "QuadExpr.getLinExpr()",
        "description": "摘要: getLinExpr()\n描述: 获取二次表达式中的线性表达式。",
        "code": "# 获取二次表达式quadexpr中的线性表达式linexpr\nlinexpr = quadexpr.getLinExpr()"
    },
    {
        "rowid": 25907,
        "name": "QuadExpr.getConstant()",
        "description": "摘要: getConstant()\n描述: 获取表达式中的常数项。",
        "code": "# 获取二次表达式quadexpr的常数项\nconstant = quadexpr.getConstant()"
    },
    {
        "rowid": 25908,
        "name": "QuadExpr.getValue()",
        "description": "摘要: getValue()\n描述: 获取以变量的取值计算出的表达式的值。",
        "code": "# 获取二次表达式quadexpr的当前值\nval = quadexpr.getValue()"
    },
    {
        "rowid": 25909,
        "name": "QuadExpr.getSize()",
        "description": "摘要: getSize()\n描述: 获取表达式中项的个数。",
        "code": "# 获取二次表达式quadexpr中元素的个数\nexprsize = quadexpr.getSize()"
    },
    {
        "rowid": 25910,
        "name": "QuadExpr.setConstant()",
        "description": "摘要: setConstant(newval)\n描述: 设置表达式的常数项。\n参量:\n  newval: 待设置常数值。",
        "code": "# 设置二次表达式quadexpr的常数项为2.0\nquadexpr.setConstant(2.0)"
    },
    {
        "rowid": 25911,
        "name": "QuadExpr.addConstant()",
        "description": "摘要: addConstant(newval)\n描述: 添加常数到表达式。\n参量:\n  newval: 待添加常数值。",
        "code": "# 添加常数2.0到二次表达式quadexpr中\nquadexpr.addConstant(2.0)"
    },
    {
        "rowid": 25912,
        "name": "QuadExpr.addTerm()",
        "description": "摘要: addTerm(coeff, var1, var2=None)\n描述: 添加新的项到当前表达式中。\n参量:\n  coeff: 待添加项的系数。\n  var1: 待添加项的第一个变量。\n  var2: 待添加项的第二个变量。可以为 None，表示添加线性项。",
        "code": "# 添加项：x到二次表达式quadexpr中\nquadexpr.addTerm(1.0, x)"
    },
    {
        "rowid": 25913,
        "name": "QuadExpr.addTerms()",
        "description": "摘要: addTerms(coeffs, vars1, vars2=None)\n描述: 添加单个或多个新项到表达式。\n若参数 vars1 为Var 类 对象，则参数 vars2 为Var 类 对象或 None ，参数 coeffs 为常数；若参数 vars1 为VarArray 类 对象或列表对象，则参数 vars2 为VarArray 类 对象、列表对象或 None ，参数 coeffs 为常数或列表对象；若参数 vars1 为字典对象或tupledict 类 对象，则参数 vars2 为字典对象、tupledict 类 对象或 None ，参数 coeffs 为常数、字典或tupledict 类 对象。\n参量:\n  coeffs: 待添加项的系数。\n  vars1: 待添加项的第一个变量。\n  vars2: 待添加项的第二个变量。可以取值 None，表示添加线性项。",
        "code": "# 添加项：2*x + 3y + 2*x*x + 3*x*y 到二次表达式quadexpr中\n# 注意：addTerms不支持混合线性项和二次项\nquadexpr.addTerms([2.0, 3.0], [x, y])\nquadexpr.addTerms([2.0, 3.0], [x, x], [x, y])"
    },
    {
        "rowid": 25914,
        "name": "QuadExpr.addLinExpr()",
        "description": "摘要: addLinExpr(expr, mult=1.0)\n描述: 添加新的表达到当前表达式中。\n参量:\n  expr: 待添加表达式或者表达式构建器对象。\n  mult: 待添加表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加线性表达式：2*x + 2*y到二次表达式quadexpr中\nquadexpr.addLinExpr(x + y, 2.0)"
    },
    {
        "rowid": 25915,
        "name": "QuadExpr.addQuadExpr()",
        "description": "摘要: addQuadExpr(expr, mult=1.0)\n描述: 添加新的表达到当前表达式中。\n参量:\n  expr: 待添加表达式或者表达式构建器对象。\n  mult: 待添加表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加二次表达式：x*x + 2*y到二次表达式quadexpr中\nquadexpr.addQuadExpr(x*x + 2*y, 2.0)"
    },
    {
        "rowid": 25916,
        "name": "QuadExpr.clone()",
        "description": "摘要: clone()\n描述: 创建表达式对象的深拷贝。",
        "code": "# 创建二次表达式quadexpr的深拷贝\nexprcopy = quadexpr.clone()"
    },
    {
        "rowid": 25917,
        "name": "QuadExpr.reserve()",
        "description": "摘要: reserve(n)\n描述: 为表达式对象预分配空间。\n参量:\n  n: 预分配的表达式中项的数目。",
        "code": "# 预分配表达式expr中项的数目为100\nquadexpr.reserve(100)"
    },
    {
        "rowid": 25918,
        "name": "QuadExpr.remove()",
        "description": "摘要: remove(item)\n描述: 从表达式中移除指定项。\n若参数 item 为常数，则移除指定下标对应的项；否则参数 item 为Var 类 对象。\n参量:\n  item: 常数下标或待移除项相应的变量。",
        "code": "# 从表达式中移除下标为2相应的项\nquadexpr.remove(2)\n# 从表达式中移除变量x相应的项\nquadexpr.remove(x)"
    },
    {
        "rowid": 26001,
        "name": "PsdExpr()",
        "description": "摘要\nPsdExpr(expr=0.0)\n描述\n创建一个PsdExpr 类 对象。\n参量\nexpr\n可选参量，默认值为 0.0。可取值为常数、Var 类 对象、LinExpr 类 对象和PsdExpr 类 对象。",
        "code": "# 创建一个新的PsdExpr对象，并初始化为：0.0\nexpr0 = PsdExpr()\n# 创建一个PsdExpr对象，并初始化为：2*x + 3*y\nexpr1 = PsdExpr(2*x + 3*y)"
    },
    {
        "rowid": 26002,
        "name": "PsdExpr.setCoeff()",
        "description": "摘要\nsetCoeff(idx, mat)\n描述\n根据半定变量在表达式中的下标设置其对称矩阵系数。\n参量\nidx\n半定变量在表达式中的下标。起始为 0。\nmat\n半定变量的新对称矩阵系数。",
        "code": "# 设置半定表达式expr第0项的系数为对称矩阵mat\nexpr.setCoeff(0, mat)"
    },
    {
        "rowid": 26003,
        "name": "PsdExpr.getCoeff()",
        "description": "摘要\ngetCoeff(idx)\n描述\n根据半定变量在表达式中的下标获取其对称矩阵系数。\n参量\nidx\n半定变量在表达式中的下标。起始为 0。",
        "code": "# 获取半定表达式expr第1项的对称矩阵系数\nmat = expr.getCoeff(1)"
    },
    {
        "rowid": 26004,
        "name": "PsdExpr.getPsdVar()",
        "description": "摘要\nPsdExpr.getPsdVar(idx)\n描述\n根据半定变量在表达式中的下标获取相应的半定变量，返回一个PsdVar 类 对象。\n参量\nidx\n半定变量在表达式中的下标。起始为 0。",
        "code": "# 获取半定表达式expr第1项的半定变量\nx = expr.getPsdVar(1)"
    },
    {
        "rowid": 26005,
        "name": "PsdExpr.getLinExpr()",
        "description": "摘要\ngetLinExpr()\n描述\n获取表达式中的线性表达式。",
        "code": "# 获取半定表达式expr的线性表达式\nlinexpr = expr.getLinExpr()"
    },
    {
        "rowid": 26006,
        "name": "PsdExpr.getConstant()",
        "description": "摘要\ngetConstant()\n描述\n获取表达式中的常数项。",
        "code": "# 获取半定表达式expr的常数项\nconstant = expr.getConstant()"
    },
    {
        "rowid": 26007,
        "name": "PsdExpr.getValue()",
        "description": "摘要\ngetValue()\n描述\n获取以半定变量和变量的取值计算出的表达式的值。",
        "code": "# 获取半定表达式expr的当前值\nval = expr.getValue()"
    },
    {
        "rowid": 26008,
        "name": "PsdExpr.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取半定表达式中项的个数。",
        "code": "# 获取半定表达式expr中元素的个数\nexprsize = expr.getSize()"
    },
    {
        "rowid": 26009,
        "name": "PsdExpr.setConstant()",
        "description": "摘要\nsetConstant(newval)\n描述\n设置半定表达式的常数项。\n参量\nnewval\n待设置常数值。",
        "code": "# 设置半定表达式expr的常数项为2.0\nexpr.setConstant(2.0)"
    },
    {
        "rowid": 26010,
        "name": "PsdExpr.addConstant()",
        "description": "摘要\naddConstant(newval)\n描述\n添加常数到半定表达式。\n参量\nnewval\n待添加常数值。",
        "code": "# 添加常数2.0到半定表达式expr中\nexpr.addConstant(2.0)"
    },
    {
        "rowid": 26011,
        "name": "PsdExpr.addTerm()",
        "description": "摘要\naddTerm(var, mat)\n描述\n添加新的半定项到当前半定表达式中。\n参量\nvar\n待添加半定项的半定变量。\nmat\n待添加半定项的对称矩阵。",
        "code": "# 添加半定项 C1 * X到半定表达式expr中\nexpr.addTerm(X, C1)"
    },
    {
        "rowid": 26012,
        "name": "PsdExpr.addTerms()",
        "description": "摘要\naddTerms(vars, mats)\n描述\n添加单个或多个新半定项到半定表达式。\n若参数 vars 为PsdVar 类 对象，则参数 mats 为SymMatrix 类 对象；若参数 vars 为PsdVarArray 类 对象或列表对象，则参数 mats 为SymMatrixArray 类 对象或列表对象；\n参量\nvars\n待添加半定项的半定变量。\nmats\n待添加半定项的对称矩阵。",
        "code": "# 添加项：C1 * X1 + C2 * X2到半定表达式expr中\nexpr.addTerms([X1, X2], [C1, C2])"
    },
    {
        "rowid": 26013,
        "name": "PsdExpr.addLinExpr()",
        "description": "摘要\naddLinExpr(expr, mult=1.0)\n描述\n添加新的线性表达式到当前半定表达式中。\n参量\nexpr\n待添加线性表达式或者线性表达式构建器对象。\nmult\n待添加线性表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加线性表达式：2*x + 2*y到半定表达式expr中\nexpr.addLinExpr(x + y, 2.0)"
    },
    {
        "rowid": 26014,
        "name": "PsdExpr.addPsdExpr()",
        "description": "摘要\naddPsdExpr(expr, mult=1.0)\n描述\n添加新的半定表达式到当前半定表达式中。\n参量\nexpr\n待添加半定表达式。\nmult\n待添加半定表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加半定表达式：C * X到半定表达式expr中\nexpr.addPsdExpr(C*X)"
    },
    {
        "rowid": 26015,
        "name": "PsdExpr.addMExpr()",
        "description": "摘要\naddMExpr(expr, mult=1.0)\n描述\n添加新的多维数组表达式到当前半定表达式中。\n参量\nexpr\n待添加多维数组表达式或者多维数组表达式构建器对象。\nmult\n待添加多维数组表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加多维数组线性表达式：2.0*A@x 到半定表达式expr中\nexpr.addMExpr(A@x, 2.0)"
    },
    {
        "rowid": 26016,
        "name": "PsdExpr.clone()",
        "description": "摘要\nclone()\n描述\n创建表达式对象的深拷贝。",
        "code": "# 创建半定表达式expr的深拷贝\nexprcopy = expr.clone()"
    },
    {
        "rowid": 26017,
        "name": "PsdExpr.reserve()",
        "description": "摘要\nreserve(n)\n描述\n为半定表达式对象预分配空间。\n参量\nn\n预分配的半定表达式中项的数目。",
        "code": "# 预分配半定表达式expr中项的数目为100\nexpr.reserve(100)"
    },
    {
        "rowid": 26018,
        "name": "PsdExpr.remove()",
        "description": "摘要\nremove(item)\n描述\n从半定表达式中移除指定项。\n若参数 item 为常数，则移除指定下标对应的项；否则参数 item 为PsdVar 类 对象。\n参量\nitem\n常数下标或待移除项相应的半定变量。",
        "code": "# 从半定表达式expr中移除下标为2相应的项\nexpr.remove(2)\n# 从半定表达式expr中移除半定变量x相应的项\nexpr.remove(x)"
    },
    {
        "rowid": 26101,
        "name": "MPsdExpr.addTerm()",
        "description": "摘要\naddTerm(var, mat)\n描述\n添加新的半定项到当前多维半定表达式中。\n参量\nvar\n待添加半定项中的半定变量。\nmat\n待添加半定项中的对称矩阵。",
        "code": "# 添加半定项 C1 * X到多维半定表达式mexpr中\nmexpr.addTerm(X, C1)"
    },
    {
        "rowid": 26102,
        "name": "MPsdExpr.addTerms()",
        "description": "摘要\naddTerms(vars, coeffs)\n描述\n对多维半定表达式对象的半定表达式添加新的项。\n参量\nvars\n多维数组变量对象。可取值为 MVar 。\ncoeffs\n多维数组系数矩阵。可取值为常数或 NdArray 。",
        "code": "# 添加项：mA@到多维半定表达式mpsdexpr中\nmX = model.addMVar((3,3), nameprefix=\"M_X\")\nmA = cp.NdArray(np.ones(shape=(3,3)))\nmpsdexpr.addTerms(mX, mA)"
    },
    {
        "rowid": 26103,
        "name": "MPsdExpr.addLinExpr()",
        "description": "摘要\naddLinExpr(expr, mult=1.0)\n描述\n添加一个新的线性表达式到当前多维半定表达式中。\n参量\nexpr\n待添加线性表达式或者线性表达式构建器对象。可取值为 LinExpr 或ExprBuilder 对象。\nmult\n待添加线性表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加线性表达式：2*x + 2*y到半定表达式mexpr中\nmexpr.addLinExpr(x + y, 2.0)"
    },
    {
        "rowid": 26104,
        "name": "MPsdExpr.addPsdExpr()",
        "description": "摘要\naddPsdExpr(expr, mult=1.0)\n描述\n添加新的半定表达式到当前多维半定表达式中。\n参量\nexpr\n待添加的半定表达式。\nmult\n待添加半定表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加半定表达式：C * X到多维半定表达式mexpr中\nmexpr.addPsdExpr(C*X)"
    },
    {
        "rowid": 26105,
        "name": "MPsdExpr.addMExpr()",
        "description": "摘要\naddMExpr(expr, mult=1.0)\n描述\n添加新的多维表达式到当前多维半定表达式中。\n参量\nexpr\n待添加多维数组表达式或者多维数组表达式构建器对象。\nmult\n待添加多维数组表达式的放大系数。可选参量，默认值为 1.0。",
        "code": "# 添加多维数组线性表达式：2.0*A@x 到半定表达式mexpr中\nmexpr.addMExpr(A@x, 2.0)"
    },
    {
        "rowid": 26106,
        "name": "MPsdExpr.addMLinExpr()",
        "description": "摘要\naddMLinExpr(exprs, mult=1.0)\n描述\n对多维半定表达式对象的每个半定表达式都添加对应的线性表达式。\n参量\nexprs\n待添加多维线性表达式或者多维线性表达式构建器对象。\nmult\n待添加多维线性表达式的相同的放大系数。可选参量，默认值为 1.0。",
        "code": "# 为多维半定表达式mexpr的每个半定表达式都新增线性表达式A@x\nmexpr.addMLinExpr(A@x)"
    },
    {
        "rowid": 26107,
        "name": "MPsdExpr.addMPsdExpr()",
        "description": "摘要\naddMPsdExpr(exprs, mult=1.0)\n描述\n对多维半定表达式对象的每个半定表达式都添加对应新的半定表达式。\n参量\nexpr\n待添加新半定表达式。\nmult\n待添加新半定表达式的相同的放大系数。可选参量，默认值为 1.0。",
        "code": "# 为多维半定表达式mexpr的每个半定表达式都新增半定表达式：C * X\nmexpr.addMPsdExpr(C*X)"
    },
    {
        "rowid": 26108,
        "name": "MPsdExpr.item()",
        "description": "摘要\nitem()\n描述\n获取 0 维半定表达式内的 PsdExpr 。如果 MPsdExpr 对象不是 0 维，触发ValueError 异常。\n返回值\n返回 PsdExpr 对象。",
        "code": "barX = model.addPsdVars(3, \"BAR_X\")\nmpsdexpr = barX[:-1, :-1]\npsdexpr1 = mpsdexpr[0,0].item()\npsdexpr2 = mpsdexpr.sum().item()"
    },
    {
        "rowid": 26109,
        "name": "MPsdExpr.sum()",
        "description": "摘要\nsum(axis=None)\n描述\n沿指定坐标轴对 MPsdExpr 对象中的半定项求和，返回一个新的MPsdExpr 类 对象。\n参量\naxis\n可选整型参量，默认值为 None，即对所有变量求和。否则，按给定的轴求和。\n返回值\n返回 MPsdExpr 对象，表示对应多维半定表达式的和。",
        "code": ""
    },
    {
        "rowid": 26110,
        "name": "MPsdExpr.clear()",
        "description": "摘要\nclear()\n描述\n重置MPsdExpr 类 对象的每个元素为 0.0。",
        "code": "barX = model.addPsdVars(3, \"BAR_X\")\nmpsdexpr = barX[:-1, :-1]\nmpsdexpr.clear()"
    },
    {
        "rowid": 26111,
        "name": "MPsdExpr.clone()",
        "description": "摘要\nclone()\n描述\n深度复制一个MPsdExpr 类 对象。\n返回值\n新的 MPsdExpr 对象",
        "code": "barX = model.addPsdVars(3, \"BAR_X\")\nmpsdexpr = barX[:-1, :-1]\nnewmpsdexpr = mpsdexpr.clone()"
    },
    {
        "rowid": 26201,
        "name": "LmiExpr()",
        "description": "摘要\nLmiExpr(arg1=None, arg2=None)\n描述\n创建一个LmiExpr 类 对象。\n参量\narg1 默认值为 None ，可取值为：Var 类 对象，或SymMatrix 类 对象。\n若参数 arg1 为Var 类 对象，则参数 arg2 为SymMatrix 类 对象。",
        "code": ""
    },
    {
        "rowid": 26202,
        "name": "LmiExpr.setCoeff()",
        "description": "摘要\nsetCoeff(idx, mat)\n描述\n设置 LMI 表达式中指定索引 idx 对应项的系数矩阵。\n参量\nidx\n指定的索引值。起始为 0。\nmat\n待设置变量的新系数对称矩阵，需为SymMatrix 类 类对象。",
        "code": "# 设置LMI表达式expr第0项的系数为对称矩阵mat\nexpr.setCoeff(0, mat)"
    },
    {
        "rowid": 26203,
        "name": "LmiExpr.getCoeff()",
        "description": "摘要\ngetCoeff(idx)\n描述\n获取 LMI 表达式中指定索引 idx 对应项的系数矩阵。\n参量\nidx\n变量在表达式中的下标。起始为 0。",
        "code": "# 获取LMI表达式expr第1项的对称矩阵系数\nmat = expr.getCoeff(1)"
    },
    {
        "rowid": 26204,
        "name": "LmiExpr.getVar()",
        "description": "摘要\ngetVar(idx)\n描述\n获取 LMI 表达式中指定索引 idx 对应项中的变量。\n参量\nidx\n指定的索引值。起始为 0。",
        "code": "# 获取LMI表达式expr第1项的变量\nmat = expr.getVar(1)"
    },
    {
        "rowid": 26205,
        "name": "LmiExpr.getConstant()",
        "description": "摘要\ngetConstant()\n描述\n获取 LMI 表达式中的常数项对称矩阵。",
        "code": "# 获取LMI表达式expr的常数项对称矩阵\nconstant = expr.getConstant()"
    },
    {
        "rowid": 26206,
        "name": "LmiExpr.getSize()",
        "description": "摘要\ngetSize()\n描述\n获取 LMI 表达式中的项数。",
        "code": "# 获取表达式expr中项的个数\nval = expr.getSize()"
    },
    {
        "rowid": 26207,
        "name": "LmiExpr.setConstant()",
        "description": "摘要\nsetConstant(mat)\n描述\n设置 LMI 表达式的常数项对称矩阵。\n参量\nmat\n常数项对应的对称矩阵，需为SymMatrix 类 对象。",
        "code": "# 设置LMI表达式expr的常数项为对称矩阵D1\nexpr.setConstant(D1)"
    },
    {
        "rowid": 26208,
        "name": "LmiExpr.addConstant()",
        "description": "摘要\naddConstant(mat)\n描述\n将对称矩阵添加到 LMI 表达式中的常数项中。\n参量\nmat\n加到常数项的对称矩阵对象。",
        "code": "# 将对称矩阵D2添加到LMI表达式expr的常数项中\nexpr.addConstant(D2)"
    },
    {
        "rowid": 26209,
        "name": "LmiExpr.addTerm()",
        "description": "摘要\naddTerm(var, mat)\n描述\n向 LMI 表达式中添加一个新项。\n参量\nvar\n新项中的变量。\nmat\n新项中作为变量系数的对称矩阵，需为SymMatrix 类 类对象。",
        "code": "# 添加项 x * C1 到LMI表达式expr中\nexpr.addTerm(x, C1)"
    },
    {
        "rowid": 26210,
        "name": "LmiExpr.addTerms()",
        "description": "摘要\naddTerms(vars, mats)\n描述\n向 LMI 表达式中添加多个新项。\n若参数 vars 为Var 类 对象，则参数 mats 为SymMatrix 类 对象；若参数 vars 为VarArray 类 对象或列表对象，则参数 mats 为SymMatrixArray 类 对象或列表对象；\n参量\nvars\n待添加新项的变量数组。\nmats\n待添加新项的对称矩阵数组。",
        "code": "# 添加项：x1 * C1 + x2 * C2到LMI表达式expr中\nexpr.addTerms([x1, x2], [C1, C2])"
    },
    {
        "rowid": 26211,
        "name": "LmiExpr.addLmiExpr()",
        "description": "摘要\naddLmiExpr(expr, mult=1.0)\n描述\n向当前的 LMI 表达式中，再添加一个新的 LMI 表达式。\n参量\nexpr\n待添加的 LMI 表达式。\nmult\n可选的系数倍数，为常数，默认值为 1.0。",
        "code": "# 添加半定表达式：2 * x * C到半定表达式expr中\nexpr.addLmiExpr(x * C, 2.0)"
    },
    {
        "rowid": 26212,
        "name": "LmiExpr.clone()",
        "description": "摘要\nclone()\n描述\n创建 LMI 表达式对象的深拷贝。",
        "code": "# 创建LMI表达式expr的深拷贝\nexprcopy = expr.clone()"
    },
    {
        "rowid": 26213,
        "name": "LmiExpr.reserve()",
        "description": "摘要\nreserve(n)\n描述\n为 LMI 表达式对象预分配空间。\n参量\nn\n预分配的 LMI 表达式中项的数目。",
        "code": "# 预分配LMI表达式expr中项的数目为100\nexpr.reserve(100)"
    },
    {
        "rowid": 26214,
        "name": "LmiExpr.remove()",
        "description": "摘要\nremove(item)\n描述\n从 LMI 表达式中移除指定项。\n若参数 item 为常数，则移除指定下标对应的项；否则参数 item 为Var 类 对象。\n参量\nitem\n常数下标或待移除项相应的变量。",
        "code": "# 从LMI表达式expr中移除下标为2相应的项\nexpr.remove(2)\n# 从LMI表达式expr中移除变量x相应的项\nexpr.remove(x)"
    },
    {
        "rowid": 26301,
        "name": "CallbackBase.where()",
        "description": "摘要\nwhere()\n描述\n获取回调函数可能的触发条件。\n返回值\n返回一个整数值。",
        "code": ""
    },
    {
        "rowid": 26302,
        "name": "CallbackBase.callback()",
        "description": "摘要\ncallback()\n描述\n回调函数，为纯虚函数。用户覆盖实现求解进程中需要获取的信息或需执行的操作。",
        "code": "class CoptCallback(CallbackBase):\n    def __init__(self):\n        super().__init__()\n    def callback(self):\n        # Get the objective value when finding a feasible MIP solution\n        if self.where() == COPT.CBCONTEXT_MIPSOL:\n            db = self.getInfo(COPT.CBInfo.MipCandObj)"
    },
    {
        "rowid": 26303,
        "name": "CallbackBase.interrupt()",
        "description": "摘要\ninterrupt()\n描述\n中断回调中的求解进程。",
        "code": ""
    },
    {
        "rowid": 26304,
        "name": "CallbackBase.addUserCut()",
        "description": "摘要\naddUserCut(lhs, sense = None, rhs = None)\n描述\n向模型中添加一个割平面。\n参量\nlhs\n割平面约束的左端项。\n可取值为Var 类 对象，LinExpr 类 对象，或者约束构建器（ConstrBuilder 类 对象）。\nsense\n割平面的约束类型。\n可选参量，默认为 None 。可取值为：LESS_EQUAL, GREATER_EQUAL, EQUAL 和 FREE 。\n通过CallbackBase 类 添加的割平面，仅支持单边约束。\nrhs\n割平面约束的右端项。\n可选参量，默认为 None 。可取值为常数、Var 类 对象，或者LinExpr 类 对象。",
        "code": "self.addUserCut(x+y <= 1)"
    },
    {
        "rowid": 26305,
        "name": "CallbackBase.addUserCuts()",
        "description": "摘要\naddUserCuts(generator)\n描述\n向模型中批量添加多个割平面。\n参量\ngenerator\n一组割平面生成器。\n可取值为一组线性约束构建器ConstrBuilderArray 类 对象，或多维线性约束生成器MConstrBuilder 类 对象。",
        "code": "self.addUserCuts(x[i]+y[i] <= 1 for i in range(10))"
    },
    {
        "rowid": 26306,
        "name": "CallbackBase.addLazyConstr()",
        "description": "摘要\naddLazyConstr(lhs, sense = None, rhs = None)\n描述\n向模型中添加一个惰性约束。\n参量\nlhs\n惰性约束的左端项。\n可取值为Var 类 对象，LinExpr 类 对象，或者约束构建器（ConstrBuilder 类 对象）。\nsense\n惰性约束的约束类型。\n可选参量，默认为 None 。可取值为：LESS_EQUAL, GREATER_EQUAL, EQUAL 和 FREE 。\n通过CallbackBase 类 添加的惰性约束，仅支持单边约束。\nrhs\n惰性约束的右端项。\n可选参量，默认为 None 。可取值为常数、Var 类 对象，或者LinExpr 类 对象。",
        "code": "self.addLazyConstr(x+y <= 1)"
    },
    {
        "rowid": 26307,
        "name": "CallbackBase.addLazyConstrs()",
        "description": "摘要\naddLazyConstrs(generator)\n描述\n向模型中批量添加多个惰性约束。\n参量\ngenerator\n一组惰性约束生成器。\n可取值为一组线性约束构建器ConstrBuilderArray 类 对象，或多维线性约束生成器MConstrBuilder 类 对象。",
        "code": "self.addLazyConstrs(x[i]+y[i] <= 1 for i in range(10))"
    },
    {
        "rowid": 26308,
        "name": "CallbackBase.getInfo()",
        "description": "摘要\ngetInfo(cbinfo)\n描述\n在 MIP 求解过程中，根据回调触发条件，获取指定的模型信息值。\n参量\ncbinfo\n指定的信息名称。可取值详见回调信息\n返回值\n返回一个常数（整数型或双精度浮点型）。",
        "code": "db = self.getInfo(COPT.CBInfo.BestBnd)"
    },
    {
        "rowid": 26309,
        "name": "CallbackBase.getRelaxSol()",
        "description": "摘要\ngetRelaxSol(vars)\n描述\n在 MIP 求解过程中，获取当前节点线性松弛解中指定变量的值。\n注意：此方法仅适用于 CallbackBase.where() == COPT.CBCONTEXT_MIPRELAX（即找到 LP 线性松弛解时）。\n参量\nvars\n指定的变量。\n返回值\n若参数 args 为Var 类 对象，则返回指定变量的信息值常数；\n若参数 args 为列表或VarArray 类 对象，则返回指定变量的信息值组成的一个列表对象；\n若参数 args 为字典或tupledict 类 对象，则返回tupledict 类 对象（键为指定变量的下标，值为指定变量的信息值）；\n若参数 args 为 None, 则返回全部变量当前线性松弛解的信息值。",
        "code": "vals = self.getRelaxSol(vars)"
    },
    {
        "rowid": 26310,
        "name": "CallbackBase.getIncumbent()",
        "description": "摘要\ngetIncumbent(vars)\n描述\n在 MIP 求解过程中，获取当前最优可行解中指定变量的值。\n参量\nvars\n指定的变量。\n返回值\n若参数 args 为Var 类 对象，则返回指定变量的信息值常数；\n若参数 args 为列表或VarArray 类 对象，则返回指定变量的信息值组成的一个列表对象；\n若参数 args 为字典或tupledict 类 对象，则返回tupledict 类 对象（键为指定变量的下标，值为指定变量的信息值）；\n若参数 args 为 None, 则返回全部变量当前最优可行解的信息值。",
        "code": "vals = self.getIncumbent(vars)"
    },
    {
        "rowid": 26311,
        "name": "CallbackBase.getSolution()",
        "description": "摘要\ngetSolution(vars)\n描述\n在 MIP 求解过程中，获取当前可行解中指定变量的值。\n注意：此方法仅适用于 CallbackBase.where() == COPT.CBCONTEXT_MIPSOL（即找到 MIP 可行解时）。\n参量\nvars\n指定的变量。\n返回值\n若参数 args 为Var 类 对象，则返回指定变量的信息值常数；\n若参数 args 为列表或VarArray 类 对象，则返回指定变量的信息值组成的一个列表对象；\n若参数 args 为字典或tupledict 类 对象，则返回tupledict 类 对象（键为指定变量的下标，值为指定变量的信息值）；\n若参数 args 为 None, 则返回全部变量当前可行解的信息值。",
        "code": "vals = self.getSolution(vars)"
    },
    {
        "rowid": 26312,
        "name": "CallbackBase.setSolution()",
        "description": "摘要\nsetSolution(vars, vals)\n描述\n在 MIP 求解过程中，为指定变量设置自定义的可行解，（可以是用户通过任意方式找到的可行解，例如通过启发式算法）。\n若参数 vars 为Var 类 对象，则参数 vals 为常量；\n若参数 vars 为字典或tupledict 类 对象，则参数 vals 可为常量、字典或tupledict 类 对象；\n若参数 vars 为列表或VarArray 类 对象，则参数 vals 可为常量或列表对象。\n参量\nvars\n指定的变量。\nvals\n自定义解的值。",
        "code": "self.setSolution(x, 1)"
    },
    {
        "rowid": 26313,
        "name": "CallbackBase.loadSolution()",
        "description": "摘要\nloadSolution()\n描述\n将当前自定义的解加载入模型中。\n注意：当前仅支持完整的自定义解。",
        "code": "self.loadSolution()"
    },
    {
        "rowid": 26401,
        "name": "GenConstrX.getAttr()",
        "description": "摘要\ngetAttr(attrname)\n描述\n获取 GenConstrX 类对象的属性值，支持获取 GenConstrX 类对象的类型和名称。",
        "code": "# Get the name of con_max\ncon_max.getAttr(\"name\")\n# Get the type of con_max\ncon_max.getAttr(\"type\")"
    },
    {
        "rowid": 26402,
        "name": "GenConstrX.setAttr()",
        "description": "摘要\nsetAttr(attrname)\n描述\n设置 GenConstrX 类对象的属性值，支持设置 GenConstrX 类对象的名称。",
        "code": "# Set the name of con_max\ncon_max.setAttr(\"name\")"
    },
    {
        "rowid": 26501,
        "name": "CoptError.retcode",
        "description": "错误值代码。",
        "code": ""
    },
    {
        "rowid": 26502,
        "name": "CoptError.message",
        "description": "错误值信息。",
        "code": ""
    },
    {
        "rowid": "30101",
        "name": "multidict()",
        "description": "摘要: multidict(data)\n描述: 将输入的字典对象拆分为键与多个字典对象并返回。\n参量: data: 待拆分字典对象，该字典对象中每个键映射 n 个值。",
        "code": "keys, dict1, dict2 = multidict({\n\"hello\": [0, 1],\n\"world\": [2, 3]})"
    },
    {
        "rowid": "30102",
        "name": "quicksum()",
        "description": "摘要: quicksum(data)\n描述: 快速构建表达式，返回一个LinExpr 类 对象。\n参量: data: 生成表达式待加项。",
        "code": "expr = quicksum(m.getVars())"
    },
    {
        "rowid": "30103",
        "name": "repeat()",
        "description": "摘要: repeat(obj, repeats)\n描述: 将指定的对象重复指定的次数。\n参量: obj: Python 对象。 repeats: 重复的次数。",
        "code": ""
    },
    {
        "rowid": "30104",
        "name": "hstack()",
        "description": "摘要: hstack(left, right)\n描述: 横向堆叠输入的对象。\n参量: left: Python 对象。 right: Python 对象。",
        "code": ""
    },
    {
        "rowid": "30105",
        "name": "vstack()",
        "description": "摘要: vstack(left, right)\n描述: 纵向堆叠输入的对象。\n参量: left: Python 对象。 right: Python 对象。",
        "code": ""
    },
    {
        "rowid": "30106",
        "name": "stack()",
        "description": "摘要: stack(left, right, axis)\n描述: 沿指定轴方向堆叠输入的对象。\n参量: left: Python 对象。 right: Python 对象。 axis: 指定的轴方向序号。",
        "code": ""
    },
    {
        "rowid": "30201",
        "name": "tuplelist()",
        "description": "摘要: tuplelist(list)\n描述: 创建并返回一个tuplelist 类 对象。\n参量: list: Python 列表对象。",
        "code": "tl = tuplelist([(0, 1), (1, 2)])\ntl = tuplelist([('a', 'b'), ('b', 'c')])"
    },
    {
        "rowid": "30202",
        "name": "tuplelist.add()",
        "description": "摘要: add(item)\n描述: 向tuplelist 类 对象中添加项。\n参量: item: 待添加项，可取值为 Python 元组对象。",
        "code": "tl = tuplelist([(0, 1), (1, 2)])\ntl.add((2, 3))"
    },
    {
        "rowid": "30203",
        "name": "tuplelist.select()",
        "description": "摘要: select(pattern)\n描述: 根据指定的模式筛选得到符合条件的项，返回一个tuplelist 类 对象。\n参量: pattern: 指定的匹配模式。",
        "code": "tl = tuplelist([(0, 1), (0, 2), (1, 2)])\ntl.select(0, '*')"
    },
    {
        "rowid": "30301",
        "name": "tupledict()",
        "description": "摘要: tupledict(args, kwargs)\n描述: 创建并返回一个tupledict 类 对象。\n参量: args: 位置参量。 kwargs: 命名参量。",
        "code": "d = tupledict([(0, \"hello\"), (1, \"world\")])"
    },
    {
        "rowid": "30302",
        "name": "tupledict.select()",
        "description": "摘要: select(pattern)\n描述: 根据指定的模式筛选得到符合条件的项，返回一个tupledict 类 对象。\n参量: pattern: 指定的匹配模式。",
        "code": "d = tupledict([(0, \"hello\"), (1, \"world\")])\nd.select()"
    },
    {
        "rowid": "30303",
        "name": "tupledict.sum()",
        "description": "摘要: sum(pattern)\n描述: 根据指定的模式筛选累加项，返回一个LinExpr 类 对象。\n参量: pattern: 指定的匹配模式。",
        "code": "expr = x.sum()"
    },
    {
        "rowid": "30304",
        "name": "tupledict.prod()",
        "description": "摘要: prod(coeff, pattern)\n描述: 根据指定的模式筛选，并与乘积系数累乘项，返回一个LinExpr 类 对象。\n参量: coeff: 乘积系数。可取值为字典或tupledict 类 对象。 pattern: 指定的匹配模式。",
        "code": "coeff = dict([(1, 0.1), (2, 0.2)])\nexpr = x.prod(coeff)"
    },
    {
        "rowid": "30401",
        "name": "ProbBuffer()",
        "description": "摘要: ProbBuffer(buff)\n描述: 创建并返回一个ProbBuffer 类 对象。\n参量: buff: 缓冲区大小，默认为 None，即缓冲区大小为 0。",
        "code": "# 创建大小为100的字符流缓冲区\nbuff = ProbBuffer(100)"
    },
    {
        "rowid": "30402",
        "name": "ProbBuffer.getData()",
        "description": "摘要: getData()\n描述: 获取字符流缓冲区中的内容。",
        "code": "# 打印字符流缓冲区buff中的内容\nprint(buff.getData())"
    },
    {
        "rowid": "30403",
        "name": "ProbBuffer.getSize()",
        "description": "摘要: getSize()\n描述: 获取字符流缓冲区的大小。",
        "code": "# 获取字符流缓冲区buff的大小\nprint(buff.getSize())"
    },
    {
        "rowid": "30404",
        "name": "ProbBuffer.resize()",
        "description": "摘要: resize(sz)\n描述: 调整字符流缓冲区的大小。\n参量: sz: 缓冲区新的大小。",
        "code": "# 调整字符流缓冲区buff的大小\nbuff.resize(100)"
    }
]
    
